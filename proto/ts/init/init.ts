// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.1
// source: init.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  AppFramework,
  appFrameworkFromJSON,
  appFrameworkToJSON,
  Platform,
  platformFromJSON,
  platformToJSON,
} from "./common";

export const protobufPackage = "openim.init";

export interface IMConfig {
  appFramework: AppFramework;
  platform: Platform;
  apiAddr: string;
  wsAddr: string;
  dataDir: string;
  logLevel: number;
  isLogStandardOutput: boolean;
  logFilePath: string;
}

export interface InitSDKReq {
  config: IMConfig | undefined;
}

export interface InitSDKResp {
  suc: boolean;
}

export interface LoginReq {
  userID: string;
  token: string;
}

export interface LoginResp {
}

function createBaseIMConfig(): IMConfig {
  return {
    appFramework: 0,
    platform: 0,
    apiAddr: "",
    wsAddr: "",
    dataDir: "",
    logLevel: 0,
    isLogStandardOutput: false,
    logFilePath: "",
  };
}

export const IMConfig: MessageFns<IMConfig> = {
  encode(message: IMConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appFramework !== 0) {
      writer.uint32(8).int32(message.appFramework);
    }
    if (message.platform !== 0) {
      writer.uint32(16).int32(message.platform);
    }
    if (message.apiAddr !== "") {
      writer.uint32(26).string(message.apiAddr);
    }
    if (message.wsAddr !== "") {
      writer.uint32(34).string(message.wsAddr);
    }
    if (message.dataDir !== "") {
      writer.uint32(42).string(message.dataDir);
    }
    if (message.logLevel !== 0) {
      writer.uint32(48).uint32(message.logLevel);
    }
    if (message.isLogStandardOutput !== false) {
      writer.uint32(56).bool(message.isLogStandardOutput);
    }
    if (message.logFilePath !== "") {
      writer.uint32(66).string(message.logFilePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IMConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIMConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.appFramework = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.apiAddr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.wsAddr = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.dataDir = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.logLevel = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isLogStandardOutput = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.logFilePath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IMConfig {
    return {
      appFramework: isSet(object.appFramework) ? appFrameworkFromJSON(object.appFramework) : 0,
      platform: isSet(object.platform) ? platformFromJSON(object.platform) : 0,
      apiAddr: isSet(object.apiAddr) ? globalThis.String(object.apiAddr) : "",
      wsAddr: isSet(object.wsAddr) ? globalThis.String(object.wsAddr) : "",
      dataDir: isSet(object.dataDir) ? globalThis.String(object.dataDir) : "",
      logLevel: isSet(object.logLevel) ? globalThis.Number(object.logLevel) : 0,
      isLogStandardOutput: isSet(object.isLogStandardOutput) ? globalThis.Boolean(object.isLogStandardOutput) : false,
      logFilePath: isSet(object.logFilePath) ? globalThis.String(object.logFilePath) : "",
    };
  },

  toJSON(message: IMConfig): unknown {
    const obj: any = {};
    if (message.appFramework !== 0) {
      obj.appFramework = appFrameworkToJSON(message.appFramework);
    }
    if (message.platform !== 0) {
      obj.platform = platformToJSON(message.platform);
    }
    if (message.apiAddr !== "") {
      obj.apiAddr = message.apiAddr;
    }
    if (message.wsAddr !== "") {
      obj.wsAddr = message.wsAddr;
    }
    if (message.dataDir !== "") {
      obj.dataDir = message.dataDir;
    }
    if (message.logLevel !== 0) {
      obj.logLevel = Math.round(message.logLevel);
    }
    if (message.isLogStandardOutput !== false) {
      obj.isLogStandardOutput = message.isLogStandardOutput;
    }
    if (message.logFilePath !== "") {
      obj.logFilePath = message.logFilePath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IMConfig>, I>>(base?: I): IMConfig {
    return IMConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IMConfig>, I>>(object: I): IMConfig {
    const message = createBaseIMConfig();
    message.appFramework = object.appFramework ?? 0;
    message.platform = object.platform ?? 0;
    message.apiAddr = object.apiAddr ?? "";
    message.wsAddr = object.wsAddr ?? "";
    message.dataDir = object.dataDir ?? "";
    message.logLevel = object.logLevel ?? 0;
    message.isLogStandardOutput = object.isLogStandardOutput ?? false;
    message.logFilePath = object.logFilePath ?? "";
    return message;
  },
};

function createBaseInitSDKReq(): InitSDKReq {
  return { config: undefined };
}

export const InitSDKReq: MessageFns<InitSDKReq> = {
  encode(message: InitSDKReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      IMConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitSDKReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitSDKReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = IMConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitSDKReq {
    return { config: isSet(object.config) ? IMConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: InitSDKReq): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = IMConfig.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitSDKReq>, I>>(base?: I): InitSDKReq {
    return InitSDKReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitSDKReq>, I>>(object: I): InitSDKReq {
    const message = createBaseInitSDKReq();
    message.config = (object.config !== undefined && object.config !== null)
      ? IMConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseInitSDKResp(): InitSDKResp {
  return { suc: false };
}

export const InitSDKResp: MessageFns<InitSDKResp> = {
  encode(message: InitSDKResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.suc !== false) {
      writer.uint32(8).bool(message.suc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitSDKResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitSDKResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.suc = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitSDKResp {
    return { suc: isSet(object.suc) ? globalThis.Boolean(object.suc) : false };
  },

  toJSON(message: InitSDKResp): unknown {
    const obj: any = {};
    if (message.suc !== false) {
      obj.suc = message.suc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitSDKResp>, I>>(base?: I): InitSDKResp {
    return InitSDKResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitSDKResp>, I>>(object: I): InitSDKResp {
    const message = createBaseInitSDKResp();
    message.suc = object.suc ?? false;
    return message;
  },
};

function createBaseLoginReq(): LoginReq {
  return { userID: "", token: "" };
}

export const LoginReq: MessageFns<LoginReq> = {
  encode(message: LoginReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: LoginReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginReq>, I>>(base?: I): LoginReq {
    return LoginReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginReq>, I>>(object: I): LoginReq {
    const message = createBaseLoginReq();
    message.userID = object.userID ?? "";
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseLoginResp(): LoginResp {
  return {};
}

export const LoginResp: MessageFns<LoginResp> = {
  encode(_: LoginResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LoginResp {
    return {};
  },

  toJSON(_: LoginResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginResp>, I>>(base?: I): LoginResp {
    return LoginResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginResp>, I>>(_: I): LoginResp {
    const message = createBaseLoginResp();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
