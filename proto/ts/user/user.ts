// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.1
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CommandInfo, UserInfo } from "./shared";

export const protobufPackage = "openim.sdk.user";

export interface GetSelfUserInfoReq {
}

export interface GetSelfUserInfoResp {
  user: UserInfo | undefined;
}

export interface SetSelfInfoReq {
  userID: string;
  nickname?: string | undefined;
  faceURL?: string | undefined;
  ex?: string | undefined;
  globalRecvMsgOpt?: number | undefined;
}

export interface SetSelfInfoResp {
}

export interface ProcessUserCommandAddReq {
  userID: string;
  type: number;
  uuid: string;
  value?: string | undefined;
  ex?: string | undefined;
}

export interface ProcessUserCommandAddResp {
}

export interface ProcessUserCommandDeleteReq {
  userID: string;
  type: number;
  uuid: string;
}

export interface ProcessUserCommandDeleteResp {
}

export interface ProcessUserCommandUpdateReq {
  userID: string;
  type: number;
  uuid: string;
  value?: string | undefined;
  ex?: string | undefined;
}

export interface ProcessUserCommandUpdateResp {
}

export interface ProcessUserCommandGetAllReq {
}

export interface ProcessUserCommandGetAllResp {
  commands: CommandInfo[];
}

export interface GetUsersInfoReq {
  userIDs: string[];
}

export interface GetUsersInfoResp {
  users: UserInfo[];
}

export interface GetUsersInfoFromServerReq {
  userIDs: string[];
}

export interface GetUsersInfoFromServerResp {
  users: UserInfo[];
}

function createBaseGetSelfUserInfoReq(): GetSelfUserInfoReq {
  return {};
}

export const GetSelfUserInfoReq: MessageFns<GetSelfUserInfoReq> = {
  encode(_: GetSelfUserInfoReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSelfUserInfoReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSelfUserInfoReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSelfUserInfoReq {
    return {};
  },

  toJSON(_: GetSelfUserInfoReq): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSelfUserInfoReq>, I>>(base?: I): GetSelfUserInfoReq {
    return GetSelfUserInfoReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSelfUserInfoReq>, I>>(_: I): GetSelfUserInfoReq {
    const message = createBaseGetSelfUserInfoReq();
    return message;
  },
};

function createBaseGetSelfUserInfoResp(): GetSelfUserInfoResp {
  return { user: undefined };
}

export const GetSelfUserInfoResp: MessageFns<GetSelfUserInfoResp> = {
  encode(message: GetSelfUserInfoResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserInfo.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSelfUserInfoResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSelfUserInfoResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSelfUserInfoResp {
    return { user: isSet(object.user) ? UserInfo.fromJSON(object.user) : undefined };
  },

  toJSON(message: GetSelfUserInfoResp): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = UserInfo.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSelfUserInfoResp>, I>>(base?: I): GetSelfUserInfoResp {
    return GetSelfUserInfoResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSelfUserInfoResp>, I>>(object: I): GetSelfUserInfoResp {
    const message = createBaseGetSelfUserInfoResp();
    message.user = (object.user !== undefined && object.user !== null) ? UserInfo.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseSetSelfInfoReq(): SetSelfInfoReq {
  return { userID: "", nickname: undefined, faceURL: undefined, ex: undefined, globalRecvMsgOpt: undefined };
}

export const SetSelfInfoReq: MessageFns<SetSelfInfoReq> = {
  encode(message: SetSelfInfoReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.nickname !== undefined) {
      writer.uint32(18).string(message.nickname);
    }
    if (message.faceURL !== undefined) {
      writer.uint32(26).string(message.faceURL);
    }
    if (message.ex !== undefined) {
      writer.uint32(34).string(message.ex);
    }
    if (message.globalRecvMsgOpt !== undefined) {
      writer.uint32(56).int32(message.globalRecvMsgOpt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSelfInfoReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSelfInfoReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.faceURL = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ex = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.globalRecvMsgOpt = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSelfInfoReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : undefined,
      faceURL: isSet(object.faceURL) ? globalThis.String(object.faceURL) : undefined,
      ex: isSet(object.ex) ? globalThis.String(object.ex) : undefined,
      globalRecvMsgOpt: isSet(object.globalRecvMsgOpt) ? globalThis.Number(object.globalRecvMsgOpt) : undefined,
    };
  },

  toJSON(message: SetSelfInfoReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.nickname !== undefined) {
      obj.nickname = message.nickname;
    }
    if (message.faceURL !== undefined) {
      obj.faceURL = message.faceURL;
    }
    if (message.ex !== undefined) {
      obj.ex = message.ex;
    }
    if (message.globalRecvMsgOpt !== undefined) {
      obj.globalRecvMsgOpt = Math.round(message.globalRecvMsgOpt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSelfInfoReq>, I>>(base?: I): SetSelfInfoReq {
    return SetSelfInfoReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSelfInfoReq>, I>>(object: I): SetSelfInfoReq {
    const message = createBaseSetSelfInfoReq();
    message.userID = object.userID ?? "";
    message.nickname = object.nickname ?? undefined;
    message.faceURL = object.faceURL ?? undefined;
    message.ex = object.ex ?? undefined;
    message.globalRecvMsgOpt = object.globalRecvMsgOpt ?? undefined;
    return message;
  },
};

function createBaseSetSelfInfoResp(): SetSelfInfoResp {
  return {};
}

export const SetSelfInfoResp: MessageFns<SetSelfInfoResp> = {
  encode(_: SetSelfInfoResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSelfInfoResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSelfInfoResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetSelfInfoResp {
    return {};
  },

  toJSON(_: SetSelfInfoResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSelfInfoResp>, I>>(base?: I): SetSelfInfoResp {
    return SetSelfInfoResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSelfInfoResp>, I>>(_: I): SetSelfInfoResp {
    const message = createBaseSetSelfInfoResp();
    return message;
  },
};

function createBaseProcessUserCommandAddReq(): ProcessUserCommandAddReq {
  return { userID: "", type: 0, uuid: "", value: undefined, ex: undefined };
}

export const ProcessUserCommandAddReq: MessageFns<ProcessUserCommandAddReq> = {
  encode(message: ProcessUserCommandAddReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.uuid !== "") {
      writer.uint32(26).string(message.uuid);
    }
    if (message.value !== undefined) {
      writer.uint32(34).string(message.value);
    }
    if (message.ex !== undefined) {
      writer.uint32(42).string(message.ex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandAddReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandAddReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessUserCommandAddReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
      ex: isSet(object.ex) ? globalThis.String(object.ex) : undefined,
    };
  },

  toJSON(message: ProcessUserCommandAddReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.ex !== undefined) {
      obj.ex = message.ex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandAddReq>, I>>(base?: I): ProcessUserCommandAddReq {
    return ProcessUserCommandAddReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandAddReq>, I>>(object: I): ProcessUserCommandAddReq {
    const message = createBaseProcessUserCommandAddReq();
    message.userID = object.userID ?? "";
    message.type = object.type ?? 0;
    message.uuid = object.uuid ?? "";
    message.value = object.value ?? undefined;
    message.ex = object.ex ?? undefined;
    return message;
  },
};

function createBaseProcessUserCommandAddResp(): ProcessUserCommandAddResp {
  return {};
}

export const ProcessUserCommandAddResp: MessageFns<ProcessUserCommandAddResp> = {
  encode(_: ProcessUserCommandAddResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandAddResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandAddResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProcessUserCommandAddResp {
    return {};
  },

  toJSON(_: ProcessUserCommandAddResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandAddResp>, I>>(base?: I): ProcessUserCommandAddResp {
    return ProcessUserCommandAddResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandAddResp>, I>>(_: I): ProcessUserCommandAddResp {
    const message = createBaseProcessUserCommandAddResp();
    return message;
  },
};

function createBaseProcessUserCommandDeleteReq(): ProcessUserCommandDeleteReq {
  return { userID: "", type: 0, uuid: "" };
}

export const ProcessUserCommandDeleteReq: MessageFns<ProcessUserCommandDeleteReq> = {
  encode(message: ProcessUserCommandDeleteReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.uuid !== "") {
      writer.uint32(26).string(message.uuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandDeleteReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandDeleteReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessUserCommandDeleteReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
    };
  },

  toJSON(message: ProcessUserCommandDeleteReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandDeleteReq>, I>>(base?: I): ProcessUserCommandDeleteReq {
    return ProcessUserCommandDeleteReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandDeleteReq>, I>>(object: I): ProcessUserCommandDeleteReq {
    const message = createBaseProcessUserCommandDeleteReq();
    message.userID = object.userID ?? "";
    message.type = object.type ?? 0;
    message.uuid = object.uuid ?? "";
    return message;
  },
};

function createBaseProcessUserCommandDeleteResp(): ProcessUserCommandDeleteResp {
  return {};
}

export const ProcessUserCommandDeleteResp: MessageFns<ProcessUserCommandDeleteResp> = {
  encode(_: ProcessUserCommandDeleteResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandDeleteResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandDeleteResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProcessUserCommandDeleteResp {
    return {};
  },

  toJSON(_: ProcessUserCommandDeleteResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandDeleteResp>, I>>(base?: I): ProcessUserCommandDeleteResp {
    return ProcessUserCommandDeleteResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandDeleteResp>, I>>(_: I): ProcessUserCommandDeleteResp {
    const message = createBaseProcessUserCommandDeleteResp();
    return message;
  },
};

function createBaseProcessUserCommandUpdateReq(): ProcessUserCommandUpdateReq {
  return { userID: "", type: 0, uuid: "", value: undefined, ex: undefined };
}

export const ProcessUserCommandUpdateReq: MessageFns<ProcessUserCommandUpdateReq> = {
  encode(message: ProcessUserCommandUpdateReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.uuid !== "") {
      writer.uint32(26).string(message.uuid);
    }
    if (message.value !== undefined) {
      writer.uint32(34).string(message.value);
    }
    if (message.ex !== undefined) {
      writer.uint32(42).string(message.ex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandUpdateReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandUpdateReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessUserCommandUpdateReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
      ex: isSet(object.ex) ? globalThis.String(object.ex) : undefined,
    };
  },

  toJSON(message: ProcessUserCommandUpdateReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.ex !== undefined) {
      obj.ex = message.ex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandUpdateReq>, I>>(base?: I): ProcessUserCommandUpdateReq {
    return ProcessUserCommandUpdateReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandUpdateReq>, I>>(object: I): ProcessUserCommandUpdateReq {
    const message = createBaseProcessUserCommandUpdateReq();
    message.userID = object.userID ?? "";
    message.type = object.type ?? 0;
    message.uuid = object.uuid ?? "";
    message.value = object.value ?? undefined;
    message.ex = object.ex ?? undefined;
    return message;
  },
};

function createBaseProcessUserCommandUpdateResp(): ProcessUserCommandUpdateResp {
  return {};
}

export const ProcessUserCommandUpdateResp: MessageFns<ProcessUserCommandUpdateResp> = {
  encode(_: ProcessUserCommandUpdateResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandUpdateResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandUpdateResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProcessUserCommandUpdateResp {
    return {};
  },

  toJSON(_: ProcessUserCommandUpdateResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandUpdateResp>, I>>(base?: I): ProcessUserCommandUpdateResp {
    return ProcessUserCommandUpdateResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandUpdateResp>, I>>(_: I): ProcessUserCommandUpdateResp {
    const message = createBaseProcessUserCommandUpdateResp();
    return message;
  },
};

function createBaseProcessUserCommandGetAllReq(): ProcessUserCommandGetAllReq {
  return {};
}

export const ProcessUserCommandGetAllReq: MessageFns<ProcessUserCommandGetAllReq> = {
  encode(_: ProcessUserCommandGetAllReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandGetAllReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandGetAllReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ProcessUserCommandGetAllReq {
    return {};
  },

  toJSON(_: ProcessUserCommandGetAllReq): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandGetAllReq>, I>>(base?: I): ProcessUserCommandGetAllReq {
    return ProcessUserCommandGetAllReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandGetAllReq>, I>>(_: I): ProcessUserCommandGetAllReq {
    const message = createBaseProcessUserCommandGetAllReq();
    return message;
  },
};

function createBaseProcessUserCommandGetAllResp(): ProcessUserCommandGetAllResp {
  return { commands: [] };
}

export const ProcessUserCommandGetAllResp: MessageFns<ProcessUserCommandGetAllResp> = {
  encode(message: ProcessUserCommandGetAllResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.commands) {
      CommandInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessUserCommandGetAllResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessUserCommandGetAllResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commands.push(CommandInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessUserCommandGetAllResp {
    return {
      commands: globalThis.Array.isArray(object?.commands)
        ? object.commands.map((e: any) => CommandInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ProcessUserCommandGetAllResp): unknown {
    const obj: any = {};
    if (message.commands?.length) {
      obj.commands = message.commands.map((e) => CommandInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessUserCommandGetAllResp>, I>>(base?: I): ProcessUserCommandGetAllResp {
    return ProcessUserCommandGetAllResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessUserCommandGetAllResp>, I>>(object: I): ProcessUserCommandGetAllResp {
    const message = createBaseProcessUserCommandGetAllResp();
    message.commands = object.commands?.map((e) => CommandInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUsersInfoReq(): GetUsersInfoReq {
  return { userIDs: [] };
}

export const GetUsersInfoReq: MessageFns<GetUsersInfoReq> = {
  encode(message: GetUsersInfoReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userIDs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersInfoReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersInfoReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userIDs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersInfoReq {
    return {
      userIDs: globalThis.Array.isArray(object?.userIDs) ? object.userIDs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetUsersInfoReq): unknown {
    const obj: any = {};
    if (message.userIDs?.length) {
      obj.userIDs = message.userIDs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersInfoReq>, I>>(base?: I): GetUsersInfoReq {
    return GetUsersInfoReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersInfoReq>, I>>(object: I): GetUsersInfoReq {
    const message = createBaseGetUsersInfoReq();
    message.userIDs = object.userIDs?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetUsersInfoResp(): GetUsersInfoResp {
  return { users: [] };
}

export const GetUsersInfoResp: MessageFns<GetUsersInfoResp> = {
  encode(message: GetUsersInfoResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      UserInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersInfoResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersInfoResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(UserInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersInfoResp {
    return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserInfo.fromJSON(e)) : [] };
  },

  toJSON(message: GetUsersInfoResp): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersInfoResp>, I>>(base?: I): GetUsersInfoResp {
    return GetUsersInfoResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersInfoResp>, I>>(object: I): GetUsersInfoResp {
    const message = createBaseGetUsersInfoResp();
    message.users = object.users?.map((e) => UserInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUsersInfoFromServerReq(): GetUsersInfoFromServerReq {
  return { userIDs: [] };
}

export const GetUsersInfoFromServerReq: MessageFns<GetUsersInfoFromServerReq> = {
  encode(message: GetUsersInfoFromServerReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userIDs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersInfoFromServerReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersInfoFromServerReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userIDs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersInfoFromServerReq {
    return {
      userIDs: globalThis.Array.isArray(object?.userIDs) ? object.userIDs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetUsersInfoFromServerReq): unknown {
    const obj: any = {};
    if (message.userIDs?.length) {
      obj.userIDs = message.userIDs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersInfoFromServerReq>, I>>(base?: I): GetUsersInfoFromServerReq {
    return GetUsersInfoFromServerReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersInfoFromServerReq>, I>>(object: I): GetUsersInfoFromServerReq {
    const message = createBaseGetUsersInfoFromServerReq();
    message.userIDs = object.userIDs?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetUsersInfoFromServerResp(): GetUsersInfoFromServerResp {
  return { users: [] };
}

export const GetUsersInfoFromServerResp: MessageFns<GetUsersInfoFromServerResp> = {
  encode(message: GetUsersInfoFromServerResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      UserInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersInfoFromServerResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersInfoFromServerResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(UserInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersInfoFromServerResp {
    return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserInfo.fromJSON(e)) : [] };
  },

  toJSON(message: GetUsersInfoFromServerResp): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersInfoFromServerResp>, I>>(base?: I): GetUsersInfoFromServerResp {
    return GetUsersInfoFromServerResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersInfoFromServerResp>, I>>(object: I): GetUsersInfoFromServerResp {
    const message = createBaseGetUsersInfoFromServerResp();
    message.users = object.users?.map((e) => UserInfo.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
