// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.1
// source: ffi.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FuncRequestEventName, funcRequestEventNameFromJSON, funcRequestEventNameToJSON } from "./event";

export const protobufPackage = "openim.ffi";

export interface FfiRequest {
  funcName: FuncRequestEventName;
  data: Uint8Array;
}

export interface FfiResult {
  errCode: number;
  errMsg: string;
  funcName: FuncRequestEventName;
  data: Uint8Array;
  handleID: number;
}

function createBaseFfiRequest(): FfiRequest {
  return { funcName: 0, data: new Uint8Array(0) };
}

export const FfiRequest: MessageFns<FfiRequest> = {
  encode(message: FfiRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.funcName !== 0) {
      writer.uint32(8).int32(message.funcName);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FfiRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFfiRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.funcName = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FfiRequest {
    return {
      funcName: isSet(object.funcName) ? funcRequestEventNameFromJSON(object.funcName) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: FfiRequest): unknown {
    const obj: any = {};
    if (message.funcName !== 0) {
      obj.funcName = funcRequestEventNameToJSON(message.funcName);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FfiRequest>, I>>(base?: I): FfiRequest {
    return FfiRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FfiRequest>, I>>(object: I): FfiRequest {
    const message = createBaseFfiRequest();
    message.funcName = object.funcName ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFfiResult(): FfiResult {
  return { errCode: 0, errMsg: "", funcName: 0, data: new Uint8Array(0), handleID: 0 };
}

export const FfiResult: MessageFns<FfiResult> = {
  encode(message: FfiResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.errCode !== 0) {
      writer.uint32(8).int32(message.errCode);
    }
    if (message.errMsg !== "") {
      writer.uint32(18).string(message.errMsg);
    }
    if (message.funcName !== 0) {
      writer.uint32(24).int32(message.funcName);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    if (message.handleID !== 0) {
      writer.uint32(40).uint64(message.handleID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FfiResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFfiResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.errCode = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errMsg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.funcName = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.handleID = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FfiResult {
    return {
      errCode: isSet(object.errCode) ? globalThis.Number(object.errCode) : 0,
      errMsg: isSet(object.errMsg) ? globalThis.String(object.errMsg) : "",
      funcName: isSet(object.funcName) ? funcRequestEventNameFromJSON(object.funcName) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      handleID: isSet(object.handleID) ? globalThis.Number(object.handleID) : 0,
    };
  },

  toJSON(message: FfiResult): unknown {
    const obj: any = {};
    if (message.errCode !== 0) {
      obj.errCode = Math.round(message.errCode);
    }
    if (message.errMsg !== "") {
      obj.errMsg = message.errMsg;
    }
    if (message.funcName !== 0) {
      obj.funcName = funcRequestEventNameToJSON(message.funcName);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.handleID !== 0) {
      obj.handleID = Math.round(message.handleID);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FfiResult>, I>>(base?: I): FfiResult {
    return FfiResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FfiResult>, I>>(object: I): FfiResult {
    const message = createBaseFfiResult();
    message.errCode = object.errCode ?? 0;
    message.errMsg = object.errMsg ?? "";
    message.funcName = object.funcName ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    message.handleID = object.handleID ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
