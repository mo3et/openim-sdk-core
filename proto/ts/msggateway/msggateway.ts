// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.1
// source: msggateway.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "openim.ffi";

export interface OnlinePushMsgReq {
  pushToUserID: string;
}

export interface OnlinePushMsgResp {
  resp: SingleMsgToUserPlatform[];
}

export interface SingleMsgToUserResults {
  userID: string;
  resp: SingleMsgToUserPlatform[];
  onlinePush: boolean;
}

export interface OnlineBatchPushOneMsgReq {
  pushToUserIDs: string[];
}

export interface OnlineBatchPushOneMsgResp {
  singlePushResult: SingleMsgToUserResults[];
}

export interface SingleMsgToUserPlatform {
  ResultCode: number;
  RecvID: string;
  RecvPlatFormID: number;
}

export interface GetUsersOnlineStatusReq {
  userIDs: string[];
}

export interface GetUsersOnlineStatusResp {
  successResult: GetUsersOnlineStatusResp_SuccessResult[];
  failedResult: GetUsersOnlineStatusResp_FailedDetail[];
}

export interface GetUsersOnlineStatusResp_SuccessDetail {
  platformID: number;
  connID: string;
  isBackground: boolean;
  token: string;
}

export interface GetUsersOnlineStatusResp_FailedDetail {
  userID: string;
}

export interface GetUsersOnlineStatusResp_SuccessResult {
  userID: string;
  status: number;
  detailPlatformStatus: GetUsersOnlineStatusResp_SuccessDetail[];
}

export interface SingleDetail {
  userID: string;
  status: number;
  singlePlatformToken: SinglePlatformToken[];
}

export interface SinglePlatformToken {
  platformID: number;
  total: number;
  token: string[];
}

export interface KickUserOfflineReq {
  platformID: number;
  kickUserIDList: string[];
}

export interface KickUserOfflineResp {
}

export interface MultiTerminalLoginCheckReq {
  userID: string;
  platformID: number;
  token: string;
}

export interface MultiTerminalLoginCheckResp {
}

function createBaseOnlinePushMsgReq(): OnlinePushMsgReq {
  return { pushToUserID: "" };
}

export const OnlinePushMsgReq: MessageFns<OnlinePushMsgReq> = {
  encode(message: OnlinePushMsgReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pushToUserID !== "") {
      writer.uint32(18).string(message.pushToUserID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlinePushMsgReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlinePushMsgReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pushToUserID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlinePushMsgReq {
    return { pushToUserID: isSet(object.pushToUserID) ? globalThis.String(object.pushToUserID) : "" };
  },

  toJSON(message: OnlinePushMsgReq): unknown {
    const obj: any = {};
    if (message.pushToUserID !== "") {
      obj.pushToUserID = message.pushToUserID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnlinePushMsgReq>, I>>(base?: I): OnlinePushMsgReq {
    return OnlinePushMsgReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnlinePushMsgReq>, I>>(object: I): OnlinePushMsgReq {
    const message = createBaseOnlinePushMsgReq();
    message.pushToUserID = object.pushToUserID ?? "";
    return message;
  },
};

function createBaseOnlinePushMsgResp(): OnlinePushMsgResp {
  return { resp: [] };
}

export const OnlinePushMsgResp: MessageFns<OnlinePushMsgResp> = {
  encode(message: OnlinePushMsgResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.resp) {
      SingleMsgToUserPlatform.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlinePushMsgResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlinePushMsgResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resp.push(SingleMsgToUserPlatform.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlinePushMsgResp {
    return {
      resp: globalThis.Array.isArray(object?.resp)
        ? object.resp.map((e: any) => SingleMsgToUserPlatform.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OnlinePushMsgResp): unknown {
    const obj: any = {};
    if (message.resp?.length) {
      obj.resp = message.resp.map((e) => SingleMsgToUserPlatform.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnlinePushMsgResp>, I>>(base?: I): OnlinePushMsgResp {
    return OnlinePushMsgResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnlinePushMsgResp>, I>>(object: I): OnlinePushMsgResp {
    const message = createBaseOnlinePushMsgResp();
    message.resp = object.resp?.map((e) => SingleMsgToUserPlatform.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSingleMsgToUserResults(): SingleMsgToUserResults {
  return { userID: "", resp: [], onlinePush: false };
}

export const SingleMsgToUserResults: MessageFns<SingleMsgToUserResults> = {
  encode(message: SingleMsgToUserResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    for (const v of message.resp) {
      SingleMsgToUserPlatform.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.onlinePush !== false) {
      writer.uint32(24).bool(message.onlinePush);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleMsgToUserResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleMsgToUserResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resp.push(SingleMsgToUserPlatform.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.onlinePush = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleMsgToUserResults {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      resp: globalThis.Array.isArray(object?.resp)
        ? object.resp.map((e: any) => SingleMsgToUserPlatform.fromJSON(e))
        : [],
      onlinePush: isSet(object.onlinePush) ? globalThis.Boolean(object.onlinePush) : false,
    };
  },

  toJSON(message: SingleMsgToUserResults): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.resp?.length) {
      obj.resp = message.resp.map((e) => SingleMsgToUserPlatform.toJSON(e));
    }
    if (message.onlinePush !== false) {
      obj.onlinePush = message.onlinePush;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SingleMsgToUserResults>, I>>(base?: I): SingleMsgToUserResults {
    return SingleMsgToUserResults.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SingleMsgToUserResults>, I>>(object: I): SingleMsgToUserResults {
    const message = createBaseSingleMsgToUserResults();
    message.userID = object.userID ?? "";
    message.resp = object.resp?.map((e) => SingleMsgToUserPlatform.fromPartial(e)) || [];
    message.onlinePush = object.onlinePush ?? false;
    return message;
  },
};

function createBaseOnlineBatchPushOneMsgReq(): OnlineBatchPushOneMsgReq {
  return { pushToUserIDs: [] };
}

export const OnlineBatchPushOneMsgReq: MessageFns<OnlineBatchPushOneMsgReq> = {
  encode(message: OnlineBatchPushOneMsgReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pushToUserIDs) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineBatchPushOneMsgReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineBatchPushOneMsgReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pushToUserIDs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineBatchPushOneMsgReq {
    return {
      pushToUserIDs: globalThis.Array.isArray(object?.pushToUserIDs)
        ? object.pushToUserIDs.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: OnlineBatchPushOneMsgReq): unknown {
    const obj: any = {};
    if (message.pushToUserIDs?.length) {
      obj.pushToUserIDs = message.pushToUserIDs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnlineBatchPushOneMsgReq>, I>>(base?: I): OnlineBatchPushOneMsgReq {
    return OnlineBatchPushOneMsgReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnlineBatchPushOneMsgReq>, I>>(object: I): OnlineBatchPushOneMsgReq {
    const message = createBaseOnlineBatchPushOneMsgReq();
    message.pushToUserIDs = object.pushToUserIDs?.map((e) => e) || [];
    return message;
  },
};

function createBaseOnlineBatchPushOneMsgResp(): OnlineBatchPushOneMsgResp {
  return { singlePushResult: [] };
}

export const OnlineBatchPushOneMsgResp: MessageFns<OnlineBatchPushOneMsgResp> = {
  encode(message: OnlineBatchPushOneMsgResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.singlePushResult) {
      SingleMsgToUserResults.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnlineBatchPushOneMsgResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnlineBatchPushOneMsgResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.singlePushResult.push(SingleMsgToUserResults.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnlineBatchPushOneMsgResp {
    return {
      singlePushResult: globalThis.Array.isArray(object?.singlePushResult)
        ? object.singlePushResult.map((e: any) => SingleMsgToUserResults.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OnlineBatchPushOneMsgResp): unknown {
    const obj: any = {};
    if (message.singlePushResult?.length) {
      obj.singlePushResult = message.singlePushResult.map((e) => SingleMsgToUserResults.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnlineBatchPushOneMsgResp>, I>>(base?: I): OnlineBatchPushOneMsgResp {
    return OnlineBatchPushOneMsgResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnlineBatchPushOneMsgResp>, I>>(object: I): OnlineBatchPushOneMsgResp {
    const message = createBaseOnlineBatchPushOneMsgResp();
    message.singlePushResult = object.singlePushResult?.map((e) => SingleMsgToUserResults.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSingleMsgToUserPlatform(): SingleMsgToUserPlatform {
  return { ResultCode: 0, RecvID: "", RecvPlatFormID: 0 };
}

export const SingleMsgToUserPlatform: MessageFns<SingleMsgToUserPlatform> = {
  encode(message: SingleMsgToUserPlatform, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ResultCode !== 0) {
      writer.uint32(8).int64(message.ResultCode);
    }
    if (message.RecvID !== "") {
      writer.uint32(18).string(message.RecvID);
    }
    if (message.RecvPlatFormID !== 0) {
      writer.uint32(24).int32(message.RecvPlatFormID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleMsgToUserPlatform {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleMsgToUserPlatform();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ResultCode = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.RecvID = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.RecvPlatFormID = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleMsgToUserPlatform {
    return {
      ResultCode: isSet(object.ResultCode) ? globalThis.Number(object.ResultCode) : 0,
      RecvID: isSet(object.RecvID) ? globalThis.String(object.RecvID) : "",
      RecvPlatFormID: isSet(object.RecvPlatFormID) ? globalThis.Number(object.RecvPlatFormID) : 0,
    };
  },

  toJSON(message: SingleMsgToUserPlatform): unknown {
    const obj: any = {};
    if (message.ResultCode !== 0) {
      obj.ResultCode = Math.round(message.ResultCode);
    }
    if (message.RecvID !== "") {
      obj.RecvID = message.RecvID;
    }
    if (message.RecvPlatFormID !== 0) {
      obj.RecvPlatFormID = Math.round(message.RecvPlatFormID);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SingleMsgToUserPlatform>, I>>(base?: I): SingleMsgToUserPlatform {
    return SingleMsgToUserPlatform.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SingleMsgToUserPlatform>, I>>(object: I): SingleMsgToUserPlatform {
    const message = createBaseSingleMsgToUserPlatform();
    message.ResultCode = object.ResultCode ?? 0;
    message.RecvID = object.RecvID ?? "";
    message.RecvPlatFormID = object.RecvPlatFormID ?? 0;
    return message;
  },
};

function createBaseGetUsersOnlineStatusReq(): GetUsersOnlineStatusReq {
  return { userIDs: [] };
}

export const GetUsersOnlineStatusReq: MessageFns<GetUsersOnlineStatusReq> = {
  encode(message: GetUsersOnlineStatusReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userIDs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersOnlineStatusReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersOnlineStatusReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userIDs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersOnlineStatusReq {
    return {
      userIDs: globalThis.Array.isArray(object?.userIDs) ? object.userIDs.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetUsersOnlineStatusReq): unknown {
    const obj: any = {};
    if (message.userIDs?.length) {
      obj.userIDs = message.userIDs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersOnlineStatusReq>, I>>(base?: I): GetUsersOnlineStatusReq {
    return GetUsersOnlineStatusReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersOnlineStatusReq>, I>>(object: I): GetUsersOnlineStatusReq {
    const message = createBaseGetUsersOnlineStatusReq();
    message.userIDs = object.userIDs?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetUsersOnlineStatusResp(): GetUsersOnlineStatusResp {
  return { successResult: [], failedResult: [] };
}

export const GetUsersOnlineStatusResp: MessageFns<GetUsersOnlineStatusResp> = {
  encode(message: GetUsersOnlineStatusResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.successResult) {
      GetUsersOnlineStatusResp_SuccessResult.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.failedResult) {
      GetUsersOnlineStatusResp_FailedDetail.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersOnlineStatusResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersOnlineStatusResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.successResult.push(GetUsersOnlineStatusResp_SuccessResult.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.failedResult.push(GetUsersOnlineStatusResp_FailedDetail.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersOnlineStatusResp {
    return {
      successResult: globalThis.Array.isArray(object?.successResult)
        ? object.successResult.map((e: any) => GetUsersOnlineStatusResp_SuccessResult.fromJSON(e))
        : [],
      failedResult: globalThis.Array.isArray(object?.failedResult)
        ? object.failedResult.map((e: any) => GetUsersOnlineStatusResp_FailedDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUsersOnlineStatusResp): unknown {
    const obj: any = {};
    if (message.successResult?.length) {
      obj.successResult = message.successResult.map((e) => GetUsersOnlineStatusResp_SuccessResult.toJSON(e));
    }
    if (message.failedResult?.length) {
      obj.failedResult = message.failedResult.map((e) => GetUsersOnlineStatusResp_FailedDetail.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersOnlineStatusResp>, I>>(base?: I): GetUsersOnlineStatusResp {
    return GetUsersOnlineStatusResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersOnlineStatusResp>, I>>(object: I): GetUsersOnlineStatusResp {
    const message = createBaseGetUsersOnlineStatusResp();
    message.successResult = object.successResult?.map((e) => GetUsersOnlineStatusResp_SuccessResult.fromPartial(e)) ||
      [];
    message.failedResult = object.failedResult?.map((e) => GetUsersOnlineStatusResp_FailedDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUsersOnlineStatusResp_SuccessDetail(): GetUsersOnlineStatusResp_SuccessDetail {
  return { platformID: 0, connID: "", isBackground: false, token: "" };
}

export const GetUsersOnlineStatusResp_SuccessDetail: MessageFns<GetUsersOnlineStatusResp_SuccessDetail> = {
  encode(message: GetUsersOnlineStatusResp_SuccessDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformID !== 0) {
      writer.uint32(8).int32(message.platformID);
    }
    if (message.connID !== "") {
      writer.uint32(18).string(message.connID);
    }
    if (message.isBackground !== false) {
      writer.uint32(24).bool(message.isBackground);
    }
    if (message.token !== "") {
      writer.uint32(34).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersOnlineStatusResp_SuccessDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersOnlineStatusResp_SuccessDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.platformID = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.connID = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isBackground = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersOnlineStatusResp_SuccessDetail {
    return {
      platformID: isSet(object.platformID) ? globalThis.Number(object.platformID) : 0,
      connID: isSet(object.connID) ? globalThis.String(object.connID) : "",
      isBackground: isSet(object.isBackground) ? globalThis.Boolean(object.isBackground) : false,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: GetUsersOnlineStatusResp_SuccessDetail): unknown {
    const obj: any = {};
    if (message.platformID !== 0) {
      obj.platformID = Math.round(message.platformID);
    }
    if (message.connID !== "") {
      obj.connID = message.connID;
    }
    if (message.isBackground !== false) {
      obj.isBackground = message.isBackground;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersOnlineStatusResp_SuccessDetail>, I>>(
    base?: I,
  ): GetUsersOnlineStatusResp_SuccessDetail {
    return GetUsersOnlineStatusResp_SuccessDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersOnlineStatusResp_SuccessDetail>, I>>(
    object: I,
  ): GetUsersOnlineStatusResp_SuccessDetail {
    const message = createBaseGetUsersOnlineStatusResp_SuccessDetail();
    message.platformID = object.platformID ?? 0;
    message.connID = object.connID ?? "";
    message.isBackground = object.isBackground ?? false;
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseGetUsersOnlineStatusResp_FailedDetail(): GetUsersOnlineStatusResp_FailedDetail {
  return { userID: "" };
}

export const GetUsersOnlineStatusResp_FailedDetail: MessageFns<GetUsersOnlineStatusResp_FailedDetail> = {
  encode(message: GetUsersOnlineStatusResp_FailedDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersOnlineStatusResp_FailedDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersOnlineStatusResp_FailedDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersOnlineStatusResp_FailedDetail {
    return { userID: isSet(object.userID) ? globalThis.String(object.userID) : "" };
  },

  toJSON(message: GetUsersOnlineStatusResp_FailedDetail): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersOnlineStatusResp_FailedDetail>, I>>(
    base?: I,
  ): GetUsersOnlineStatusResp_FailedDetail {
    return GetUsersOnlineStatusResp_FailedDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersOnlineStatusResp_FailedDetail>, I>>(
    object: I,
  ): GetUsersOnlineStatusResp_FailedDetail {
    const message = createBaseGetUsersOnlineStatusResp_FailedDetail();
    message.userID = object.userID ?? "";
    return message;
  },
};

function createBaseGetUsersOnlineStatusResp_SuccessResult(): GetUsersOnlineStatusResp_SuccessResult {
  return { userID: "", status: 0, detailPlatformStatus: [] };
}

export const GetUsersOnlineStatusResp_SuccessResult: MessageFns<GetUsersOnlineStatusResp_SuccessResult> = {
  encode(message: GetUsersOnlineStatusResp_SuccessResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    for (const v of message.detailPlatformStatus) {
      GetUsersOnlineStatusResp_SuccessDetail.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersOnlineStatusResp_SuccessResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersOnlineStatusResp_SuccessResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.detailPlatformStatus.push(GetUsersOnlineStatusResp_SuccessDetail.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersOnlineStatusResp_SuccessResult {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      detailPlatformStatus: globalThis.Array.isArray(object?.detailPlatformStatus)
        ? object.detailPlatformStatus.map((e: any) => GetUsersOnlineStatusResp_SuccessDetail.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUsersOnlineStatusResp_SuccessResult): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.detailPlatformStatus?.length) {
      obj.detailPlatformStatus = message.detailPlatformStatus.map((e) =>
        GetUsersOnlineStatusResp_SuccessDetail.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUsersOnlineStatusResp_SuccessResult>, I>>(
    base?: I,
  ): GetUsersOnlineStatusResp_SuccessResult {
    return GetUsersOnlineStatusResp_SuccessResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUsersOnlineStatusResp_SuccessResult>, I>>(
    object: I,
  ): GetUsersOnlineStatusResp_SuccessResult {
    const message = createBaseGetUsersOnlineStatusResp_SuccessResult();
    message.userID = object.userID ?? "";
    message.status = object.status ?? 0;
    message.detailPlatformStatus =
      object.detailPlatformStatus?.map((e) => GetUsersOnlineStatusResp_SuccessDetail.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSingleDetail(): SingleDetail {
  return { userID: "", status: 0, singlePlatformToken: [] };
}

export const SingleDetail: MessageFns<SingleDetail> = {
  encode(message: SingleDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    for (const v of message.singlePlatformToken) {
      SinglePlatformToken.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SingleDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSingleDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.singlePlatformToken.push(SinglePlatformToken.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SingleDetail {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      singlePlatformToken: globalThis.Array.isArray(object?.singlePlatformToken)
        ? object.singlePlatformToken.map((e: any) => SinglePlatformToken.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SingleDetail): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.singlePlatformToken?.length) {
      obj.singlePlatformToken = message.singlePlatformToken.map((e) => SinglePlatformToken.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SingleDetail>, I>>(base?: I): SingleDetail {
    return SingleDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SingleDetail>, I>>(object: I): SingleDetail {
    const message = createBaseSingleDetail();
    message.userID = object.userID ?? "";
    message.status = object.status ?? 0;
    message.singlePlatformToken = object.singlePlatformToken?.map((e) => SinglePlatformToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSinglePlatformToken(): SinglePlatformToken {
  return { platformID: 0, total: 0, token: [] };
}

export const SinglePlatformToken: MessageFns<SinglePlatformToken> = {
  encode(message: SinglePlatformToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformID !== 0) {
      writer.uint32(8).int32(message.platformID);
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    for (const v of message.token) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SinglePlatformToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSinglePlatformToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.platformID = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SinglePlatformToken {
    return {
      platformID: isSet(object.platformID) ? globalThis.Number(object.platformID) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      token: globalThis.Array.isArray(object?.token) ? object.token.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SinglePlatformToken): unknown {
    const obj: any = {};
    if (message.platformID !== 0) {
      obj.platformID = Math.round(message.platformID);
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.token?.length) {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SinglePlatformToken>, I>>(base?: I): SinglePlatformToken {
    return SinglePlatformToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SinglePlatformToken>, I>>(object: I): SinglePlatformToken {
    const message = createBaseSinglePlatformToken();
    message.platformID = object.platformID ?? 0;
    message.total = object.total ?? 0;
    message.token = object.token?.map((e) => e) || [];
    return message;
  },
};

function createBaseKickUserOfflineReq(): KickUserOfflineReq {
  return { platformID: 0, kickUserIDList: [] };
}

export const KickUserOfflineReq: MessageFns<KickUserOfflineReq> = {
  encode(message: KickUserOfflineReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformID !== 0) {
      writer.uint32(8).int32(message.platformID);
    }
    for (const v of message.kickUserIDList) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KickUserOfflineReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKickUserOfflineReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.platformID = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.kickUserIDList.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KickUserOfflineReq {
    return {
      platformID: isSet(object.platformID) ? globalThis.Number(object.platformID) : 0,
      kickUserIDList: globalThis.Array.isArray(object?.kickUserIDList)
        ? object.kickUserIDList.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: KickUserOfflineReq): unknown {
    const obj: any = {};
    if (message.platformID !== 0) {
      obj.platformID = Math.round(message.platformID);
    }
    if (message.kickUserIDList?.length) {
      obj.kickUserIDList = message.kickUserIDList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KickUserOfflineReq>, I>>(base?: I): KickUserOfflineReq {
    return KickUserOfflineReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KickUserOfflineReq>, I>>(object: I): KickUserOfflineReq {
    const message = createBaseKickUserOfflineReq();
    message.platformID = object.platformID ?? 0;
    message.kickUserIDList = object.kickUserIDList?.map((e) => e) || [];
    return message;
  },
};

function createBaseKickUserOfflineResp(): KickUserOfflineResp {
  return {};
}

export const KickUserOfflineResp: MessageFns<KickUserOfflineResp> = {
  encode(_: KickUserOfflineResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KickUserOfflineResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKickUserOfflineResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): KickUserOfflineResp {
    return {};
  },

  toJSON(_: KickUserOfflineResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<KickUserOfflineResp>, I>>(base?: I): KickUserOfflineResp {
    return KickUserOfflineResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KickUserOfflineResp>, I>>(_: I): KickUserOfflineResp {
    const message = createBaseKickUserOfflineResp();
    return message;
  },
};

function createBaseMultiTerminalLoginCheckReq(): MultiTerminalLoginCheckReq {
  return { userID: "", platformID: 0, token: "" };
}

export const MultiTerminalLoginCheckReq: MessageFns<MultiTerminalLoginCheckReq> = {
  encode(message: MultiTerminalLoginCheckReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.platformID !== 0) {
      writer.uint32(16).int32(message.platformID);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiTerminalLoginCheckReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiTerminalLoginCheckReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.platformID = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiTerminalLoginCheckReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      platformID: isSet(object.platformID) ? globalThis.Number(object.platformID) : 0,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: MultiTerminalLoginCheckReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.platformID !== 0) {
      obj.platformID = Math.round(message.platformID);
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiTerminalLoginCheckReq>, I>>(base?: I): MultiTerminalLoginCheckReq {
    return MultiTerminalLoginCheckReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiTerminalLoginCheckReq>, I>>(object: I): MultiTerminalLoginCheckReq {
    const message = createBaseMultiTerminalLoginCheckReq();
    message.userID = object.userID ?? "";
    message.platformID = object.platformID ?? 0;
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseMultiTerminalLoginCheckResp(): MultiTerminalLoginCheckResp {
  return {};
}

export const MultiTerminalLoginCheckResp: MessageFns<MultiTerminalLoginCheckResp> = {
  encode(_: MultiTerminalLoginCheckResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiTerminalLoginCheckResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiTerminalLoginCheckResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MultiTerminalLoginCheckResp {
    return {};
  },

  toJSON(_: MultiTerminalLoginCheckResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MultiTerminalLoginCheckResp>, I>>(base?: I): MultiTerminalLoginCheckResp {
    return MultiTerminalLoginCheckResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MultiTerminalLoginCheckResp>, I>>(_: I): MultiTerminalLoginCheckResp {
    const message = createBaseMultiTerminalLoginCheckResp();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
