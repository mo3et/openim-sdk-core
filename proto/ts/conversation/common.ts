// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.1
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "openim.sdk.common";

export enum SessionType {
  SessionType_ = 0,
  /** SingleChatType - SingleChatType represents a single chat session type. */
  SingleChatType = 1,
  /** WriteGroupChatType - WriteGroupChatType represents a write-diffusion group chat session type (not currently enabled, can be ignored). */
  WriteGroupChatType = 2,
  /** ReadGroupChatType - ReadGroupChatType represents a read-diffusion group chat session type, used for all current group chats in OpenIM. */
  ReadGroupChatType = 3,
  /** NotificationChatType - NotificationChatType represents a notification session type, generated by the client when the server sends a notification. */
  NotificationChatType = 4,
  UNRECOGNIZED = -1,
}

export function sessionTypeFromJSON(object: any): SessionType {
  switch (object) {
    case 0:
    case "SessionType_":
      return SessionType.SessionType_;
    case 1:
    case "SingleChatType":
      return SessionType.SingleChatType;
    case 2:
    case "WriteGroupChatType":
      return SessionType.WriteGroupChatType;
    case 3:
    case "ReadGroupChatType":
      return SessionType.ReadGroupChatType;
    case 4:
    case "NotificationChatType":
      return SessionType.NotificationChatType;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SessionType.UNRECOGNIZED;
  }
}

export function sessionTypeToJSON(object: SessionType): string {
  switch (object) {
    case SessionType.SessionType_:
      return "SessionType_";
    case SessionType.SingleChatType:
      return "SingleChatType";
    case SessionType.WriteGroupChatType:
      return "WriteGroupChatType";
    case SessionType.ReadGroupChatType:
      return "ReadGroupChatType";
    case SessionType.NotificationChatType:
      return "NotificationChatType";
    case SessionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MsgFrom {
  MsgFrom_ = 0,
  /** UserMsgType - UserMsgType represents a message type originating from a user. */
  UserMsgType = 100,
  /** SysMsgType - SysMsgType represents a system message type, typically generated by the system. */
  SysMsgType = 200,
  UNRECOGNIZED = -1,
}

export function msgFromFromJSON(object: any): MsgFrom {
  switch (object) {
    case 0:
    case "MsgFrom_":
      return MsgFrom.MsgFrom_;
    case 100:
    case "UserMsgType":
      return MsgFrom.UserMsgType;
    case 200:
    case "SysMsgType":
      return MsgFrom.SysMsgType;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MsgFrom.UNRECOGNIZED;
  }
}

export function msgFromToJSON(object: MsgFrom): string {
  switch (object) {
    case MsgFrom.MsgFrom_:
      return "MsgFrom_";
    case MsgFrom.UserMsgType:
      return "UserMsgType";
    case MsgFrom.SysMsgType:
      return "SysMsgType";
    case MsgFrom.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Platform {
  Platform_ = 0,
  /** iOS - iOS represents the Apple iOS platform. */
  iOS = 1,
  /** Android - Android represents the Android platform. */
  Android = 2,
  /** Windows - Windows represents the Microsoft Windows platform. */
  Windows = 3,
  /** macOS - macOS represents the Apple macOS platform. */
  macOS = 4,
  /** Web - Web represents the web browser platform. */
  Web = 5,
  /** MiniWeb - MiniWeb represents the mini-program or mini-web platform. */
  MiniWeb = 6,
  /** Linux - Linux represents the Linux platform. */
  Linux = 7,
  /** AndroidPad - AndroidPad represents the Android tablet platform. */
  AndroidPad = 8,
  /** iPad - iPad represents the Apple iPad platform. */
  iPad = 9,
  /**
   * Admin - Admin represents the admin panel or management platform, typically used for backend administrators.
   * This platform is specifically for administrative filling and can generally be ignored.
   */
  Admin = 10,
  /** HarmonyOS - HarmonyOS represents the Huawei HarmonyOS platform. */
  HarmonyOS = 11,
  UNRECOGNIZED = -1,
}

export function platformFromJSON(object: any): Platform {
  switch (object) {
    case 0:
    case "Platform_":
      return Platform.Platform_;
    case 1:
    case "iOS":
      return Platform.iOS;
    case 2:
    case "Android":
      return Platform.Android;
    case 3:
    case "Windows":
      return Platform.Windows;
    case 4:
    case "macOS":
      return Platform.macOS;
    case 5:
    case "Web":
      return Platform.Web;
    case 6:
    case "MiniWeb":
      return Platform.MiniWeb;
    case 7:
    case "Linux":
      return Platform.Linux;
    case 8:
    case "AndroidPad":
      return Platform.AndroidPad;
    case 9:
    case "iPad":
      return Platform.iPad;
    case 10:
    case "Admin":
      return Platform.Admin;
    case 11:
    case "HarmonyOS":
      return Platform.HarmonyOS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Platform.UNRECOGNIZED;
  }
}

export function platformToJSON(object: Platform): string {
  switch (object) {
    case Platform.Platform_:
      return "Platform_";
    case Platform.iOS:
      return "iOS";
    case Platform.Android:
      return "Android";
    case Platform.Windows:
      return "Windows";
    case Platform.macOS:
      return "macOS";
    case Platform.Web:
      return "Web";
    case Platform.MiniWeb:
      return "MiniWeb";
    case Platform.Linux:
      return "Linux";
    case Platform.AndroidPad:
      return "AndroidPad";
    case Platform.iPad:
      return "iPad";
    case Platform.Admin:
      return "Admin";
    case Platform.HarmonyOS:
      return "HarmonyOS";
    case Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AppFramework {
  AppFramework_ = 0,
  Native = 1,
  Flutter = 2,
  ReactNative = 3,
  Electron = 4,
  Unity = 5,
  UnrealEngine = 6,
  Qt = 7,
  DotNet = 8,
  DotNetMAUI = 9,
  Avalonia = 10,
  Cordova = 11,
  UniApp = 12,
  UNRECOGNIZED = -1,
}

export function appFrameworkFromJSON(object: any): AppFramework {
  switch (object) {
    case 0:
    case "AppFramework_":
      return AppFramework.AppFramework_;
    case 1:
    case "Native":
      return AppFramework.Native;
    case 2:
    case "Flutter":
      return AppFramework.Flutter;
    case 3:
    case "ReactNative":
      return AppFramework.ReactNative;
    case 4:
    case "Electron":
      return AppFramework.Electron;
    case 5:
    case "Unity":
      return AppFramework.Unity;
    case 6:
    case "UnrealEngine":
      return AppFramework.UnrealEngine;
    case 7:
    case "Qt":
      return AppFramework.Qt;
    case 8:
    case "DotNet":
      return AppFramework.DotNet;
    case 9:
    case "DotNetMAUI":
      return AppFramework.DotNetMAUI;
    case 10:
    case "Avalonia":
      return AppFramework.Avalonia;
    case 11:
    case "Cordova":
      return AppFramework.Cordova;
    case 12:
    case "UniApp":
      return AppFramework.UniApp;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AppFramework.UNRECOGNIZED;
  }
}

export function appFrameworkToJSON(object: AppFramework): string {
  switch (object) {
    case AppFramework.AppFramework_:
      return "AppFramework_";
    case AppFramework.Native:
      return "Native";
    case AppFramework.Flutter:
      return "Flutter";
    case AppFramework.ReactNative:
      return "ReactNative";
    case AppFramework.Electron:
      return "Electron";
    case AppFramework.Unity:
      return "Unity";
    case AppFramework.UnrealEngine:
      return "UnrealEngine";
    case AppFramework.Qt:
      return "Qt";
    case AppFramework.DotNet:
      return "DotNet";
    case AppFramework.DotNetMAUI:
      return "DotNetMAUI";
    case AppFramework.Avalonia:
      return "Avalonia";
    case AppFramework.Cordova:
      return "Cordova";
    case AppFramework.UniApp:
      return "UniApp";
    case AppFramework.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MsgStatus {
  MsgStatus_ = 0,
  Sending = 1,
  SendSuccess = 2,
  SendFailed = 3,
  HasDeleted = 4,
  Filtered = 5,
  UNRECOGNIZED = -1,
}

export function msgStatusFromJSON(object: any): MsgStatus {
  switch (object) {
    case 0:
    case "MsgStatus_":
      return MsgStatus.MsgStatus_;
    case 1:
    case "Sending":
      return MsgStatus.Sending;
    case 2:
    case "SendSuccess":
      return MsgStatus.SendSuccess;
    case 3:
    case "SendFailed":
      return MsgStatus.SendFailed;
    case 4:
    case "HasDeleted":
      return MsgStatus.HasDeleted;
    case 5:
    case "Filtered":
      return MsgStatus.Filtered;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MsgStatus.UNRECOGNIZED;
  }
}

export function msgStatusToJSON(object: MsgStatus): string {
  switch (object) {
    case MsgStatus.MsgStatus_:
      return "MsgStatus_";
    case MsgStatus.Sending:
      return "Sending";
    case MsgStatus.SendSuccess:
      return "SendSuccess";
    case MsgStatus.SendFailed:
      return "SendFailed";
    case MsgStatus.HasDeleted:
      return "HasDeleted";
    case MsgStatus.Filtered:
      return "Filtered";
    case MsgStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContentType {
  ContentType_ = 0,
  Text = 101,
  Picture = 102,
  Sound = 103,
  Video = 104,
  File = 105,
  AtText = 106,
  Merge = 107,
  Card = 108,
  Location = 109,
  Custom = 110,
  Typing = 113,
  Quote = 114,
  Face = 115,
  Stream = 116,
  AdvancedText = 117,
  CustomMsgNotTriggerConversation = 119,
  CustomMsgOnlineOnly = 120,
  FriendApplicationApprovedNotification = 1201,
  FriendApplicationRejectedNotification = 1202,
  FriendApplicationNotification = 1203,
  FriendAddedNotification = 1204,
  FriendDeletedNotification = 1205,
  FriendRemarkSetNotification = 1206,
  BlackAddedNotification = 1207,
  BlackDeletedNotification = 1208,
  FriendInfoUpdatedNotification = 1209,
  FriendsInfoUpdateNotification = 1210,
  /** ConversationChangeNotification - FriendNotificationEnd = 1299; */
  ConversationChangeNotification = 1300,
  /** UserInfoUpdatedNotification - UserNotificationBegin = 1301; */
  UserInfoUpdatedNotification = 1303,
  UserStatusChangeNotification = 1304,
  UserCommandAddNotification = 1305,
  UserCommandDeleteNotification = 1306,
  /** UserCommandUpdateNotification - UserNotificationEnd = 1399; */
  UserCommandUpdateNotification = 1307,
  /** GroupCreatedNotification - GroupNotificationBegin = 1500; */
  GroupCreatedNotification = 1501,
  GroupInfoSetNotification = 1502,
  JoinGroupApplicationNotification = 1503,
  MemberQuitNotification = 1504,
  GroupApplicationAcceptedNotification = 1505,
  GroupApplicationRejectedNotification = 1506,
  GroupOwnerTransferredNotification = 1507,
  MemberKickedNotification = 1508,
  MemberInvitedNotification = 1509,
  MemberEnterNotification = 1510,
  GroupDismissedNotification = 1511,
  GroupMemberMutedNotification = 1512,
  GroupMemberCancelMutedNotification = 1513,
  GroupMutedNotification = 1514,
  GroupCancelMutedNotification = 1515,
  GroupMemberInfoSetNotification = 1516,
  GroupMemberSetToAdminNotification = 1517,
  GroupMemberSetToOrdinaryUserNotification = 1518,
  GroupInfoSetAnnouncementNotification = 1519,
  /** GroupInfoSetNameNotification - GroupNotificationEnd                     = 1599; */
  GroupInfoSetNameNotification = 1520,
  ConversationPrivateChatNotification = 1701,
  ClearConversationNotification = 1703,
  BusinessNotification = 2001,
  RevokeNotification = 2101,
  DeleteMsgsNotification = 2102,
  HasReadReceipt = 2200,
  UNRECOGNIZED = -1,
}

export function contentTypeFromJSON(object: any): ContentType {
  switch (object) {
    case 0:
    case "ContentType_":
      return ContentType.ContentType_;
    case 101:
    case "Text":
      return ContentType.Text;
    case 102:
    case "Picture":
      return ContentType.Picture;
    case 103:
    case "Sound":
      return ContentType.Sound;
    case 104:
    case "Video":
      return ContentType.Video;
    case 105:
    case "File":
      return ContentType.File;
    case 106:
    case "AtText":
      return ContentType.AtText;
    case 107:
    case "Merge":
      return ContentType.Merge;
    case 108:
    case "Card":
      return ContentType.Card;
    case 109:
    case "Location":
      return ContentType.Location;
    case 110:
    case "Custom":
      return ContentType.Custom;
    case 113:
    case "Typing":
      return ContentType.Typing;
    case 114:
    case "Quote":
      return ContentType.Quote;
    case 115:
    case "Face":
      return ContentType.Face;
    case 116:
    case "Stream":
      return ContentType.Stream;
    case 117:
    case "AdvancedText":
      return ContentType.AdvancedText;
    case 119:
    case "CustomMsgNotTriggerConversation":
      return ContentType.CustomMsgNotTriggerConversation;
    case 120:
    case "CustomMsgOnlineOnly":
      return ContentType.CustomMsgOnlineOnly;
    case 1201:
    case "FriendApplicationApprovedNotification":
      return ContentType.FriendApplicationApprovedNotification;
    case 1202:
    case "FriendApplicationRejectedNotification":
      return ContentType.FriendApplicationRejectedNotification;
    case 1203:
    case "FriendApplicationNotification":
      return ContentType.FriendApplicationNotification;
    case 1204:
    case "FriendAddedNotification":
      return ContentType.FriendAddedNotification;
    case 1205:
    case "FriendDeletedNotification":
      return ContentType.FriendDeletedNotification;
    case 1206:
    case "FriendRemarkSetNotification":
      return ContentType.FriendRemarkSetNotification;
    case 1207:
    case "BlackAddedNotification":
      return ContentType.BlackAddedNotification;
    case 1208:
    case "BlackDeletedNotification":
      return ContentType.BlackDeletedNotification;
    case 1209:
    case "FriendInfoUpdatedNotification":
      return ContentType.FriendInfoUpdatedNotification;
    case 1210:
    case "FriendsInfoUpdateNotification":
      return ContentType.FriendsInfoUpdateNotification;
    case 1300:
    case "ConversationChangeNotification":
      return ContentType.ConversationChangeNotification;
    case 1303:
    case "UserInfoUpdatedNotification":
      return ContentType.UserInfoUpdatedNotification;
    case 1304:
    case "UserStatusChangeNotification":
      return ContentType.UserStatusChangeNotification;
    case 1305:
    case "UserCommandAddNotification":
      return ContentType.UserCommandAddNotification;
    case 1306:
    case "UserCommandDeleteNotification":
      return ContentType.UserCommandDeleteNotification;
    case 1307:
    case "UserCommandUpdateNotification":
      return ContentType.UserCommandUpdateNotification;
    case 1501:
    case "GroupCreatedNotification":
      return ContentType.GroupCreatedNotification;
    case 1502:
    case "GroupInfoSetNotification":
      return ContentType.GroupInfoSetNotification;
    case 1503:
    case "JoinGroupApplicationNotification":
      return ContentType.JoinGroupApplicationNotification;
    case 1504:
    case "MemberQuitNotification":
      return ContentType.MemberQuitNotification;
    case 1505:
    case "GroupApplicationAcceptedNotification":
      return ContentType.GroupApplicationAcceptedNotification;
    case 1506:
    case "GroupApplicationRejectedNotification":
      return ContentType.GroupApplicationRejectedNotification;
    case 1507:
    case "GroupOwnerTransferredNotification":
      return ContentType.GroupOwnerTransferredNotification;
    case 1508:
    case "MemberKickedNotification":
      return ContentType.MemberKickedNotification;
    case 1509:
    case "MemberInvitedNotification":
      return ContentType.MemberInvitedNotification;
    case 1510:
    case "MemberEnterNotification":
      return ContentType.MemberEnterNotification;
    case 1511:
    case "GroupDismissedNotification":
      return ContentType.GroupDismissedNotification;
    case 1512:
    case "GroupMemberMutedNotification":
      return ContentType.GroupMemberMutedNotification;
    case 1513:
    case "GroupMemberCancelMutedNotification":
      return ContentType.GroupMemberCancelMutedNotification;
    case 1514:
    case "GroupMutedNotification":
      return ContentType.GroupMutedNotification;
    case 1515:
    case "GroupCancelMutedNotification":
      return ContentType.GroupCancelMutedNotification;
    case 1516:
    case "GroupMemberInfoSetNotification":
      return ContentType.GroupMemberInfoSetNotification;
    case 1517:
    case "GroupMemberSetToAdminNotification":
      return ContentType.GroupMemberSetToAdminNotification;
    case 1518:
    case "GroupMemberSetToOrdinaryUserNotification":
      return ContentType.GroupMemberSetToOrdinaryUserNotification;
    case 1519:
    case "GroupInfoSetAnnouncementNotification":
      return ContentType.GroupInfoSetAnnouncementNotification;
    case 1520:
    case "GroupInfoSetNameNotification":
      return ContentType.GroupInfoSetNameNotification;
    case 1701:
    case "ConversationPrivateChatNotification":
      return ContentType.ConversationPrivateChatNotification;
    case 1703:
    case "ClearConversationNotification":
      return ContentType.ClearConversationNotification;
    case 2001:
    case "BusinessNotification":
      return ContentType.BusinessNotification;
    case 2101:
    case "RevokeNotification":
      return ContentType.RevokeNotification;
    case 2102:
    case "DeleteMsgsNotification":
      return ContentType.DeleteMsgsNotification;
    case 2200:
    case "HasReadReceipt":
      return ContentType.HasReadReceipt;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentType.UNRECOGNIZED;
  }
}

export function contentTypeToJSON(object: ContentType): string {
  switch (object) {
    case ContentType.ContentType_:
      return "ContentType_";
    case ContentType.Text:
      return "Text";
    case ContentType.Picture:
      return "Picture";
    case ContentType.Sound:
      return "Sound";
    case ContentType.Video:
      return "Video";
    case ContentType.File:
      return "File";
    case ContentType.AtText:
      return "AtText";
    case ContentType.Merge:
      return "Merge";
    case ContentType.Card:
      return "Card";
    case ContentType.Location:
      return "Location";
    case ContentType.Custom:
      return "Custom";
    case ContentType.Typing:
      return "Typing";
    case ContentType.Quote:
      return "Quote";
    case ContentType.Face:
      return "Face";
    case ContentType.Stream:
      return "Stream";
    case ContentType.AdvancedText:
      return "AdvancedText";
    case ContentType.CustomMsgNotTriggerConversation:
      return "CustomMsgNotTriggerConversation";
    case ContentType.CustomMsgOnlineOnly:
      return "CustomMsgOnlineOnly";
    case ContentType.FriendApplicationApprovedNotification:
      return "FriendApplicationApprovedNotification";
    case ContentType.FriendApplicationRejectedNotification:
      return "FriendApplicationRejectedNotification";
    case ContentType.FriendApplicationNotification:
      return "FriendApplicationNotification";
    case ContentType.FriendAddedNotification:
      return "FriendAddedNotification";
    case ContentType.FriendDeletedNotification:
      return "FriendDeletedNotification";
    case ContentType.FriendRemarkSetNotification:
      return "FriendRemarkSetNotification";
    case ContentType.BlackAddedNotification:
      return "BlackAddedNotification";
    case ContentType.BlackDeletedNotification:
      return "BlackDeletedNotification";
    case ContentType.FriendInfoUpdatedNotification:
      return "FriendInfoUpdatedNotification";
    case ContentType.FriendsInfoUpdateNotification:
      return "FriendsInfoUpdateNotification";
    case ContentType.ConversationChangeNotification:
      return "ConversationChangeNotification";
    case ContentType.UserInfoUpdatedNotification:
      return "UserInfoUpdatedNotification";
    case ContentType.UserStatusChangeNotification:
      return "UserStatusChangeNotification";
    case ContentType.UserCommandAddNotification:
      return "UserCommandAddNotification";
    case ContentType.UserCommandDeleteNotification:
      return "UserCommandDeleteNotification";
    case ContentType.UserCommandUpdateNotification:
      return "UserCommandUpdateNotification";
    case ContentType.GroupCreatedNotification:
      return "GroupCreatedNotification";
    case ContentType.GroupInfoSetNotification:
      return "GroupInfoSetNotification";
    case ContentType.JoinGroupApplicationNotification:
      return "JoinGroupApplicationNotification";
    case ContentType.MemberQuitNotification:
      return "MemberQuitNotification";
    case ContentType.GroupApplicationAcceptedNotification:
      return "GroupApplicationAcceptedNotification";
    case ContentType.GroupApplicationRejectedNotification:
      return "GroupApplicationRejectedNotification";
    case ContentType.GroupOwnerTransferredNotification:
      return "GroupOwnerTransferredNotification";
    case ContentType.MemberKickedNotification:
      return "MemberKickedNotification";
    case ContentType.MemberInvitedNotification:
      return "MemberInvitedNotification";
    case ContentType.MemberEnterNotification:
      return "MemberEnterNotification";
    case ContentType.GroupDismissedNotification:
      return "GroupDismissedNotification";
    case ContentType.GroupMemberMutedNotification:
      return "GroupMemberMutedNotification";
    case ContentType.GroupMemberCancelMutedNotification:
      return "GroupMemberCancelMutedNotification";
    case ContentType.GroupMutedNotification:
      return "GroupMutedNotification";
    case ContentType.GroupCancelMutedNotification:
      return "GroupCancelMutedNotification";
    case ContentType.GroupMemberInfoSetNotification:
      return "GroupMemberInfoSetNotification";
    case ContentType.GroupMemberSetToAdminNotification:
      return "GroupMemberSetToAdminNotification";
    case ContentType.GroupMemberSetToOrdinaryUserNotification:
      return "GroupMemberSetToOrdinaryUserNotification";
    case ContentType.GroupInfoSetAnnouncementNotification:
      return "GroupInfoSetAnnouncementNotification";
    case ContentType.GroupInfoSetNameNotification:
      return "GroupInfoSetNameNotification";
    case ContentType.ConversationPrivateChatNotification:
      return "ConversationPrivateChatNotification";
    case ContentType.ClearConversationNotification:
      return "ClearConversationNotification";
    case ContentType.BusinessNotification:
      return "BusinessNotification";
    case ContentType.RevokeNotification:
      return "RevokeNotification";
    case ContentType.DeleteMsgsNotification:
      return "DeleteMsgsNotification";
    case ContentType.HasReadReceipt:
      return "HasReadReceipt";
    case ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ApprovalStatus {
  Default = 0,
  Approved = 1,
  Rejected = -1,
}

export function approvalStatusFromJSON(object: any): ApprovalStatus {
  switch (object) {
    case 0:
    case "Default":
      return ApprovalStatus.Default;
    case 1:
    case "Approved":
      return ApprovalStatus.Approved;
    case -1:
    case "Rejected":
      return ApprovalStatus.Rejected;
    default:
      return ApprovalStatus.Rejected;
  }
}

export function approvalStatusToJSON(object: ApprovalStatus): string {
  switch (object) {
    case ApprovalStatus.Default:
      return "Default";
    case ApprovalStatus.Approved:
      return "Approved";
    case ApprovalStatus.Rejected:
      return "Rejected";
    default:
      return "Rejected";
  }
}

export enum ConvRecvMsgOpt {
  ReceiveMessage = 0,
  NotReceiveMessage = 1,
  ReceiveNotNotifyMessage = 2,
  UNRECOGNIZED = -1,
}

export function convRecvMsgOptFromJSON(object: any): ConvRecvMsgOpt {
  switch (object) {
    case 0:
    case "ReceiveMessage":
      return ConvRecvMsgOpt.ReceiveMessage;
    case 1:
    case "NotReceiveMessage":
      return ConvRecvMsgOpt.NotReceiveMessage;
    case 2:
    case "ReceiveNotNotifyMessage":
      return ConvRecvMsgOpt.ReceiveNotNotifyMessage;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConvRecvMsgOpt.UNRECOGNIZED;
  }
}

export function convRecvMsgOptToJSON(object: ConvRecvMsgOpt): string {
  switch (object) {
    case ConvRecvMsgOpt.ReceiveMessage:
      return "ReceiveMessage";
    case ConvRecvMsgOpt.NotReceiveMessage:
      return "NotReceiveMessage";
    case ConvRecvMsgOpt.ReceiveNotNotifyMessage:
      return "ReceiveNotNotifyMessage";
    case ConvRecvMsgOpt.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ConvGroupAtType {
  AtNormal = 0,
  AtMe = 1,
  AtAll = 2,
  AtAllAtMe = 3,
  UNRECOGNIZED = -1,
}

export function convGroupAtTypeFromJSON(object: any): ConvGroupAtType {
  switch (object) {
    case 0:
    case "AtNormal":
      return ConvGroupAtType.AtNormal;
    case 1:
    case "AtMe":
      return ConvGroupAtType.AtMe;
    case 2:
    case "AtAll":
      return ConvGroupAtType.AtAll;
    case 3:
    case "AtAllAtMe":
      return ConvGroupAtType.AtAllAtMe;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConvGroupAtType.UNRECOGNIZED;
  }
}

export function convGroupAtTypeToJSON(object: ConvGroupAtType): string {
  switch (object) {
    case ConvGroupAtType.AtNormal:
      return "AtNormal";
    case ConvGroupAtType.AtMe:
      return "AtMe";
    case ConvGroupAtType.AtAll:
      return "AtAll";
    case ConvGroupAtType.AtAllAtMe:
      return "AtAllAtMe";
    case ConvGroupAtType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface OfflinePushInfo {
  title: string;
  desc: string;
  ex: string;
  iOSPushSound: string;
  iOSBadgeCount: boolean;
  signalInfo: string;
}

export interface RequestPagination {
  pageNumber: number;
  showNumber: number;
}

function createBaseOfflinePushInfo(): OfflinePushInfo {
  return { title: "", desc: "", ex: "", iOSPushSound: "", iOSBadgeCount: false, signalInfo: "" };
}

export const OfflinePushInfo: MessageFns<OfflinePushInfo> = {
  encode(message: OfflinePushInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.desc !== "") {
      writer.uint32(18).string(message.desc);
    }
    if (message.ex !== "") {
      writer.uint32(26).string(message.ex);
    }
    if (message.iOSPushSound !== "") {
      writer.uint32(34).string(message.iOSPushSound);
    }
    if (message.iOSBadgeCount !== false) {
      writer.uint32(40).bool(message.iOSBadgeCount);
    }
    if (message.signalInfo !== "") {
      writer.uint32(50).string(message.signalInfo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OfflinePushInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOfflinePushInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ex = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.iOSPushSound = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.iOSBadgeCount = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.signalInfo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OfflinePushInfo {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      desc: isSet(object.desc) ? globalThis.String(object.desc) : "",
      ex: isSet(object.ex) ? globalThis.String(object.ex) : "",
      iOSPushSound: isSet(object.iOSPushSound) ? globalThis.String(object.iOSPushSound) : "",
      iOSBadgeCount: isSet(object.iOSBadgeCount) ? globalThis.Boolean(object.iOSBadgeCount) : false,
      signalInfo: isSet(object.signalInfo) ? globalThis.String(object.signalInfo) : "",
    };
  },

  toJSON(message: OfflinePushInfo): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    if (message.ex !== "") {
      obj.ex = message.ex;
    }
    if (message.iOSPushSound !== "") {
      obj.iOSPushSound = message.iOSPushSound;
    }
    if (message.iOSBadgeCount !== false) {
      obj.iOSBadgeCount = message.iOSBadgeCount;
    }
    if (message.signalInfo !== "") {
      obj.signalInfo = message.signalInfo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OfflinePushInfo>, I>>(base?: I): OfflinePushInfo {
    return OfflinePushInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OfflinePushInfo>, I>>(object: I): OfflinePushInfo {
    const message = createBaseOfflinePushInfo();
    message.title = object.title ?? "";
    message.desc = object.desc ?? "";
    message.ex = object.ex ?? "";
    message.iOSPushSound = object.iOSPushSound ?? "";
    message.iOSBadgeCount = object.iOSBadgeCount ?? false;
    message.signalInfo = object.signalInfo ?? "";
    return message;
  },
};

function createBaseRequestPagination(): RequestPagination {
  return { pageNumber: 0, showNumber: 0 };
}

export const RequestPagination: MessageFns<RequestPagination> = {
  encode(message: RequestPagination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageNumber !== 0) {
      writer.uint32(8).int32(message.pageNumber);
    }
    if (message.showNumber !== 0) {
      writer.uint32(16).int32(message.showNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestPagination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPagination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageNumber = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.showNumber = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestPagination {
    return {
      pageNumber: isSet(object.pageNumber) ? globalThis.Number(object.pageNumber) : 0,
      showNumber: isSet(object.showNumber) ? globalThis.Number(object.showNumber) : 0,
    };
  },

  toJSON(message: RequestPagination): unknown {
    const obj: any = {};
    if (message.pageNumber !== 0) {
      obj.pageNumber = Math.round(message.pageNumber);
    }
    if (message.showNumber !== 0) {
      obj.showNumber = Math.round(message.showNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestPagination>, I>>(base?: I): RequestPagination {
    return RequestPagination.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestPagination>, I>>(object: I): RequestPagination {
    const message = createBaseRequestPagination();
    message.pageNumber = object.pageNumber ?? 0;
    message.showNumber = object.showNumber ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
