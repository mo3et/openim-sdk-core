// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.27.1
// source: relation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ApprovalStatus, approvalStatusFromJSON, approvalStatusToJSON, RequestPagination } from "./common";
import { BlackInfo, FriendInfo, FriendRequestInfo } from "./shared";

export const protobufPackage = "openim.sdk.relation";

export enum Relationship {
  Black = 0,
  Friend = 1,
  UNRECOGNIZED = -1,
}

export function relationshipFromJSON(object: any): Relationship {
  switch (object) {
    case 0:
    case "Black":
      return Relationship.Black;
    case 1:
    case "Friend":
      return Relationship.Friend;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Relationship.UNRECOGNIZED;
  }
}

export function relationshipToJSON(object: Relationship): string {
  switch (object) {
    case Relationship.Black:
      return "Black";
    case Relationship.Friend:
      return "Friend";
    case Relationship.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetSpecifiedFriendsReq {
  friendUserIDs: string[];
  filterBlack: boolean;
}

export interface GetSpecifiedFriendsResp {
  friends: FriendInfo[];
}

export interface AddFriendReq {
  userID: string;
  reqMsg: string;
  ex: string;
}

export interface AddFriendResp {
}

export interface GetFriendRequestsReq {
  send: boolean;
}

export interface GetFriendRequestsResp {
  requests: FriendRequestInfo[];
}

export interface HandlerFriendRequestReq {
  userID: string;
  handleMsg: string;
  status: ApprovalStatus;
}

export interface HandlerFriendRequestResp {
}

export interface CheckFriendReq {
  friendUserIDs: string[];
}

export interface CheckFriendInfo {
  userID: string;
  result: number;
}

export interface CheckFriendResp {
  result: CheckFriendInfo[];
}

export interface DeleteFriendReq {
  userID: string;
}

export interface DeleteFriendResp {
}

export interface GetFriendsReq {
  filterBlack: boolean;
}

export interface GetFriendsResp {
  friends: FriendInfo[];
}

export interface GetFriendsPageReq {
  filterBlack: boolean;
  pagination: RequestPagination | undefined;
}

export interface GetFriendsPageResp {
  friends: FriendInfo[];
}

export interface SearchFriendsReq {
  keyword: string;
  searchUserID: boolean;
  searchNickname: boolean;
  searchRemark: boolean;
}

export interface SearchFriendsInfo {
  friend: FriendInfo | undefined;
  relationship: Relationship;
}

export interface SearchFriendsResp {
  friends: SearchFriendsInfo[];
}

export interface AddBlackReq {
  userID: string;
  ex: string;
}

export interface AddBlackResp {
}

export interface DeleteBlackReq {
  userID: string;
}

export interface DeleteBlackResp {
}

export interface GetBlacksReq {
}

export interface GetBlacksResp {
  blacks: BlackInfo[];
}

export interface UpdatesFriendsReq {
  userID: string;
  pinned?: boolean | undefined;
  Remark?: string | undefined;
  ex?: string | undefined;
}

export interface UpdatesFriendsResp {
}

function createBaseGetSpecifiedFriendsReq(): GetSpecifiedFriendsReq {
  return { friendUserIDs: [], filterBlack: false };
}

export const GetSpecifiedFriendsReq: MessageFns<GetSpecifiedFriendsReq> = {
  encode(message: GetSpecifiedFriendsReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.friendUserIDs) {
      writer.uint32(10).string(v!);
    }
    if (message.filterBlack !== false) {
      writer.uint32(16).bool(message.filterBlack);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpecifiedFriendsReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpecifiedFriendsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friendUserIDs.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.filterBlack = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpecifiedFriendsReq {
    return {
      friendUserIDs: globalThis.Array.isArray(object?.friendUserIDs)
        ? object.friendUserIDs.map((e: any) => globalThis.String(e))
        : [],
      filterBlack: isSet(object.filterBlack) ? globalThis.Boolean(object.filterBlack) : false,
    };
  },

  toJSON(message: GetSpecifiedFriendsReq): unknown {
    const obj: any = {};
    if (message.friendUserIDs?.length) {
      obj.friendUserIDs = message.friendUserIDs;
    }
    if (message.filterBlack !== false) {
      obj.filterBlack = message.filterBlack;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpecifiedFriendsReq>, I>>(base?: I): GetSpecifiedFriendsReq {
    return GetSpecifiedFriendsReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpecifiedFriendsReq>, I>>(object: I): GetSpecifiedFriendsReq {
    const message = createBaseGetSpecifiedFriendsReq();
    message.friendUserIDs = object.friendUserIDs?.map((e) => e) || [];
    message.filterBlack = object.filterBlack ?? false;
    return message;
  },
};

function createBaseGetSpecifiedFriendsResp(): GetSpecifiedFriendsResp {
  return { friends: [] };
}

export const GetSpecifiedFriendsResp: MessageFns<GetSpecifiedFriendsResp> = {
  encode(message: GetSpecifiedFriendsResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.friends) {
      FriendInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSpecifiedFriendsResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSpecifiedFriendsResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friends.push(FriendInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSpecifiedFriendsResp {
    return {
      friends: globalThis.Array.isArray(object?.friends) ? object.friends.map((e: any) => FriendInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetSpecifiedFriendsResp): unknown {
    const obj: any = {};
    if (message.friends?.length) {
      obj.friends = message.friends.map((e) => FriendInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSpecifiedFriendsResp>, I>>(base?: I): GetSpecifiedFriendsResp {
    return GetSpecifiedFriendsResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSpecifiedFriendsResp>, I>>(object: I): GetSpecifiedFriendsResp {
    const message = createBaseGetSpecifiedFriendsResp();
    message.friends = object.friends?.map((e) => FriendInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddFriendReq(): AddFriendReq {
  return { userID: "", reqMsg: "", ex: "" };
}

export const AddFriendReq: MessageFns<AddFriendReq> = {
  encode(message: AddFriendReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.reqMsg !== "") {
      writer.uint32(18).string(message.reqMsg);
    }
    if (message.ex !== "") {
      writer.uint32(26).string(message.ex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddFriendReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddFriendReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reqMsg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddFriendReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      reqMsg: isSet(object.reqMsg) ? globalThis.String(object.reqMsg) : "",
      ex: isSet(object.ex) ? globalThis.String(object.ex) : "",
    };
  },

  toJSON(message: AddFriendReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.reqMsg !== "") {
      obj.reqMsg = message.reqMsg;
    }
    if (message.ex !== "") {
      obj.ex = message.ex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddFriendReq>, I>>(base?: I): AddFriendReq {
    return AddFriendReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddFriendReq>, I>>(object: I): AddFriendReq {
    const message = createBaseAddFriendReq();
    message.userID = object.userID ?? "";
    message.reqMsg = object.reqMsg ?? "";
    message.ex = object.ex ?? "";
    return message;
  },
};

function createBaseAddFriendResp(): AddFriendResp {
  return {};
}

export const AddFriendResp: MessageFns<AddFriendResp> = {
  encode(_: AddFriendResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddFriendResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddFriendResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddFriendResp {
    return {};
  },

  toJSON(_: AddFriendResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AddFriendResp>, I>>(base?: I): AddFriendResp {
    return AddFriendResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddFriendResp>, I>>(_: I): AddFriendResp {
    const message = createBaseAddFriendResp();
    return message;
  },
};

function createBaseGetFriendRequestsReq(): GetFriendRequestsReq {
  return { send: false };
}

export const GetFriendRequestsReq: MessageFns<GetFriendRequestsReq> = {
  encode(message: GetFriendRequestsReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.send !== false) {
      writer.uint32(8).bool(message.send);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFriendRequestsReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFriendRequestsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.send = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFriendRequestsReq {
    return { send: isSet(object.send) ? globalThis.Boolean(object.send) : false };
  },

  toJSON(message: GetFriendRequestsReq): unknown {
    const obj: any = {};
    if (message.send !== false) {
      obj.send = message.send;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFriendRequestsReq>, I>>(base?: I): GetFriendRequestsReq {
    return GetFriendRequestsReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFriendRequestsReq>, I>>(object: I): GetFriendRequestsReq {
    const message = createBaseGetFriendRequestsReq();
    message.send = object.send ?? false;
    return message;
  },
};

function createBaseGetFriendRequestsResp(): GetFriendRequestsResp {
  return { requests: [] };
}

export const GetFriendRequestsResp: MessageFns<GetFriendRequestsResp> = {
  encode(message: GetFriendRequestsResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.requests) {
      FriendRequestInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFriendRequestsResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFriendRequestsResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requests.push(FriendRequestInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFriendRequestsResp {
    return {
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => FriendRequestInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetFriendRequestsResp): unknown {
    const obj: any = {};
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => FriendRequestInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFriendRequestsResp>, I>>(base?: I): GetFriendRequestsResp {
    return GetFriendRequestsResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFriendRequestsResp>, I>>(object: I): GetFriendRequestsResp {
    const message = createBaseGetFriendRequestsResp();
    message.requests = object.requests?.map((e) => FriendRequestInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHandlerFriendRequestReq(): HandlerFriendRequestReq {
  return { userID: "", handleMsg: "", status: 0 };
}

export const HandlerFriendRequestReq: MessageFns<HandlerFriendRequestReq> = {
  encode(message: HandlerFriendRequestReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.handleMsg !== "") {
      writer.uint32(18).string(message.handleMsg);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandlerFriendRequestReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandlerFriendRequestReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.handleMsg = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandlerFriendRequestReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      handleMsg: isSet(object.handleMsg) ? globalThis.String(object.handleMsg) : "",
      status: isSet(object.status) ? approvalStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: HandlerFriendRequestReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.handleMsg !== "") {
      obj.handleMsg = message.handleMsg;
    }
    if (message.status !== 0) {
      obj.status = approvalStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandlerFriendRequestReq>, I>>(base?: I): HandlerFriendRequestReq {
    return HandlerFriendRequestReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandlerFriendRequestReq>, I>>(object: I): HandlerFriendRequestReq {
    const message = createBaseHandlerFriendRequestReq();
    message.userID = object.userID ?? "";
    message.handleMsg = object.handleMsg ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseHandlerFriendRequestResp(): HandlerFriendRequestResp {
  return {};
}

export const HandlerFriendRequestResp: MessageFns<HandlerFriendRequestResp> = {
  encode(_: HandlerFriendRequestResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandlerFriendRequestResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandlerFriendRequestResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HandlerFriendRequestResp {
    return {};
  },

  toJSON(_: HandlerFriendRequestResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HandlerFriendRequestResp>, I>>(base?: I): HandlerFriendRequestResp {
    return HandlerFriendRequestResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandlerFriendRequestResp>, I>>(_: I): HandlerFriendRequestResp {
    const message = createBaseHandlerFriendRequestResp();
    return message;
  },
};

function createBaseCheckFriendReq(): CheckFriendReq {
  return { friendUserIDs: [] };
}

export const CheckFriendReq: MessageFns<CheckFriendReq> = {
  encode(message: CheckFriendReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.friendUserIDs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckFriendReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckFriendReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friendUserIDs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckFriendReq {
    return {
      friendUserIDs: globalThis.Array.isArray(object?.friendUserIDs)
        ? object.friendUserIDs.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CheckFriendReq): unknown {
    const obj: any = {};
    if (message.friendUserIDs?.length) {
      obj.friendUserIDs = message.friendUserIDs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckFriendReq>, I>>(base?: I): CheckFriendReq {
    return CheckFriendReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckFriendReq>, I>>(object: I): CheckFriendReq {
    const message = createBaseCheckFriendReq();
    message.friendUserIDs = object.friendUserIDs?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckFriendInfo(): CheckFriendInfo {
  return { userID: "", result: 0 };
}

export const CheckFriendInfo: MessageFns<CheckFriendInfo> = {
  encode(message: CheckFriendInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.result !== 0) {
      writer.uint32(16).int32(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckFriendInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckFriendInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.result = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckFriendInfo {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
    };
  },

  toJSON(message: CheckFriendInfo): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckFriendInfo>, I>>(base?: I): CheckFriendInfo {
    return CheckFriendInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckFriendInfo>, I>>(object: I): CheckFriendInfo {
    const message = createBaseCheckFriendInfo();
    message.userID = object.userID ?? "";
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseCheckFriendResp(): CheckFriendResp {
  return { result: [] };
}

export const CheckFriendResp: MessageFns<CheckFriendResp> = {
  encode(message: CheckFriendResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.result) {
      CheckFriendInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckFriendResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckFriendResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result.push(CheckFriendInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckFriendResp {
    return {
      result: globalThis.Array.isArray(object?.result)
        ? object.result.map((e: any) => CheckFriendInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CheckFriendResp): unknown {
    const obj: any = {};
    if (message.result?.length) {
      obj.result = message.result.map((e) => CheckFriendInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckFriendResp>, I>>(base?: I): CheckFriendResp {
    return CheckFriendResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckFriendResp>, I>>(object: I): CheckFriendResp {
    const message = createBaseCheckFriendResp();
    message.result = object.result?.map((e) => CheckFriendInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteFriendReq(): DeleteFriendReq {
  return { userID: "" };
}

export const DeleteFriendReq: MessageFns<DeleteFriendReq> = {
  encode(message: DeleteFriendReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFriendReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFriendReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFriendReq {
    return { userID: isSet(object.userID) ? globalThis.String(object.userID) : "" };
  },

  toJSON(message: DeleteFriendReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteFriendReq>, I>>(base?: I): DeleteFriendReq {
    return DeleteFriendReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteFriendReq>, I>>(object: I): DeleteFriendReq {
    const message = createBaseDeleteFriendReq();
    message.userID = object.userID ?? "";
    return message;
  },
};

function createBaseDeleteFriendResp(): DeleteFriendResp {
  return {};
}

export const DeleteFriendResp: MessageFns<DeleteFriendResp> = {
  encode(_: DeleteFriendResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFriendResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFriendResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteFriendResp {
    return {};
  },

  toJSON(_: DeleteFriendResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteFriendResp>, I>>(base?: I): DeleteFriendResp {
    return DeleteFriendResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteFriendResp>, I>>(_: I): DeleteFriendResp {
    const message = createBaseDeleteFriendResp();
    return message;
  },
};

function createBaseGetFriendsReq(): GetFriendsReq {
  return { filterBlack: false };
}

export const GetFriendsReq: MessageFns<GetFriendsReq> = {
  encode(message: GetFriendsReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filterBlack !== false) {
      writer.uint32(8).bool(message.filterBlack);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFriendsReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFriendsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.filterBlack = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFriendsReq {
    return { filterBlack: isSet(object.filterBlack) ? globalThis.Boolean(object.filterBlack) : false };
  },

  toJSON(message: GetFriendsReq): unknown {
    const obj: any = {};
    if (message.filterBlack !== false) {
      obj.filterBlack = message.filterBlack;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFriendsReq>, I>>(base?: I): GetFriendsReq {
    return GetFriendsReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFriendsReq>, I>>(object: I): GetFriendsReq {
    const message = createBaseGetFriendsReq();
    message.filterBlack = object.filterBlack ?? false;
    return message;
  },
};

function createBaseGetFriendsResp(): GetFriendsResp {
  return { friends: [] };
}

export const GetFriendsResp: MessageFns<GetFriendsResp> = {
  encode(message: GetFriendsResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.friends) {
      FriendInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFriendsResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFriendsResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friends.push(FriendInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFriendsResp {
    return {
      friends: globalThis.Array.isArray(object?.friends) ? object.friends.map((e: any) => FriendInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetFriendsResp): unknown {
    const obj: any = {};
    if (message.friends?.length) {
      obj.friends = message.friends.map((e) => FriendInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFriendsResp>, I>>(base?: I): GetFriendsResp {
    return GetFriendsResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFriendsResp>, I>>(object: I): GetFriendsResp {
    const message = createBaseGetFriendsResp();
    message.friends = object.friends?.map((e) => FriendInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetFriendsPageReq(): GetFriendsPageReq {
  return { filterBlack: false, pagination: undefined };
}

export const GetFriendsPageReq: MessageFns<GetFriendsPageReq> = {
  encode(message: GetFriendsPageReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filterBlack !== false) {
      writer.uint32(8).bool(message.filterBlack);
    }
    if (message.pagination !== undefined) {
      RequestPagination.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFriendsPageReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFriendsPageReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.filterBlack = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = RequestPagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFriendsPageReq {
    return {
      filterBlack: isSet(object.filterBlack) ? globalThis.Boolean(object.filterBlack) : false,
      pagination: isSet(object.pagination) ? RequestPagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: GetFriendsPageReq): unknown {
    const obj: any = {};
    if (message.filterBlack !== false) {
      obj.filterBlack = message.filterBlack;
    }
    if (message.pagination !== undefined) {
      obj.pagination = RequestPagination.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFriendsPageReq>, I>>(base?: I): GetFriendsPageReq {
    return GetFriendsPageReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFriendsPageReq>, I>>(object: I): GetFriendsPageReq {
    const message = createBaseGetFriendsPageReq();
    message.filterBlack = object.filterBlack ?? false;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? RequestPagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseGetFriendsPageResp(): GetFriendsPageResp {
  return { friends: [] };
}

export const GetFriendsPageResp: MessageFns<GetFriendsPageResp> = {
  encode(message: GetFriendsPageResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.friends) {
      FriendInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFriendsPageResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFriendsPageResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friends.push(FriendInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFriendsPageResp {
    return {
      friends: globalThis.Array.isArray(object?.friends) ? object.friends.map((e: any) => FriendInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetFriendsPageResp): unknown {
    const obj: any = {};
    if (message.friends?.length) {
      obj.friends = message.friends.map((e) => FriendInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFriendsPageResp>, I>>(base?: I): GetFriendsPageResp {
    return GetFriendsPageResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFriendsPageResp>, I>>(object: I): GetFriendsPageResp {
    const message = createBaseGetFriendsPageResp();
    message.friends = object.friends?.map((e) => FriendInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSearchFriendsReq(): SearchFriendsReq {
  return { keyword: "", searchUserID: false, searchNickname: false, searchRemark: false };
}

export const SearchFriendsReq: MessageFns<SearchFriendsReq> = {
  encode(message: SearchFriendsReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyword !== "") {
      writer.uint32(10).string(message.keyword);
    }
    if (message.searchUserID !== false) {
      writer.uint32(16).bool(message.searchUserID);
    }
    if (message.searchNickname !== false) {
      writer.uint32(24).bool(message.searchNickname);
    }
    if (message.searchRemark !== false) {
      writer.uint32(32).bool(message.searchRemark);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchFriendsReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchFriendsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyword = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.searchUserID = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.searchNickname = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.searchRemark = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchFriendsReq {
    return {
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : "",
      searchUserID: isSet(object.searchUserID) ? globalThis.Boolean(object.searchUserID) : false,
      searchNickname: isSet(object.searchNickname) ? globalThis.Boolean(object.searchNickname) : false,
      searchRemark: isSet(object.searchRemark) ? globalThis.Boolean(object.searchRemark) : false,
    };
  },

  toJSON(message: SearchFriendsReq): unknown {
    const obj: any = {};
    if (message.keyword !== "") {
      obj.keyword = message.keyword;
    }
    if (message.searchUserID !== false) {
      obj.searchUserID = message.searchUserID;
    }
    if (message.searchNickname !== false) {
      obj.searchNickname = message.searchNickname;
    }
    if (message.searchRemark !== false) {
      obj.searchRemark = message.searchRemark;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchFriendsReq>, I>>(base?: I): SearchFriendsReq {
    return SearchFriendsReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchFriendsReq>, I>>(object: I): SearchFriendsReq {
    const message = createBaseSearchFriendsReq();
    message.keyword = object.keyword ?? "";
    message.searchUserID = object.searchUserID ?? false;
    message.searchNickname = object.searchNickname ?? false;
    message.searchRemark = object.searchRemark ?? false;
    return message;
  },
};

function createBaseSearchFriendsInfo(): SearchFriendsInfo {
  return { friend: undefined, relationship: 0 };
}

export const SearchFriendsInfo: MessageFns<SearchFriendsInfo> = {
  encode(message: SearchFriendsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.friend !== undefined) {
      FriendInfo.encode(message.friend, writer.uint32(10).fork()).join();
    }
    if (message.relationship !== 0) {
      writer.uint32(16).int32(message.relationship);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchFriendsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchFriendsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friend = FriendInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.relationship = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchFriendsInfo {
    return {
      friend: isSet(object.friend) ? FriendInfo.fromJSON(object.friend) : undefined,
      relationship: isSet(object.relationship) ? relationshipFromJSON(object.relationship) : 0,
    };
  },

  toJSON(message: SearchFriendsInfo): unknown {
    const obj: any = {};
    if (message.friend !== undefined) {
      obj.friend = FriendInfo.toJSON(message.friend);
    }
    if (message.relationship !== 0) {
      obj.relationship = relationshipToJSON(message.relationship);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchFriendsInfo>, I>>(base?: I): SearchFriendsInfo {
    return SearchFriendsInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchFriendsInfo>, I>>(object: I): SearchFriendsInfo {
    const message = createBaseSearchFriendsInfo();
    message.friend = (object.friend !== undefined && object.friend !== null)
      ? FriendInfo.fromPartial(object.friend)
      : undefined;
    message.relationship = object.relationship ?? 0;
    return message;
  },
};

function createBaseSearchFriendsResp(): SearchFriendsResp {
  return { friends: [] };
}

export const SearchFriendsResp: MessageFns<SearchFriendsResp> = {
  encode(message: SearchFriendsResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.friends) {
      SearchFriendsInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchFriendsResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchFriendsResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.friends.push(SearchFriendsInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchFriendsResp {
    return {
      friends: globalThis.Array.isArray(object?.friends)
        ? object.friends.map((e: any) => SearchFriendsInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SearchFriendsResp): unknown {
    const obj: any = {};
    if (message.friends?.length) {
      obj.friends = message.friends.map((e) => SearchFriendsInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchFriendsResp>, I>>(base?: I): SearchFriendsResp {
    return SearchFriendsResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchFriendsResp>, I>>(object: I): SearchFriendsResp {
    const message = createBaseSearchFriendsResp();
    message.friends = object.friends?.map((e) => SearchFriendsInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddBlackReq(): AddBlackReq {
  return { userID: "", ex: "" };
}

export const AddBlackReq: MessageFns<AddBlackReq> = {
  encode(message: AddBlackReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.ex !== "") {
      writer.uint32(18).string(message.ex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddBlackReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddBlackReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddBlackReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      ex: isSet(object.ex) ? globalThis.String(object.ex) : "",
    };
  },

  toJSON(message: AddBlackReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.ex !== "") {
      obj.ex = message.ex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddBlackReq>, I>>(base?: I): AddBlackReq {
    return AddBlackReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddBlackReq>, I>>(object: I): AddBlackReq {
    const message = createBaseAddBlackReq();
    message.userID = object.userID ?? "";
    message.ex = object.ex ?? "";
    return message;
  },
};

function createBaseAddBlackResp(): AddBlackResp {
  return {};
}

export const AddBlackResp: MessageFns<AddBlackResp> = {
  encode(_: AddBlackResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddBlackResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddBlackResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddBlackResp {
    return {};
  },

  toJSON(_: AddBlackResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AddBlackResp>, I>>(base?: I): AddBlackResp {
    return AddBlackResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddBlackResp>, I>>(_: I): AddBlackResp {
    const message = createBaseAddBlackResp();
    return message;
  },
};

function createBaseDeleteBlackReq(): DeleteBlackReq {
  return { userID: "" };
}

export const DeleteBlackReq: MessageFns<DeleteBlackReq> = {
  encode(message: DeleteBlackReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBlackReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBlackReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBlackReq {
    return { userID: isSet(object.userID) ? globalThis.String(object.userID) : "" };
  },

  toJSON(message: DeleteBlackReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBlackReq>, I>>(base?: I): DeleteBlackReq {
    return DeleteBlackReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBlackReq>, I>>(object: I): DeleteBlackReq {
    const message = createBaseDeleteBlackReq();
    message.userID = object.userID ?? "";
    return message;
  },
};

function createBaseDeleteBlackResp(): DeleteBlackResp {
  return {};
}

export const DeleteBlackResp: MessageFns<DeleteBlackResp> = {
  encode(_: DeleteBlackResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBlackResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBlackResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteBlackResp {
    return {};
  },

  toJSON(_: DeleteBlackResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBlackResp>, I>>(base?: I): DeleteBlackResp {
    return DeleteBlackResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBlackResp>, I>>(_: I): DeleteBlackResp {
    const message = createBaseDeleteBlackResp();
    return message;
  },
};

function createBaseGetBlacksReq(): GetBlacksReq {
  return {};
}

export const GetBlacksReq: MessageFns<GetBlacksReq> = {
  encode(_: GetBlacksReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlacksReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlacksReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetBlacksReq {
    return {};
  },

  toJSON(_: GetBlacksReq): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlacksReq>, I>>(base?: I): GetBlacksReq {
    return GetBlacksReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlacksReq>, I>>(_: I): GetBlacksReq {
    const message = createBaseGetBlacksReq();
    return message;
  },
};

function createBaseGetBlacksResp(): GetBlacksResp {
  return { blacks: [] };
}

export const GetBlacksResp: MessageFns<GetBlacksResp> = {
  encode(message: GetBlacksResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.blacks) {
      BlackInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBlacksResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBlacksResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blacks.push(BlackInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBlacksResp {
    return {
      blacks: globalThis.Array.isArray(object?.blacks) ? object.blacks.map((e: any) => BlackInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetBlacksResp): unknown {
    const obj: any = {};
    if (message.blacks?.length) {
      obj.blacks = message.blacks.map((e) => BlackInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBlacksResp>, I>>(base?: I): GetBlacksResp {
    return GetBlacksResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBlacksResp>, I>>(object: I): GetBlacksResp {
    const message = createBaseGetBlacksResp();
    message.blacks = object.blacks?.map((e) => BlackInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdatesFriendsReq(): UpdatesFriendsReq {
  return { userID: "", pinned: undefined, Remark: undefined, ex: undefined };
}

export const UpdatesFriendsReq: MessageFns<UpdatesFriendsReq> = {
  encode(message: UpdatesFriendsReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userID !== "") {
      writer.uint32(10).string(message.userID);
    }
    if (message.pinned !== undefined) {
      writer.uint32(16).bool(message.pinned);
    }
    if (message.Remark !== undefined) {
      writer.uint32(26).string(message.Remark);
    }
    if (message.ex !== undefined) {
      writer.uint32(34).string(message.ex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatesFriendsReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatesFriendsReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pinned = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.Remark = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatesFriendsReq {
    return {
      userID: isSet(object.userID) ? globalThis.String(object.userID) : "",
      pinned: isSet(object.pinned) ? globalThis.Boolean(object.pinned) : undefined,
      Remark: isSet(object.Remark) ? globalThis.String(object.Remark) : undefined,
      ex: isSet(object.ex) ? globalThis.String(object.ex) : undefined,
    };
  },

  toJSON(message: UpdatesFriendsReq): unknown {
    const obj: any = {};
    if (message.userID !== "") {
      obj.userID = message.userID;
    }
    if (message.pinned !== undefined) {
      obj.pinned = message.pinned;
    }
    if (message.Remark !== undefined) {
      obj.Remark = message.Remark;
    }
    if (message.ex !== undefined) {
      obj.ex = message.ex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatesFriendsReq>, I>>(base?: I): UpdatesFriendsReq {
    return UpdatesFriendsReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatesFriendsReq>, I>>(object: I): UpdatesFriendsReq {
    const message = createBaseUpdatesFriendsReq();
    message.userID = object.userID ?? "";
    message.pinned = object.pinned ?? undefined;
    message.Remark = object.Remark ?? undefined;
    message.ex = object.ex ?? undefined;
    return message;
  },
};

function createBaseUpdatesFriendsResp(): UpdatesFriendsResp {
  return {};
}

export const UpdatesFriendsResp: MessageFns<UpdatesFriendsResp> = {
  encode(_: UpdatesFriendsResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatesFriendsResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatesFriendsResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdatesFriendsResp {
    return {};
  },

  toJSON(_: UpdatesFriendsResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatesFriendsResp>, I>>(base?: I): UpdatesFriendsResp {
    return UpdatesFriendsResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatesFriendsResp>, I>>(_: I): UpdatesFriendsResp {
    const message = createBaseUpdatesFriendsResp();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
