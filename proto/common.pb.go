// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: common.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionType int32

const (
	SessionType_SessionType_ SessionType = 0
	// SingleChatType represents a single chat session type.
	SessionType_SingleChatType SessionType = 1
	// WriteGroupChatType represents a write-diffusion group chat session type (not currently enabled, can be ignored).
	SessionType_WriteGroupChatType SessionType = 2
	// ReadGroupChatType represents a read-diffusion group chat session type, used for all current group chats in OpenIM.
	SessionType_ReadGroupChatType SessionType = 3
	// NotificationChatType represents a notification session type, generated by the client when the server sends a notification.
	SessionType_NotificationChatType SessionType = 4
)

// Enum value maps for SessionType.
var (
	SessionType_name = map[int32]string{
		0: "SessionType_",
		1: "SingleChatType",
		2: "WriteGroupChatType",
		3: "ReadGroupChatType",
		4: "NotificationChatType",
	}
	SessionType_value = map[string]int32{
		"SessionType_":         0,
		"SingleChatType":       1,
		"WriteGroupChatType":   2,
		"ReadGroupChatType":    3,
		"NotificationChatType": 4,
	}
)

func (x SessionType) Enum() *SessionType {
	p := new(SessionType)
	*p = x
	return p
}

func (x SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (SessionType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionType.Descriptor instead.
func (SessionType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type MsgFrom int32

const (
	MsgFrom_MsgFrom_ MsgFrom = 0
	// UserMsgType represents a message type originating from a user.
	MsgFrom_UserMsgType MsgFrom = 100
	// SysMsgType represents a system message type, typically generated by the system.
	MsgFrom_SysMsgType MsgFrom = 200
)

// Enum value maps for MsgFrom.
var (
	MsgFrom_name = map[int32]string{
		0:   "MsgFrom_",
		100: "UserMsgType",
		200: "SysMsgType",
	}
	MsgFrom_value = map[string]int32{
		"MsgFrom_":    0,
		"UserMsgType": 100,
		"SysMsgType":  200,
	}
)

func (x MsgFrom) Enum() *MsgFrom {
	p := new(MsgFrom)
	*p = x
	return p
}

func (x MsgFrom) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgFrom) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (MsgFrom) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x MsgFrom) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgFrom.Descriptor instead.
func (MsgFrom) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type Platform int32

const (
	Platform_Platform_ Platform = 0
	// iOS represents the Apple iOS platform.
	Platform_iOS Platform = 1
	// Android represents the Android platform.
	Platform_Android Platform = 2
	// Windows represents the Microsoft Windows platform.
	Platform_Windows Platform = 3
	// macOS represents the Apple macOS platform.
	Platform_macOS Platform = 4
	// Web represents the web browser platform.
	Platform_Web Platform = 5
	// MiniWeb represents the mini-program or mini-web platform.
	Platform_MiniWeb Platform = 6
	// Linux represents the Linux platform.
	Platform_Linux Platform = 7
	// AndroidPad represents the Android tablet platform.
	Platform_AndroidPad Platform = 8
	// iPad represents the Apple iPad platform.
	Platform_iPad Platform = 9
	// Admin represents the admin panel or management platform, typically used for backend administrators.
	// This platform is specifically for administrative filling and can generally be ignored.
	Platform_Admin Platform = 10
	// HarmonyOS represents the Huawei HarmonyOS platform.
	Platform_HarmonyOS Platform = 11
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0:  "Platform_",
		1:  "iOS",
		2:  "Android",
		3:  "Windows",
		4:  "macOS",
		5:  "Web",
		6:  "MiniWeb",
		7:  "Linux",
		8:  "AndroidPad",
		9:  "iPad",
		10: "Admin",
		11: "HarmonyOS",
	}
	Platform_value = map[string]int32{
		"Platform_":  0,
		"iOS":        1,
		"Android":    2,
		"Windows":    3,
		"macOS":      4,
		"Web":        5,
		"MiniWeb":    6,
		"Linux":      7,
		"AndroidPad": 8,
		"iPad":       9,
		"Admin":      10,
		"HarmonyOS":  11,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type AppFramework int32

const (
	AppFramework_AppFramework_ AppFramework = 0
	AppFramework_Flutter       AppFramework = 1
	AppFramework_UniApp        AppFramework = 2
	AppFramework_Native        AppFramework = 3
	AppFramework_Electron      AppFramework = 4
	AppFramework_ReactNative   AppFramework = 5
	AppFramework_Unity         AppFramework = 6
	AppFramework_UnrealEngine  AppFramework = 7
	AppFramework_DotNet        AppFramework = 8
	AppFramework_DotNetMAUI    AppFramework = 9
	AppFramework_Avalonia      AppFramework = 10
	AppFramework_Qt            AppFramework = 11
	AppFramework_Cordova       AppFramework = 12
)

// Enum value maps for AppFramework.
var (
	AppFramework_name = map[int32]string{
		0:  "AppFramework_",
		1:  "Flutter",
		2:  "UniApp",
		3:  "Native",
		4:  "Electron",
		5:  "ReactNative",
		6:  "Unity",
		7:  "UnrealEngine",
		8:  "DotNet",
		9:  "DotNetMAUI",
		10: "Avalonia",
		11: "Qt",
		12: "Cordova",
	}
	AppFramework_value = map[string]int32{
		"AppFramework_": 0,
		"Flutter":       1,
		"UniApp":        2,
		"Native":        3,
		"Electron":      4,
		"ReactNative":   5,
		"Unity":         6,
		"UnrealEngine":  7,
		"DotNet":        8,
		"DotNetMAUI":    9,
		"Avalonia":      10,
		"Qt":            11,
		"Cordova":       12,
	}
)

func (x AppFramework) Enum() *AppFramework {
	p := new(AppFramework)
	*p = x
	return p
}

func (x AppFramework) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppFramework) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (AppFramework) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x AppFramework) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppFramework.Descriptor instead.
func (AppFramework) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type MsgStatus int32

const (
	MsgStatus_MsgStatus_  MsgStatus = 0
	MsgStatus_Sending     MsgStatus = 1
	MsgStatus_SendSuccess MsgStatus = 2
	MsgStatus_SendFailed  MsgStatus = 3
	MsgStatus_HasDeleted  MsgStatus = 4
	MsgStatus_Filtered    MsgStatus = 5
)

// Enum value maps for MsgStatus.
var (
	MsgStatus_name = map[int32]string{
		0: "MsgStatus_",
		1: "Sending",
		2: "SendSuccess",
		3: "SendFailed",
		4: "HasDeleted",
		5: "Filtered",
	}
	MsgStatus_value = map[string]int32{
		"MsgStatus_":  0,
		"Sending":     1,
		"SendSuccess": 2,
		"SendFailed":  3,
		"HasDeleted":  4,
		"Filtered":    5,
	}
)

func (x MsgStatus) Enum() *MsgStatus {
	p := new(MsgStatus)
	*p = x
	return p
}

func (x MsgStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (MsgStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x MsgStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgStatus.Descriptor instead.
func (MsgStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type ContentType int32

const (
	ContentType_ContentType_                          ContentType = 0
	ContentType_Text                                  ContentType = 101
	ContentType_Picture                               ContentType = 102
	ContentType_Sound                                 ContentType = 103
	ContentType_Video                                 ContentType = 104
	ContentType_File                                  ContentType = 105
	ContentType_AtText                                ContentType = 106
	ContentType_Merger                                ContentType = 107
	ContentType_Card                                  ContentType = 108
	ContentType_Location                              ContentType = 109
	ContentType_Custom                                ContentType = 110
	ContentType_Typing                                ContentType = 113
	ContentType_Quote                                 ContentType = 114
	ContentType_Face                                  ContentType = 115
	ContentType_AdvancedText                          ContentType = 117
	ContentType_CustomMsgNotTriggerConversation       ContentType = 119
	ContentType_CustomMsgOnlineOnly                   ContentType = 120
	ContentType_FriendApplicationApprovedNotification ContentType = 1201
	ContentType_FriendApplicationRejectedNotification ContentType = 1202
	ContentType_FriendApplicationNotification         ContentType = 1203
	ContentType_FriendAddedNotification               ContentType = 1204
	ContentType_FriendDeletedNotification             ContentType = 1205
	ContentType_FriendRemarkSetNotification           ContentType = 1206
	ContentType_BlackAddedNotification                ContentType = 1207
	ContentType_BlackDeletedNotification              ContentType = 1208
	ContentType_FriendInfoUpdatedNotification         ContentType = 1209
	ContentType_FriendsInfoUpdateNotification         ContentType = 1210
	// FriendNotificationEnd = 1299;
	ContentType_ConversationChangeNotification ContentType = 1300
	// UserNotificationBegin = 1301;
	ContentType_UserInfoUpdatedNotification   ContentType = 1303
	ContentType_UserStatusChangeNotification  ContentType = 1304
	ContentType_UserCommandAddNotification    ContentType = 1305
	ContentType_UserCommandDeleteNotification ContentType = 1306
	ContentType_UserCommandUpdateNotification ContentType = 1307 //  UserNotificationEnd = 1399;
	// GroupNotificationBegin = 1500;
	ContentType_GroupCreatedNotification                 ContentType = 1501
	ContentType_GroupInfoSetNotification                 ContentType = 1502
	ContentType_JoinGroupApplicationNotification         ContentType = 1503
	ContentType_MemberQuitNotification                   ContentType = 1504
	ContentType_GroupApplicationAcceptedNotification     ContentType = 1505
	ContentType_GroupApplicationRejectedNotification     ContentType = 1506
	ContentType_GroupOwnerTransferredNotification        ContentType = 1507
	ContentType_MemberKickedNotification                 ContentType = 1508
	ContentType_MemberInvitedNotification                ContentType = 1509
	ContentType_MemberEnterNotification                  ContentType = 1510
	ContentType_GroupDismissedNotification               ContentType = 1511
	ContentType_GroupMemberMutedNotification             ContentType = 1512
	ContentType_GroupMemberCancelMutedNotification       ContentType = 1513
	ContentType_GroupMutedNotification                   ContentType = 1514
	ContentType_GroupCancelMutedNotification             ContentType = 1515
	ContentType_GroupMemberInfoSetNotification           ContentType = 1516
	ContentType_GroupMemberSetToAdminNotification        ContentType = 1517
	ContentType_GroupMemberSetToOrdinaryUserNotification ContentType = 1518
	ContentType_GroupInfoSetAnnouncementNotification     ContentType = 1519
	ContentType_GroupInfoSetNameNotification             ContentType = 1520 //  GroupNotificationEnd                     = 1599;
	ContentType_ConversationPrivateChatNotification      ContentType = 1701
	ContentType_ClearConversationNotification            ContentType = 1703
	ContentType_BusinessNotification                     ContentType = 2001
	ContentType_RevokeNotification                       ContentType = 2101
	ContentType_DeleteMsgsNotification                   ContentType = 2102
	ContentType_HasReadReceipt                           ContentType = 2200
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0:    "ContentType_",
		101:  "Text",
		102:  "Picture",
		103:  "Sound",
		104:  "Video",
		105:  "File",
		106:  "AtText",
		107:  "Merger",
		108:  "Card",
		109:  "Location",
		110:  "Custom",
		113:  "Typing",
		114:  "Quote",
		115:  "Face",
		117:  "AdvancedText",
		119:  "CustomMsgNotTriggerConversation",
		120:  "CustomMsgOnlineOnly",
		1201: "FriendApplicationApprovedNotification",
		1202: "FriendApplicationRejectedNotification",
		1203: "FriendApplicationNotification",
		1204: "FriendAddedNotification",
		1205: "FriendDeletedNotification",
		1206: "FriendRemarkSetNotification",
		1207: "BlackAddedNotification",
		1208: "BlackDeletedNotification",
		1209: "FriendInfoUpdatedNotification",
		1210: "FriendsInfoUpdateNotification",
		1300: "ConversationChangeNotification",
		1303: "UserInfoUpdatedNotification",
		1304: "UserStatusChangeNotification",
		1305: "UserCommandAddNotification",
		1306: "UserCommandDeleteNotification",
		1307: "UserCommandUpdateNotification",
		1501: "GroupCreatedNotification",
		1502: "GroupInfoSetNotification",
		1503: "JoinGroupApplicationNotification",
		1504: "MemberQuitNotification",
		1505: "GroupApplicationAcceptedNotification",
		1506: "GroupApplicationRejectedNotification",
		1507: "GroupOwnerTransferredNotification",
		1508: "MemberKickedNotification",
		1509: "MemberInvitedNotification",
		1510: "MemberEnterNotification",
		1511: "GroupDismissedNotification",
		1512: "GroupMemberMutedNotification",
		1513: "GroupMemberCancelMutedNotification",
		1514: "GroupMutedNotification",
		1515: "GroupCancelMutedNotification",
		1516: "GroupMemberInfoSetNotification",
		1517: "GroupMemberSetToAdminNotification",
		1518: "GroupMemberSetToOrdinaryUserNotification",
		1519: "GroupInfoSetAnnouncementNotification",
		1520: "GroupInfoSetNameNotification",
		1701: "ConversationPrivateChatNotification",
		1703: "ClearConversationNotification",
		2001: "BusinessNotification",
		2101: "RevokeNotification",
		2102: "DeleteMsgsNotification",
		2200: "HasReadReceipt",
	}
	ContentType_value = map[string]int32{
		"ContentType_":                             0,
		"Text":                                     101,
		"Picture":                                  102,
		"Sound":                                    103,
		"Video":                                    104,
		"File":                                     105,
		"AtText":                                   106,
		"Merger":                                   107,
		"Card":                                     108,
		"Location":                                 109,
		"Custom":                                   110,
		"Typing":                                   113,
		"Quote":                                    114,
		"Face":                                     115,
		"AdvancedText":                             117,
		"CustomMsgNotTriggerConversation":          119,
		"CustomMsgOnlineOnly":                      120,
		"FriendApplicationApprovedNotification":    1201,
		"FriendApplicationRejectedNotification":    1202,
		"FriendApplicationNotification":            1203,
		"FriendAddedNotification":                  1204,
		"FriendDeletedNotification":                1205,
		"FriendRemarkSetNotification":              1206,
		"BlackAddedNotification":                   1207,
		"BlackDeletedNotification":                 1208,
		"FriendInfoUpdatedNotification":            1209,
		"FriendsInfoUpdateNotification":            1210,
		"ConversationChangeNotification":           1300,
		"UserInfoUpdatedNotification":              1303,
		"UserStatusChangeNotification":             1304,
		"UserCommandAddNotification":               1305,
		"UserCommandDeleteNotification":            1306,
		"UserCommandUpdateNotification":            1307,
		"GroupCreatedNotification":                 1501,
		"GroupInfoSetNotification":                 1502,
		"JoinGroupApplicationNotification":         1503,
		"MemberQuitNotification":                   1504,
		"GroupApplicationAcceptedNotification":     1505,
		"GroupApplicationRejectedNotification":     1506,
		"GroupOwnerTransferredNotification":        1507,
		"MemberKickedNotification":                 1508,
		"MemberInvitedNotification":                1509,
		"MemberEnterNotification":                  1510,
		"GroupDismissedNotification":               1511,
		"GroupMemberMutedNotification":             1512,
		"GroupMemberCancelMutedNotification":       1513,
		"GroupMutedNotification":                   1514,
		"GroupCancelMutedNotification":             1515,
		"GroupMemberInfoSetNotification":           1516,
		"GroupMemberSetToAdminNotification":        1517,
		"GroupMemberSetToOrdinaryUserNotification": 1518,
		"GroupInfoSetAnnouncementNotification":     1519,
		"GroupInfoSetNameNotification":             1520,
		"ConversationPrivateChatNotification":      1701,
		"ClearConversationNotification":            1703,
		"BusinessNotification":                     2001,
		"RevokeNotification":                       2101,
		"DeleteMsgsNotification":                   2102,
		"HasReadReceipt":                           2200,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2a, 0x7c, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x2a,
	0x39, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x73,
	0x67, 0x46, 0x72, 0x6f, 0x6d, 0x5f, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x64, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x79, 0x73,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0xc8, 0x01, 0x2a, 0x9c, 0x01, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x4f, 0x53, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x61, 0x63,
	0x4f, 0x53, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x65, 0x62, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x69, 0x6e, 0x69, 0x57, 0x65, 0x62, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x50, 0x61, 0x64, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x50, 0x61, 0x64, 0x10, 0x09, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x4f, 0x53, 0x10, 0x0b, 0x2a, 0xc1, 0x01, 0x0a, 0x0c, 0x41, 0x70,
	0x70, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x70,
	0x70, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x6c, 0x75, 0x74, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e,
	0x69, 0x41, 0x70, 0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x10, 0x07, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x6f, 0x74, 0x4e, 0x65, 0x74, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x6f,
	0x74, 0x4e, 0x65, 0x74, 0x4d, 0x41, 0x55, 0x49, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x76,
	0x61, 0x6c, 0x6f, 0x6e, 0x69, 0x61, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x74, 0x10, 0x0b,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x76, 0x61, 0x10, 0x0c, 0x2a, 0x67, 0x0a,
	0x09, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x10, 0x05, 0x2a, 0xbe, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x10, 0x66, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x67, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x10, 0x68, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x69, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x74, 0x54, 0x65, 0x78, 0x74, 0x10, 0x6a, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x72, 0x10, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x10,
	0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6d, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x71, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x10, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x63, 0x65, 0x10, 0x73, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x10, 0x75, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x77, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x73, 0x67,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x78, 0x12, 0x2a, 0x0a, 0x25,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb1, 0x09, 0x12, 0x2a, 0x0a, 0x25, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xb2, 0x09, 0x12, 0x22, 0x0a, 0x1d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb3, 0x09, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xb4, 0x09, 0x12, 0x1e, 0x0a, 0x19, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xb5, 0x09, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb6, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xb7, 0x09, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xb8, 0x09, 0x12, 0x22, 0x0a, 0x1d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb9, 0x09, 0x12, 0x22, 0x0a, 0x1d, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xba, 0x09, 0x12, 0x23, 0x0a, 0x1e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x94,
	0x0a, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x97, 0x0a, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x98, 0x0a, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x99, 0x0a, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x9a, 0x0a, 0x12, 0x22, 0x0a, 0x1d, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x9b, 0x0a, 0x12,
	0x1d, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xdd, 0x0b, 0x12, 0x1d,
	0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xde, 0x0b, 0x12, 0x25, 0x0a,
	0x20, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xdf, 0x0b, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75,
	0x69, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe0,
	0x0b, 0x12, 0x29, 0x0a, 0x24, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe1, 0x0b, 0x12, 0x29, 0x0a, 0x24,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe2, 0x0b, 0x12, 0x26, 0x0a, 0x21, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe3, 0x0b, 0x12,
	0x1d, 0x0a, 0x18, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe4, 0x0b, 0x12, 0x1e,
	0x0a, 0x19, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe5, 0x0b, 0x12, 0x1c,
	0x0a, 0x17, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe6, 0x0b, 0x12, 0x1f, 0x0a, 0x1a,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe7, 0x0b, 0x12, 0x21, 0x0a,
	0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe8, 0x0b,
	0x12, 0x27, 0x0a, 0x22, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe9, 0x0b, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xea, 0x0b, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xeb, 0x0b, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xec, 0x0b, 0x12, 0x26,
	0x0a, 0x21, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x54, 0x6f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0xed, 0x0b, 0x12, 0x2d, 0x0a, 0x28, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xee, 0x0b, 0x12, 0x29, 0x0a, 0x24, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xef, 0x0b,
	0x12, 0x21, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0xf0, 0x0b, 0x12, 0x28, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa5, 0x0d, 0x12, 0x22, 0x0a,
	0x1d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa7,
	0x0d, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd1, 0x0f, 0x12, 0x17, 0x0a, 0x12,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xb5, 0x10, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x73, 0x67, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xb6, 0x10, 0x12, 0x13, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x10, 0x98, 0x11, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_common_proto_goTypes = []interface{}{
	(SessionType)(0),  // 0: openim.sdk.common.SessionType
	(MsgFrom)(0),      // 1: openim.sdk.common.MsgFrom
	(Platform)(0),     // 2: openim.sdk.common.Platform
	(AppFramework)(0), // 3: openim.sdk.common.AppFramework
	(MsgStatus)(0),    // 4: openim.sdk.common.MsgStatus
	(ContentType)(0),  // 5: openim.sdk.common.ContentType
}
var file_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
