syntax = "proto3";
package openim.sdk.relation;

import "common.proto";
import "shared.proto";

option csharp_namespace = "OpenIM.Proto";
option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/relation";
option swift_prefix = "";

message GetSpecifiedFriendsReq {
  // specified friend userid list
  repeated string friendUserIDs = 1;
  // @relation_filter_black
  bool filterBlack = 2;
}
message GetSpecifiedFriendsResp {
  // @shared_imfriends
  repeated shared.IMFriend friends = 1;
}

message AddFriendReq {
  // @user_id
  string userID = 1;
  // friend request message
  string reqMsg = 2;
  // friend extension fields
  string ex = 3;
}
message AddFriendResp {}

message GetFriendApplicationReq {
  /**
   * true: user sended friend request.
   * false: user received friend request.
   */
  bool send = 1;
}
message GetFriendApplicationResp {
  // list of corresponding friend request
  repeated shared.IMFriendApplication applications = 1;
}

message HandleFriendApplicationReq {
  // send friend request user id
  string userID = 1;
  // request handle message
  string handleMsg = 2;
  // @common_approval_status
  common.ApprovalStatus status = 3;
}
message HandleFriendApplicationResp {}

message CheckFriendReq {
  // list of check it friend user id
  repeated string friendUserIDs = 1;
}

enum CheckFriendResult {
  // The user is not a friend.
  NotFriend = 0;
  // The user is a friend.
  IsFriend = 1;
}

message CheckFriendInfo {
  // @user_id
  string userID = 1;
  // User relationship result.
  CheckFriendResult result = 2;
}
message CheckFriendResp {
  // checkFriend result list
  repeated CheckFriendInfo result = 1;
}

message DeleteFriendReq {
  // @user_id
  string userID = 1;
}
message DeleteFriendResp {}

message GetFriendsReq {
  // @relation_filter_black
  bool filterBlack = 1;
}
message GetFriendsResp {
  // @shared_imfriends
  repeated shared.IMFriend friends = 1;
}

message GetFriendsPageReq {
  // @relation_filter_black
  bool filterBlack = 1;
  // @common_request_pagination
  openim.sdk.common.RequestPagination pagination = 2;
}
message GetFriendsPageResp {
  // @shared_imfriends
  repeated shared.IMFriend friends = 1;
}

message SearchFriendsReq {
  // Search keyword
  string keyword = 1;
  //  Userid is a search condition
  bool searchUserID = 2;
  //  Nickname is a search condition
  bool searchNickname = 3;
  // Remark is a search condition
  bool searchRemark = 4;
}
enum Relationship {
  // The user is a black
  Black = 0;
  // The user is a friend
  Friend = 1;
}
message SearchFriendsInfo {
  // @shared_imfriend
  shared.IMFriend friend = 1;
  // friend relationship
  Relationship relationship = 2;
}
message SearchFriendsResp {
  // search friend info list
  repeated SearchFriendsInfo friends = 1;
}

message AddBlackReq {
  // @user_id
  string userID = 1;
  // @relation_black_ex
  string ex = 2;
}
message AddBlackResp {}

message DeleteBlackReq {
  // @user_id
  string userID = 1;
}
message DeleteBlackResp {}

message GetBlacksReq {}
message GetBlacksResp {
  // list of black user
  repeated shared.IMBlack blacks = 1;
}

message UpdateFriendReq {
  // @user_id
  string userID = 1;
  // @opt @user_pinned
  optional bool pinned = 2;
  // @opt @user_remark
  optional string remark = 3;
  // @opt friend extension field.
  optional string ex = 4;
}
message UpdateFriendResp {}

service RelationService {
  /**
   * Get specified friend info, including nickname, avatar, remark.
   * This func get it from local. Recommend once to get up to 10000.
   */
  rpc GetSpecifiedFriends(GetSpecifiedFriendsReq) returns (GetSpecifiedFriendsResp);
  /**
   * Send a friend request to add someone as a friend.
   */
  rpc AddFriend(AddFriendReq) returns (AddFriendResp);
  /**
   * Get friend request list, including send of receive.
   * If `send` is true, get user send friend request list, else get user received friend request list.
   */
  rpc GetFriendApplication(GetFriendApplicationReq) returns (GetFriendApplicationResp);
  /**
   * Handle another user sended friend request.
   * Including `approval_statues` have a accept and refuse(1 and -1).
   * If you accept the request, the user is a double direction friendship.
   */
  rpc HandleFriendApplication(HandleFriendApplicationReq) returns (HandleFriendApplicationResp);
  /**
   * Check the user is a friend.
   * If user is not in friend list or in black list, return `NotFriend`.
   * If only check the user is in friend list, please use `GetSpecifiedFriends`.
   * Notice:
   * The friendship is a double direction, so this function can't check you have in other user friend list.
   */
  rpc CheckFriend(CheckFriendReq) returns (CheckFriendResp);
  /**
   *
   *
   */
  rpc DeleteFriend(DeleteFriendReq) returns (DeleteFriendResp);
  /**
   * Delete a friend.
   * Notice:
   * The friendship is a double direction, so this function remove the user from your friend list only.
   */
  rpc GetFriends(GetFriendsReq) returns (GetFriendsResp);
  /**
   * Get friend list by page.
   * Recommend the sum is not hugo.
   */
  rpc GetFriendsPage(GetFriendsPageReq) returns (GetFriendsPageResp);
  /**
   * Search friends by keyword in the friend list.
   * Notice:
   * A search condition must be sepcified.
   * Multiple search conditions are combined with an `OR` relationship.
   */
  rpc SearchFriends(SearchFriendsReq) returns (SearchFriendsResp);
  /**
   * Add a user to the black list.
   * Notice:
   * The mean of you can send message to the user, but the user can't send message to you.
   */
  rpc AddBlack(AddBlackReq) returns (AddBlackResp);
  /**
   * Delete a user from the black list.
   */
  rpc DeleteBlack(DeleteBlackReq) returns (DeleteBlackResp);
  /**
   *  Get the black list.
   */
  rpc GetBlacks(GetBlacksReq) returns (GetBlacksResp);
  /**
   * Update friend info, including remark, pinned, ex field.
   */
  rpc UpdateFriend(UpdateFriendReq) returns (UpdateFriendResp);
}
