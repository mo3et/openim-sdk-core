syntax = "proto3";
package openim.sdk.third;

import "any.proto";
import "common.proto";

option csharp_namespace = "OpenIM.Proto";
option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/third";
option swift_prefix = "";

message UpdateFcmTokenReq {
  // fcm token
  string fcmToken = 1;
  // expire time
  int64 expireTime = 2;
}
message UpdateFcmTokenResp {}

message SetAppBadgeReq {
  // app unread count
  int32 appUnreadCount = 1;
}
message SetAppBadgeResp {}

message UploadFileReq {
  // file path
  string filepath = 1;
  // file name
  string name = 2;
  // http mime type
  string mimeType = 3;
  // file category
  string fileCategory = 4;
}
message UploadFileResp {
  // file url
  string url = 1;
}

message UploadSDKDataReq {
  // upload line
  int32 line = 1;
  // upload extension fields
  string ex = 2;
  // upload mode
  common.UploadSDKDataMode mode = 3;
}
message UploadSDKDataResp {}

message LogKv {
  // key
  string key = 1;
  // value
  google.protobuf.Any value = 2;
}

message LogReq {
  // @common_log_level
  common.LogLevel logLevel = 1;
  // log file path
  string file = 2;
  // log line
  int32 line = 3;
  // log message
  string msg = 4;
  // log error message
  string err = 5;
  // log key-value pairs
  repeated LogKv kvs = 6;
}
message LogResp {}

service ThirdService {
  /**
   * when uploading files to s3, the file stream will not pass through the api server.
   * in the js environment, filepath is a file object
   */
  rpc UploadFile(UploadFileReq) returns (UploadFileResp);
  /**
   * upload sdk data to server. including line, ex, mode.
   * mode have a 3 types. 1: upload log, 2: upload db, 3: upload log and db.
   * upload all log when line is 0.
   */
  rpc UploadSDKData(UploadSDKDataReq) returns (UploadSDKDataResp);
  /**
   * print sdk stabndard log in client. Simplify unified issue analysis and troubleshooting.
   * log level have a 6 types. 0: fatal, 1: panic, 2: error, 3: warn, 4: info, 5: debug, 6: debug with sql.
   * The higher is contained in the lower level output.
   *
   */
  rpc Log(LogReq) returns (LogResp);
  /**
   * update the Firebase user token on the server.
   */
  rpc UpdateFcmToken(UpdateFcmTokenReq) returns (UpdateFcmTokenResp);
  /**
   * set app unread badge, used to display the unread count badge for offline push notifications.
   */
  rpc SetAppBadge(SetAppBadgeReq) returns (SetAppBadgeResp);
}
