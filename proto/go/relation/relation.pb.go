// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.26.0
// source: relation.proto

package relation

import (
	common "github.com/openimsdk/openim-sdk-core/v3/proto/go/common"
	shared "github.com/openimsdk/openim-sdk-core/v3/proto/go/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckFriendResult int32

const (
	CheckFriendResult_NotFriend CheckFriendResult = 0 // not friend
	CheckFriendResult_IsFriend  CheckFriendResult = 1 // is friend
)

// Enum value maps for CheckFriendResult.
var (
	CheckFriendResult_name = map[int32]string{
		0: "NotFriend",
		1: "IsFriend",
	}
	CheckFriendResult_value = map[string]int32{
		"NotFriend": 0,
		"IsFriend":  1,
	}
)

func (x CheckFriendResult) Enum() *CheckFriendResult {
	p := new(CheckFriendResult)
	*p = x
	return p
}

func (x CheckFriendResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckFriendResult) Descriptor() protoreflect.EnumDescriptor {
	return file_relation_proto_enumTypes[0].Descriptor()
}

func (CheckFriendResult) Type() protoreflect.EnumType {
	return &file_relation_proto_enumTypes[0]
}

func (x CheckFriendResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckFriendResult.Descriptor instead.
func (CheckFriendResult) EnumDescriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{0}
}

type Relationship int32

const (
	Relationship_Black  Relationship = 0 // black
	Relationship_Friend Relationship = 1 // friend
)

// Enum value maps for Relationship.
var (
	Relationship_name = map[int32]string{
		0: "Black",
		1: "Friend",
	}
	Relationship_value = map[string]int32{
		"Black":  0,
		"Friend": 1,
	}
)

func (x Relationship) Enum() *Relationship {
	p := new(Relationship)
	*p = x
	return p
}

func (x Relationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Relationship) Descriptor() protoreflect.EnumDescriptor {
	return file_relation_proto_enumTypes[1].Descriptor()
}

func (Relationship) Type() protoreflect.EnumType {
	return &file_relation_proto_enumTypes[1]
}

func (x Relationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Relationship.Descriptor instead.
func (Relationship) EnumDescriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{1}
}

type GetSpecifiedFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendUserIDs []string `protobuf:"bytes,1,rep,name=friendUserIDs,proto3" json:"friendUserIDs"` // specified friend userid list
	FilterBlack   bool     `protobuf:"varint,2,opt,name=filterBlack,proto3" json:"filterBlack"`    // filter black, default false
}

func (x *GetSpecifiedFriendsReq) Reset() {
	*x = GetSpecifiedFriendsReq{}
	mi := &file_relation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpecifiedFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecifiedFriendsReq) ProtoMessage() {}

func (x *GetSpecifiedFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecifiedFriendsReq.ProtoReflect.Descriptor instead.
func (*GetSpecifiedFriendsReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{0}
}

func (x *GetSpecifiedFriendsReq) GetFriendUserIDs() []string {
	if x != nil {
		return x.FriendUserIDs
	}
	return nil
}

func (x *GetSpecifiedFriendsReq) GetFilterBlack() bool {
	if x != nil {
		return x.FilterBlack
	}
	return false
}

type GetSpecifiedFriendsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*shared.IMFriend `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends"` // get specified friend list
}

func (x *GetSpecifiedFriendsResp) Reset() {
	*x = GetSpecifiedFriendsResp{}
	mi := &file_relation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpecifiedFriendsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpecifiedFriendsResp) ProtoMessage() {}

func (x *GetSpecifiedFriendsResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpecifiedFriendsResp.ProtoReflect.Descriptor instead.
func (*GetSpecifiedFriendsResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{1}
}

func (x *GetSpecifiedFriendsResp) GetFriends() []*shared.IMFriend {
	if x != nil {
		return x.Friends
	}
	return nil
}

type AddFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // userid
	ReqMsg string `protobuf:"bytes,2,opt,name=reqMsg,proto3" json:"reqMsg"` // friend request message
	Ex     string `protobuf:"bytes,3,opt,name=ex,proto3" json:"ex"`         // extension fields
}

func (x *AddFriendReq) Reset() {
	*x = AddFriendReq{}
	mi := &file_relation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendReq) ProtoMessage() {}

func (x *AddFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendReq.ProtoReflect.Descriptor instead.
func (*AddFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{2}
}

func (x *AddFriendReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddFriendReq) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *AddFriendReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type AddFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFriendResp) Reset() {
	*x = AddFriendResp{}
	mi := &file_relation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFriendResp) ProtoMessage() {}

func (x *AddFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFriendResp.ProtoReflect.Descriptor instead.
func (*AddFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{3}
}

type GetFriendApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 1. user send friend request.
	// 2. user receive friend request
	Send bool `protobuf:"varint,1,opt,name=send,proto3" json:"send"`
}

func (x *GetFriendApplicationReq) Reset() {
	*x = GetFriendApplicationReq{}
	mi := &file_relation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendApplicationReq) ProtoMessage() {}

func (x *GetFriendApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendApplicationReq.ProtoReflect.Descriptor instead.
func (*GetFriendApplicationReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{4}
}

func (x *GetFriendApplicationReq) GetSend() bool {
	if x != nil {
		return x.Send
	}
	return false
}

type GetFriendApplicationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applications []*shared.IMFriendApplication `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications"` // corresponding friend request list
}

func (x *GetFriendApplicationResp) Reset() {
	*x = GetFriendApplicationResp{}
	mi := &file_relation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendApplicationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendApplicationResp) ProtoMessage() {}

func (x *GetFriendApplicationResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendApplicationResp.ProtoReflect.Descriptor instead.
func (*GetFriendApplicationResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{5}
}

func (x *GetFriendApplicationResp) GetApplications() []*shared.IMFriendApplication {
	if x != nil {
		return x.Applications
	}
	return nil
}

type HandleFriendApplicationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string                `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`                                        // send friend request userid
	HandleMsg string                `protobuf:"bytes,2,opt,name=handleMsg,proto3" json:"handleMsg"`                                  // handle message
	Status    common.ApprovalStatus `protobuf:"varint,3,opt,name=status,proto3,enum=openim.sdk.common.ApprovalStatus" json:"status"` // handle status
}

func (x *HandleFriendApplicationReq) Reset() {
	*x = HandleFriendApplicationReq{}
	mi := &file_relation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleFriendApplicationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleFriendApplicationReq) ProtoMessage() {}

func (x *HandleFriendApplicationReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleFriendApplicationReq.ProtoReflect.Descriptor instead.
func (*HandleFriendApplicationReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{6}
}

func (x *HandleFriendApplicationReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *HandleFriendApplicationReq) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

func (x *HandleFriendApplicationReq) GetStatus() common.ApprovalStatus {
	if x != nil {
		return x.Status
	}
	return common.ApprovalStatus(0)
}

type HandleFriendApplicationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HandleFriendApplicationResp) Reset() {
	*x = HandleFriendApplicationResp{}
	mi := &file_relation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleFriendApplicationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleFriendApplicationResp) ProtoMessage() {}

func (x *HandleFriendApplicationResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleFriendApplicationResp.ProtoReflect.Descriptor instead.
func (*HandleFriendApplicationResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{7}
}

type CheckFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendUserIDs []string `protobuf:"bytes,1,rep,name=friendUserIDs,proto3" json:"friendUserIDs"` // checkFriend userid list
}

func (x *CheckFriendReq) Reset() {
	*x = CheckFriendReq{}
	mi := &file_relation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFriendReq) ProtoMessage() {}

func (x *CheckFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFriendReq.ProtoReflect.Descriptor instead.
func (*CheckFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{8}
}

func (x *CheckFriendReq) GetFriendUserIDs() []string {
	if x != nil {
		return x.FriendUserIDs
	}
	return nil
}

type CheckFriendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string            `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`                                             // checkFriend target userid
	Result CheckFriendResult `protobuf:"varint,2,opt,name=result,proto3,enum=openim.sdk.relation.CheckFriendResult" json:"result"` // checkFriend result
}

func (x *CheckFriendInfo) Reset() {
	*x = CheckFriendInfo{}
	mi := &file_relation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFriendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFriendInfo) ProtoMessage() {}

func (x *CheckFriendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFriendInfo.ProtoReflect.Descriptor instead.
func (*CheckFriendInfo) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{9}
}

func (x *CheckFriendInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckFriendInfo) GetResult() CheckFriendResult {
	if x != nil {
		return x.Result
	}
	return CheckFriendResult_NotFriend
}

type CheckFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*CheckFriendInfo `protobuf:"bytes,1,rep,name=result,proto3" json:"result"` // checkFriend result list
}

func (x *CheckFriendResp) Reset() {
	*x = CheckFriendResp{}
	mi := &file_relation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFriendResp) ProtoMessage() {}

func (x *CheckFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFriendResp.ProtoReflect.Descriptor instead.
func (*CheckFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{10}
}

func (x *CheckFriendResp) GetResult() []*CheckFriendInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // need delete friend userid
}

func (x *DeleteFriendReq) Reset() {
	*x = DeleteFriendReq{}
	mi := &file_relation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendReq) ProtoMessage() {}

func (x *DeleteFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendReq.ProtoReflect.Descriptor instead.
func (*DeleteFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteFriendReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeleteFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteFriendResp) Reset() {
	*x = DeleteFriendResp{}
	mi := &file_relation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendResp) ProtoMessage() {}

func (x *DeleteFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendResp.ProtoReflect.Descriptor instead.
func (*DeleteFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{12}
}

type GetFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterBlack bool `protobuf:"varint,1,opt,name=filterBlack,proto3" json:"filterBlack"` // filter black friend, default false
}

func (x *GetFriendsReq) Reset() {
	*x = GetFriendsReq{}
	mi := &file_relation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsReq) ProtoMessage() {}

func (x *GetFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsReq.ProtoReflect.Descriptor instead.
func (*GetFriendsReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{13}
}

func (x *GetFriendsReq) GetFilterBlack() bool {
	if x != nil {
		return x.FilterBlack
	}
	return false
}

type GetFriendsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*shared.IMFriend `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends"` // get friend list
}

func (x *GetFriendsResp) Reset() {
	*x = GetFriendsResp{}
	mi := &file_relation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsResp) ProtoMessage() {}

func (x *GetFriendsResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsResp.ProtoReflect.Descriptor instead.
func (*GetFriendsResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{14}
}

func (x *GetFriendsResp) GetFriends() []*shared.IMFriend {
	if x != nil {
		return x.Friends
	}
	return nil
}

type GetFriendsPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterBlack bool                      `protobuf:"varint,1,opt,name=filterBlack,proto3" json:"filterBlack"` // filter black friend, default false
	Pagination  *common.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`    // pagination, include pagenumber and pageSize
}

func (x *GetFriendsPageReq) Reset() {
	*x = GetFriendsPageReq{}
	mi := &file_relation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendsPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsPageReq) ProtoMessage() {}

func (x *GetFriendsPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsPageReq.ProtoReflect.Descriptor instead.
func (*GetFriendsPageReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{15}
}

func (x *GetFriendsPageReq) GetFilterBlack() bool {
	if x != nil {
		return x.FilterBlack
	}
	return false
}

func (x *GetFriendsPageReq) GetPagination() *common.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetFriendsPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*shared.IMFriend `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends"` // get friend list
}

func (x *GetFriendsPageResp) Reset() {
	*x = GetFriendsPageResp{}
	mi := &file_relation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendsPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendsPageResp) ProtoMessage() {}

func (x *GetFriendsPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendsPageResp.ProtoReflect.Descriptor instead.
func (*GetFriendsPageResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{16}
}

func (x *GetFriendsPageResp) GetFriends() []*shared.IMFriend {
	if x != nil {
		return x.Friends
	}
	return nil
}

type SearchFriendsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword        string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`                // search keyword
	SearchUserID   bool   `protobuf:"varint,2,opt,name=searchUserID,proto3" json:"searchUserID"`     // search userid is condition
	SearchNickname bool   `protobuf:"varint,3,opt,name=searchNickname,proto3" json:"searchNickname"` // search nickname is condition
	SearchRemark   bool   `protobuf:"varint,4,opt,name=searchRemark,proto3" json:"searchRemark"`     // search remark is condition
}

func (x *SearchFriendsReq) Reset() {
	*x = SearchFriendsReq{}
	mi := &file_relation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFriendsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFriendsReq) ProtoMessage() {}

func (x *SearchFriendsReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFriendsReq.ProtoReflect.Descriptor instead.
func (*SearchFriendsReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{17}
}

func (x *SearchFriendsReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchFriendsReq) GetSearchUserID() bool {
	if x != nil {
		return x.SearchUserID
	}
	return false
}

func (x *SearchFriendsReq) GetSearchNickname() bool {
	if x != nil {
		return x.SearchNickname
	}
	return false
}

func (x *SearchFriendsReq) GetSearchRemark() bool {
	if x != nil {
		return x.SearchRemark
	}
	return false
}

type SearchFriendsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friend       *shared.IMFriend `protobuf:"bytes,1,opt,name=friend,proto3" json:"friend"`                                                    // search friend info
	Relationship Relationship     `protobuf:"varint,2,opt,name=relationship,proto3,enum=openim.sdk.relation.Relationship" json:"relationship"` // friend relationship
}

func (x *SearchFriendsInfo) Reset() {
	*x = SearchFriendsInfo{}
	mi := &file_relation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFriendsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFriendsInfo) ProtoMessage() {}

func (x *SearchFriendsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFriendsInfo.ProtoReflect.Descriptor instead.
func (*SearchFriendsInfo) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{18}
}

func (x *SearchFriendsInfo) GetFriend() *shared.IMFriend {
	if x != nil {
		return x.Friend
	}
	return nil
}

func (x *SearchFriendsInfo) GetRelationship() Relationship {
	if x != nil {
		return x.Relationship
	}
	return Relationship_Black
}

type SearchFriendsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends []*SearchFriendsInfo `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends"` // search friend info list
}

func (x *SearchFriendsResp) Reset() {
	*x = SearchFriendsResp{}
	mi := &file_relation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchFriendsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFriendsResp) ProtoMessage() {}

func (x *SearchFriendsResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFriendsResp.ProtoReflect.Descriptor instead.
func (*SearchFriendsResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{19}
}

func (x *SearchFriendsResp) GetFriends() []*SearchFriendsInfo {
	if x != nil {
		return x.Friends
	}
	return nil
}

type AddBlackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // need add black userid
	Ex     string `protobuf:"bytes,2,opt,name=ex,proto3" json:"ex"`         // extension fields
}

func (x *AddBlackReq) Reset() {
	*x = AddBlackReq{}
	mi := &file_relation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBlackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlackReq) ProtoMessage() {}

func (x *AddBlackReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlackReq.ProtoReflect.Descriptor instead.
func (*AddBlackReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{20}
}

func (x *AddBlackReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *AddBlackReq) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type AddBlackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBlackResp) Reset() {
	*x = AddBlackResp{}
	mi := &file_relation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBlackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlackResp) ProtoMessage() {}

func (x *AddBlackResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlackResp.ProtoReflect.Descriptor instead.
func (*AddBlackResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{21}
}

type DeleteBlackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"` // need delete black userid
}

func (x *DeleteBlackReq) Reset() {
	*x = DeleteBlackReq{}
	mi := &file_relation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlackReq) ProtoMessage() {}

func (x *DeleteBlackReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlackReq.ProtoReflect.Descriptor instead.
func (*DeleteBlackReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteBlackReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type DeleteBlackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBlackResp) Reset() {
	*x = DeleteBlackResp{}
	mi := &file_relation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlackResp) ProtoMessage() {}

func (x *DeleteBlackResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlackResp.ProtoReflect.Descriptor instead.
func (*DeleteBlackResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{23}
}

type GetBlacksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBlacksReq) Reset() {
	*x = GetBlacksReq{}
	mi := &file_relation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlacksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlacksReq) ProtoMessage() {}

func (x *GetBlacksReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlacksReq.ProtoReflect.Descriptor instead.
func (*GetBlacksReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{24}
}

type GetBlacksResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blacks []*shared.IMBlack `protobuf:"bytes,1,rep,name=blacks,proto3" json:"blacks"` // black list info list
}

func (x *GetBlacksResp) Reset() {
	*x = GetBlacksResp{}
	mi := &file_relation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlacksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlacksResp) ProtoMessage() {}

func (x *GetBlacksResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlacksResp.ProtoReflect.Descriptor instead.
func (*GetBlacksResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{25}
}

func (x *GetBlacksResp) GetBlacks() []*shared.IMBlack {
	if x != nil {
		return x.Blacks
	}
	return nil
}

type UpdateFriendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`        // need update friend
	Pinned *bool   `protobuf:"varint,2,opt,name=pinned,proto3,oneof" json:"pinned"` // update friend pinned status
	Remark *string `protobuf:"bytes,3,opt,name=Remark,proto3,oneof" json:"Remark"`  // update friend remark
	Ex     *string `protobuf:"bytes,4,opt,name=ex,proto3,oneof" json:"ex"`          // upate friend extension fields
}

func (x *UpdateFriendReq) Reset() {
	*x = UpdateFriendReq{}
	mi := &file_relation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFriendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendReq) ProtoMessage() {}

func (x *UpdateFriendReq) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendReq.ProtoReflect.Descriptor instead.
func (*UpdateFriendReq) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateFriendReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateFriendReq) GetPinned() bool {
	if x != nil && x.Pinned != nil {
		return *x.Pinned
	}
	return false
}

func (x *UpdateFriendReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *UpdateFriendReq) GetEx() string {
	if x != nil && x.Ex != nil {
		return *x.Ex
	}
	return ""
}

type UpdateFriendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateFriendResp) Reset() {
	*x = UpdateFriendResp{}
	mi := &file_relation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFriendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendResp) ProtoMessage() {}

func (x *UpdateFriendResp) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendResp.ProtoReflect.Descriptor instead.
func (*UpdateFriendResp) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{27}
}

var File_relation_proto protoreflect.FileDescriptor

var file_relation_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x65, 0x6e, 0x64, 0x22, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x1a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d,
	0x73, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a,
	0x1b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x36, 0x0a, 0x0e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x22, 0x69, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x4f, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x29, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x31, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x22, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49,
	0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12,
	0x45, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x07, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x35, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x65, 0x78, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x11,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x22, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x06,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x78, 0x22, 0x12,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x2a, 0x30, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x42, 0x4d, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xaa, 0x02, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x4d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xba, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_relation_proto_rawDescOnce sync.Once
	file_relation_proto_rawDescData = file_relation_proto_rawDesc
)

func file_relation_proto_rawDescGZIP() []byte {
	file_relation_proto_rawDescOnce.Do(func() {
		file_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_relation_proto_rawDescData)
	})
	return file_relation_proto_rawDescData
}

var file_relation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_relation_proto_goTypes = []any{
	(CheckFriendResult)(0),              // 0: openim.sdk.relation.CheckFriendResult
	(Relationship)(0),                   // 1: openim.sdk.relation.Relationship
	(*GetSpecifiedFriendsReq)(nil),      // 2: openim.sdk.relation.GetSpecifiedFriendsReq
	(*GetSpecifiedFriendsResp)(nil),     // 3: openim.sdk.relation.GetSpecifiedFriendsResp
	(*AddFriendReq)(nil),                // 4: openim.sdk.relation.AddFriendReq
	(*AddFriendResp)(nil),               // 5: openim.sdk.relation.AddFriendResp
	(*GetFriendApplicationReq)(nil),     // 6: openim.sdk.relation.GetFriendApplicationReq
	(*GetFriendApplicationResp)(nil),    // 7: openim.sdk.relation.GetFriendApplicationResp
	(*HandleFriendApplicationReq)(nil),  // 8: openim.sdk.relation.HandleFriendApplicationReq
	(*HandleFriendApplicationResp)(nil), // 9: openim.sdk.relation.HandleFriendApplicationResp
	(*CheckFriendReq)(nil),              // 10: openim.sdk.relation.CheckFriendReq
	(*CheckFriendInfo)(nil),             // 11: openim.sdk.relation.CheckFriendInfo
	(*CheckFriendResp)(nil),             // 12: openim.sdk.relation.CheckFriendResp
	(*DeleteFriendReq)(nil),             // 13: openim.sdk.relation.DeleteFriendReq
	(*DeleteFriendResp)(nil),            // 14: openim.sdk.relation.DeleteFriendResp
	(*GetFriendsReq)(nil),               // 15: openim.sdk.relation.GetFriendsReq
	(*GetFriendsResp)(nil),              // 16: openim.sdk.relation.GetFriendsResp
	(*GetFriendsPageReq)(nil),           // 17: openim.sdk.relation.GetFriendsPageReq
	(*GetFriendsPageResp)(nil),          // 18: openim.sdk.relation.GetFriendsPageResp
	(*SearchFriendsReq)(nil),            // 19: openim.sdk.relation.SearchFriendsReq
	(*SearchFriendsInfo)(nil),           // 20: openim.sdk.relation.SearchFriendsInfo
	(*SearchFriendsResp)(nil),           // 21: openim.sdk.relation.SearchFriendsResp
	(*AddBlackReq)(nil),                 // 22: openim.sdk.relation.AddBlackReq
	(*AddBlackResp)(nil),                // 23: openim.sdk.relation.AddBlackResp
	(*DeleteBlackReq)(nil),              // 24: openim.sdk.relation.DeleteBlackReq
	(*DeleteBlackResp)(nil),             // 25: openim.sdk.relation.DeleteBlackResp
	(*GetBlacksReq)(nil),                // 26: openim.sdk.relation.GetBlacksReq
	(*GetBlacksResp)(nil),               // 27: openim.sdk.relation.GetBlacksResp
	(*UpdateFriendReq)(nil),             // 28: openim.sdk.relation.UpdateFriendReq
	(*UpdateFriendResp)(nil),            // 29: openim.sdk.relation.UpdateFriendResp
	(*shared.IMFriend)(nil),             // 30: openim.sdk.shared.IMFriend
	(*shared.IMFriendApplication)(nil),  // 31: openim.sdk.shared.IMFriendApplication
	(common.ApprovalStatus)(0),          // 32: openim.sdk.common.ApprovalStatus
	(*common.RequestPagination)(nil),    // 33: openim.sdk.common.RequestPagination
	(*shared.IMBlack)(nil),              // 34: openim.sdk.shared.IMBlack
}
var file_relation_proto_depIdxs = []int32{
	30, // 0: openim.sdk.relation.GetSpecifiedFriendsResp.friends:type_name -> openim.sdk.shared.IMFriend
	31, // 1: openim.sdk.relation.GetFriendApplicationResp.applications:type_name -> openim.sdk.shared.IMFriendApplication
	32, // 2: openim.sdk.relation.HandleFriendApplicationReq.status:type_name -> openim.sdk.common.ApprovalStatus
	0,  // 3: openim.sdk.relation.CheckFriendInfo.result:type_name -> openim.sdk.relation.CheckFriendResult
	11, // 4: openim.sdk.relation.CheckFriendResp.result:type_name -> openim.sdk.relation.CheckFriendInfo
	30, // 5: openim.sdk.relation.GetFriendsResp.friends:type_name -> openim.sdk.shared.IMFriend
	33, // 6: openim.sdk.relation.GetFriendsPageReq.pagination:type_name -> openim.sdk.common.RequestPagination
	30, // 7: openim.sdk.relation.GetFriendsPageResp.friends:type_name -> openim.sdk.shared.IMFriend
	30, // 8: openim.sdk.relation.SearchFriendsInfo.friend:type_name -> openim.sdk.shared.IMFriend
	1,  // 9: openim.sdk.relation.SearchFriendsInfo.relationship:type_name -> openim.sdk.relation.Relationship
	20, // 10: openim.sdk.relation.SearchFriendsResp.friends:type_name -> openim.sdk.relation.SearchFriendsInfo
	34, // 11: openim.sdk.relation.GetBlacksResp.blacks:type_name -> openim.sdk.shared.IMBlack
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_relation_proto_init() }
func file_relation_proto_init() {
	if File_relation_proto != nil {
		return
	}
	file_relation_proto_msgTypes[26].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relation_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relation_proto_goTypes,
		DependencyIndexes: file_relation_proto_depIdxs,
		EnumInfos:         file_relation_proto_enumTypes,
		MessageInfos:      file_relation_proto_msgTypes,
	}.Build()
	File_relation_proto = out.File
	file_relation_proto_rawDesc = nil
	file_relation_proto_goTypes = nil
	file_relation_proto_depIdxs = nil
}
