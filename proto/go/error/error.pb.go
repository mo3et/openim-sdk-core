// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: error.proto

package error

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	// NoError is the zero value of ErrorCode.
	ErrorCode_NoError ErrorCode = 0
	// Server internal error. Usually due to internal network issues. Check if all server nodes are running properly.
	ErrorCode_ServerInternal ErrorCode = 500
	// Args error. Need check body args and header args is correct.
	ErrorCode_Args ErrorCode = 1001
	// No permission. Uaually header token is not correct or permission d.
	ErrorCode_NoPermission ErrorCode = 1002
	// Database duplicate key.
	ErrorCode_DuplicateKey ErrorCode = 1003
	// Database record not found.
	ErrorCode_RecordNotFound ErrorCode = 1004
	// Token expired.
	ErrorCode_TokenExpired ErrorCode = 1501
	// Token invalid.
	ErrorCode_TokenInvalid ErrorCode = 1502
	// Token format error.
	ErrorCode_TokenMalformed ErrorCode = 1503
	// Token not valid yet.
	ErrorCode_TokenNotValidYet ErrorCode = 1504
	// Token unknown.
	ErrorCode_TokenUnknown ErrorCode = 1505
	// Token kicked, is invalid.
	ErrorCode_TokenKicked ErrorCode = 1506
	// Token not exist.
	ErrorCode_TokenNotExist ErrorCode = 1507
	// SDK network request error.
	ErrorCode_SdkNetwork ErrorCode = 10000
	// SDK network timeout.
	ErrorCode_SdkNetworkTimeout ErrorCode = 10001
	// SDK args error.
	ErrorCode_SdkArgs ErrorCode = 10002
	// SDK context deadline exceeded, usually user is logout.
	ErrorCode_SdkCtxDeadlineExceeded ErrorCode = 10003
	// SDK resource load not complete, usually is not init or login interface will not callback success.
	ErrorCode_SdkResourceLoadNotComplete ErrorCode = 10004
	// SDK unknown error. Need check error msg find reason.
	ErrorCode_SdkUnknownCode ErrorCode = 10005
	// SDK internal error. Need check error msg find reason.
	ErrorCode_SdkInternal ErrorCode = 10006
	// SDK func not found.
	ErrorCode_SdkFuncNotFound ErrorCode = 10007
	// SDK not init.
	ErrorCode_SdkNotInit ErrorCode = 10008
	// SDK not login.
	ErrorCode_SdkNotLogin ErrorCode = 10009
	// SDK user id not exist or not register.
	ErrorCode_SdkUserIDNotFound ErrorCode = 10100
	// SDK user login out.
	ErrorCode_SdkLoginOut ErrorCode = 10101
	// User repeated login. You can use `getloginstatus` to check user login status, avoid repeat login.
	ErrorCode_SdkLoginRepeat ErrorCode = 10102
	// SDK need upload file not found.
	ErrorCode_SdkFileNotFound ErrorCode = 10200
	// SDK message decompression error.
	ErrorCode_SdkMsgDeCompression ErrorCode = 10201
	// SDK message decode error.
	ErrorCode_SdkMsgDecodeBinaryWs ErrorCode = 10202
	// SDK not support long connection binary protocol.
	ErrorCode_SdkMsgBinaryTypeNotSupport  ErrorCode = 10203
	ErrorCode_SdkMsgRepeat                ErrorCode = 10204
	ErrorCode_SdkMsgContentTypeNotSupport ErrorCode = 10205
	ErrorCode_SdkMsgHasNoSeq              ErrorCode = 10206
	ErrorCode_SdkNotSupportOpt            ErrorCode = 10301
	ErrorCode_SdkNotSupportType           ErrorCode = 10302
	ErrorCode_SdkUnreadCount              ErrorCode = 10303
	ErrorCode_SdkGroupIDNotFound          ErrorCode = 10400
	ErrorCode_SdkGroupType                ErrorCode = 10401
	ErrorCode_SrvUserIDNotFound           ErrorCode = 1101
	ErrorCode_SrvRegisteredAlready        ErrorCode = 1102
	ErrorCode_SrvGroupIDNotFound          ErrorCode = 1201
	ErrorCode_SrvGroupIDExisted           ErrorCode = 1202
	ErrorCode_SrvNotInGroupYet            ErrorCode = 1203
	ErrorCode_SrvDismissedAlready         ErrorCode = 1204
	ErrorCode_SrvGroupTypeNotSupport      ErrorCode = 1205
	ErrorCode_SrvGroupRequestHandled      ErrorCode = 1206
	ErrorCode_SrvCanNotAddYourself        ErrorCode = 1301
	ErrorCode_SrvBlockedByPeer            ErrorCode = 1302
	ErrorCode_SrvNotPeersFriend           ErrorCode = 1303
	ErrorCode_SrvRelationshipAlready      ErrorCode = 1304
	ErrorCode_SrvMessageHasReadDisable    ErrorCode = 1401
	ErrorCode_SrvMutedInGroup             ErrorCode = 1402
	ErrorCode_SrvMutedGroup               ErrorCode = 1403
	ErrorCode_SrvMsgAlreadyRevoke         ErrorCode = 1404
	ErrorCode_SrvConnOverMaxNumLimit      ErrorCode = 1601
	ErrorCode_SrvConnArgs                 ErrorCode = 1602
	ErrorCode_SrvPushMsg                  ErrorCode = 1603
	ErrorCode_SrvIOSBackgroundPush        ErrorCode = 1604
	ErrorCode_SrvFileUploadedExpired      ErrorCode = 1701
	ErrorCode_SrvDatabase                 ErrorCode = 90002
	ErrorCode_SrvNetwork                  ErrorCode = 90004
	ErrorCode_SrvData                     ErrorCode = 90007
	ErrorCode_SrvCallback                 ErrorCode = 80000
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:     "NoError",
		500:   "ServerInternal",
		1001:  "Args",
		1002:  "NoPermission",
		1003:  "DuplicateKey",
		1004:  "RecordNotFound",
		1501:  "TokenExpired",
		1502:  "TokenInvalid",
		1503:  "TokenMalformed",
		1504:  "TokenNotValidYet",
		1505:  "TokenUnknown",
		1506:  "TokenKicked",
		1507:  "TokenNotExist",
		10000: "SdkNetwork",
		10001: "SdkNetworkTimeout",
		10002: "SdkArgs",
		10003: "SdkCtxDeadlineExceeded",
		10004: "SdkResourceLoadNotComplete",
		10005: "SdkUnknownCode",
		10006: "SdkInternal",
		10007: "SdkFuncNotFound",
		10008: "SdkNotInit",
		10009: "SdkNotLogin",
		10100: "SdkUserIDNotFound",
		10101: "SdkLoginOut",
		10102: "SdkLoginRepeat",
		10200: "SdkFileNotFound",
		10201: "SdkMsgDeCompression",
		10202: "SdkMsgDecodeBinaryWs",
		10203: "SdkMsgBinaryTypeNotSupport",
		10204: "SdkMsgRepeat",
		10205: "SdkMsgContentTypeNotSupport",
		10206: "SdkMsgHasNoSeq",
		10301: "SdkNotSupportOpt",
		10302: "SdkNotSupportType",
		10303: "SdkUnreadCount",
		10400: "SdkGroupIDNotFound",
		10401: "SdkGroupType",
		1101:  "SrvUserIDNotFound",
		1102:  "SrvRegisteredAlready",
		1201:  "SrvGroupIDNotFound",
		1202:  "SrvGroupIDExisted",
		1203:  "SrvNotInGroupYet",
		1204:  "SrvDismissedAlready",
		1205:  "SrvGroupTypeNotSupport",
		1206:  "SrvGroupRequestHandled",
		1301:  "SrvCanNotAddYourself",
		1302:  "SrvBlockedByPeer",
		1303:  "SrvNotPeersFriend",
		1304:  "SrvRelationshipAlready",
		1401:  "SrvMessageHasReadDisable",
		1402:  "SrvMutedInGroup",
		1403:  "SrvMutedGroup",
		1404:  "SrvMsgAlreadyRevoke",
		1601:  "SrvConnOverMaxNumLimit",
		1602:  "SrvConnArgs",
		1603:  "SrvPushMsg",
		1604:  "SrvIOSBackgroundPush",
		1701:  "SrvFileUploadedExpired",
		90002: "SrvDatabase",
		90004: "SrvNetwork",
		90007: "SrvData",
		80000: "SrvCallback",
	}
	ErrorCode_value = map[string]int32{
		"NoError":                     0,
		"ServerInternal":              500,
		"Args":                        1001,
		"NoPermission":                1002,
		"DuplicateKey":                1003,
		"RecordNotFound":              1004,
		"TokenExpired":                1501,
		"TokenInvalid":                1502,
		"TokenMalformed":              1503,
		"TokenNotValidYet":            1504,
		"TokenUnknown":                1505,
		"TokenKicked":                 1506,
		"TokenNotExist":               1507,
		"SdkNetwork":                  10000,
		"SdkNetworkTimeout":           10001,
		"SdkArgs":                     10002,
		"SdkCtxDeadlineExceeded":      10003,
		"SdkResourceLoadNotComplete":  10004,
		"SdkUnknownCode":              10005,
		"SdkInternal":                 10006,
		"SdkFuncNotFound":             10007,
		"SdkNotInit":                  10008,
		"SdkNotLogin":                 10009,
		"SdkUserIDNotFound":           10100,
		"SdkLoginOut":                 10101,
		"SdkLoginRepeat":              10102,
		"SdkFileNotFound":             10200,
		"SdkMsgDeCompression":         10201,
		"SdkMsgDecodeBinaryWs":        10202,
		"SdkMsgBinaryTypeNotSupport":  10203,
		"SdkMsgRepeat":                10204,
		"SdkMsgContentTypeNotSupport": 10205,
		"SdkMsgHasNoSeq":              10206,
		"SdkNotSupportOpt":            10301,
		"SdkNotSupportType":           10302,
		"SdkUnreadCount":              10303,
		"SdkGroupIDNotFound":          10400,
		"SdkGroupType":                10401,
		"SrvUserIDNotFound":           1101,
		"SrvRegisteredAlready":        1102,
		"SrvGroupIDNotFound":          1201,
		"SrvGroupIDExisted":           1202,
		"SrvNotInGroupYet":            1203,
		"SrvDismissedAlready":         1204,
		"SrvGroupTypeNotSupport":      1205,
		"SrvGroupRequestHandled":      1206,
		"SrvCanNotAddYourself":        1301,
		"SrvBlockedByPeer":            1302,
		"SrvNotPeersFriend":           1303,
		"SrvRelationshipAlready":      1304,
		"SrvMessageHasReadDisable":    1401,
		"SrvMutedInGroup":             1402,
		"SrvMutedGroup":               1403,
		"SrvMsgAlreadyRevoke":         1404,
		"SrvConnOverMaxNumLimit":      1601,
		"SrvConnArgs":                 1602,
		"SrvPushMsg":                  1603,
		"SrvIOSBackgroundPush":        1604,
		"SrvFileUploadedExpired":      1701,
		"SrvDatabase":                 90002,
		"SrvNetwork":                  90004,
		"SrvData":                     90007,
		"SrvCallback":                 80000,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_error_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_error_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_error_proto_rawDescGZIP(), []int{0}
}

var File_error_proto protoreflect.FileDescriptor

var file_error_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a,
	0x90, 0x0b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0xf4, 0x03, 0x12,
	0x09, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x10, 0xe9, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x4e, 0x6f,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xea, 0x07, 0x12, 0x11, 0x0a,
	0x0c, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0xeb, 0x07,
	0x12, 0x13, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0xec, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xdd, 0x0b, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xde, 0x0b, 0x12, 0x13, 0x0a, 0x0e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x10, 0xdf, 0x0b,
	0x12, 0x15, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x59, 0x65, 0x74, 0x10, 0xe0, 0x0b, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0xe1, 0x0b, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x10, 0xe2, 0x0b, 0x12, 0x12, 0x0a, 0x0d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xe3, 0x0b,
	0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x64, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x90,
	0x4e, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x64, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x91, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x64, 0x6b,
	0x41, 0x72, 0x67, 0x73, 0x10, 0x92, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x64, 0x6b, 0x43, 0x74,
	0x78, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x10, 0x93, 0x4e, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x94, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x64, 0x6b, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x95, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x64,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x96, 0x4e, 0x12, 0x14, 0x0a, 0x0f,
	0x53, 0x64, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0x97, 0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74,
	0x10, 0x98, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x10, 0x99, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x64, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xf4, 0x4e, 0x12, 0x10, 0x0a,
	0x0b, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x10, 0xf5, 0x4e, 0x12,
	0x13, 0x0a, 0x0e, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x10, 0xf6, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x64, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xd8, 0x4f, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x64,
	0x6b, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0xd9, 0x4f, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x64, 0x6b, 0x4d, 0x73, 0x67, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x57, 0x73, 0x10, 0xda, 0x4f, 0x12,
	0x1f, 0x0a, 0x1a, 0x53, 0x64, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0xdb, 0x4f,
	0x12, 0x11, 0x0a, 0x0c, 0x53, 0x64, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x10, 0xdc, 0x4f, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x64, 0x6b, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x10, 0xdd, 0x4f, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x64, 0x6b, 0x4d, 0x73, 0x67, 0x48,
	0x61, 0x73, 0x4e, 0x6f, 0x53, 0x65, 0x71, 0x10, 0xde, 0x4f, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x64,
	0x6b, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x10, 0xbd,
	0x50, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x64, 0x6b, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xbe, 0x50, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x64, 0x6b,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xbf, 0x50, 0x12, 0x17,
	0x0a, 0x12, 0x53, 0x64, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x10, 0xa0, 0x51, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x64, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0xa1, 0x51, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x72,
	0x76, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0xcd, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x72, 0x76, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0xce, 0x08, 0x12, 0x17, 0x0a,
	0x12, 0x53, 0x72, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0xb1, 0x09, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x72, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10, 0xb2, 0x09, 0x12, 0x15,
	0x0a, 0x10, 0x53, 0x72, 0x76, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x59,
	0x65, 0x74, 0x10, 0xb3, 0x09, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x72, 0x76, 0x44, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0xb4, 0x09, 0x12,
	0x1b, 0x0a, 0x16, 0x53, 0x72, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0xb5, 0x09, 0x12, 0x1b, 0x0a, 0x16,
	0x53, 0x72, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x10, 0xb6, 0x09, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x72, 0x76,
	0x43, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x59, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x6c,
	0x66, 0x10, 0x95, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x72, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x10, 0x96, 0x0a, 0x12, 0x16, 0x0a, 0x11, 0x53,
	0x72, 0x76, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x10, 0x97, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x72, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0x98, 0x0a,
	0x12, 0x1d, 0x0a, 0x18, 0x53, 0x72, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0xf9, 0x0a, 0x12,
	0x14, 0x0a, 0x0f, 0x53, 0x72, 0x76, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0xfa, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x72, 0x76, 0x4d, 0x75, 0x74, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xfb, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x72, 0x76,
	0x4d, 0x73, 0x67, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x10, 0xfc, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x72, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xc1, 0x0c,
	0x12, 0x10, 0x0a, 0x0b, 0x53, 0x72, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x10,
	0xc2, 0x0c, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x72, 0x76, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67,
	0x10, 0xc3, 0x0c, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x72, 0x76, 0x49, 0x4f, 0x53, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x73, 0x68, 0x10, 0xc4, 0x0c, 0x12, 0x1b,
	0x0a, 0x16, 0x53, 0x72, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xa5, 0x0d, 0x12, 0x11, 0x0a, 0x0b, 0x53,
	0x72, 0x76, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x10, 0x92, 0xbf, 0x05, 0x12, 0x10,
	0x0a, 0x0a, 0x53, 0x72, 0x76, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x94, 0xbf, 0x05,
	0x12, 0x0d, 0x0a, 0x07, 0x53, 0x72, 0x76, 0x44, 0x61, 0x74, 0x61, 0x10, 0x97, 0xbf, 0x05, 0x12,
	0x11, 0x0a, 0x0b, 0x53, 0x72, 0x76, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x80,
	0xf1, 0x04, 0x42, 0x4a, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0xaa, 0x02, 0x0c, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xba, 0x02, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_error_proto_rawDescOnce sync.Once
	file_error_proto_rawDescData = file_error_proto_rawDesc
)

func file_error_proto_rawDescGZIP() []byte {
	file_error_proto_rawDescOnce.Do(func() {
		file_error_proto_rawDescData = protoimpl.X.CompressGZIP(file_error_proto_rawDescData)
	})
	return file_error_proto_rawDescData
}

var file_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_error_proto_goTypes = []any{
	(ErrorCode)(0), // 0: openim.sdk.error.ErrorCode
}
var file_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_error_proto_init() }
func file_error_proto_init() {
	if File_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_error_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_error_proto_goTypes,
		DependencyIndexes: file_error_proto_depIdxs,
		EnumInfos:         file_error_proto_enumTypes,
	}.Build()
	File_error_proto = out.File
	file_error_proto_rawDesc = nil
	file_error_proto_goTypes = nil
	file_error_proto_depIdxs = nil
}
