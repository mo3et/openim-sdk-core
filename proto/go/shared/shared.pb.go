// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: shared.proto

package shared

import (
	common "github.com/openimsdk/openim-sdk-core/v3/proto/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupStatus int32

const (
	GroupStatus_Default   GroupStatus = 0
	GroupStatus_Dismissed GroupStatus = 2
)

// Enum value maps for GroupStatus.
var (
	GroupStatus_name = map[int32]string{
		0: "Default",
		2: "Dismissed",
	}
	GroupStatus_value = map[string]int32{
		"Default":   0,
		"Dismissed": 2,
	}
)

func (x GroupStatus) Enum() *GroupStatus {
	p := new(GroupStatus)
	*p = x
	return p
}

func (x GroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[0].Descriptor()
}

func (GroupStatus) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[0]
}

func (x GroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupStatus.Descriptor instead.
func (GroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{0}
}

type GroupFilter int32

const (
	GroupFilter_All                   GroupFilter = 0
	GroupFilter_Owner                 GroupFilter = 1
	GroupFilter_Admin                 GroupFilter = 2
	GroupFilter_OrdinaryUsers         GroupFilter = 3
	GroupFilter_AdminAndOrdinaryUsers GroupFilter = 4
	GroupFilter_OwnerAndAdmin         GroupFilter = 5
)

// Enum value maps for GroupFilter.
var (
	GroupFilter_name = map[int32]string{
		0: "All",
		1: "Owner",
		2: "Admin",
		3: "OrdinaryUsers",
		4: "AdminAndOrdinaryUsers",
		5: "OwnerAndAdmin",
	}
	GroupFilter_value = map[string]int32{
		"All":                   0,
		"Owner":                 1,
		"Admin":                 2,
		"OrdinaryUsers":         3,
		"AdminAndOrdinaryUsers": 4,
		"OwnerAndAdmin":         5,
	}
)

func (x GroupFilter) Enum() *GroupFilter {
	p := new(GroupFilter)
	*p = x
	return p
}

func (x GroupFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[1].Descriptor()
}

func (GroupFilter) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[1]
}

func (x GroupFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupFilter.Descriptor instead.
func (GroupFilter) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{1}
}

type IMUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname         string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL          string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Ex               string `protobuf:"bytes,4,opt,name=ex,proto3" json:"ex,omitempty"`
	CreateTime       int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	AppMangerLevel   int32  `protobuf:"varint,6,opt,name=appMangerLevel,proto3" json:"appMangerLevel,omitempty"`
	GlobalRecvMsgOpt int32  `protobuf:"varint,7,opt,name=globalRecvMsgOpt,proto3" json:"globalRecvMsgOpt,omitempty"`
	Attached         string `protobuf:"bytes,8,opt,name=attached,proto3" json:"attached,omitempty"`
}

func (x *IMUser) Reset() {
	*x = IMUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMUser) ProtoMessage() {}

func (x *IMUser) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMUser.ProtoReflect.Descriptor instead.
func (*IMUser) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{0}
}

func (x *IMUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMUser) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMUser) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMUser) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMUser) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMUser) GetAppMangerLevel() int32 {
	if x != nil {
		return x.AppMangerLevel
	}
	return 0
}

func (x *IMUser) GetGlobalRecvMsgOpt() int32 {
	if x != nil {
		return x.GlobalRecvMsgOpt
	}
	return 0
}

func (x *IMUser) GetAttached() string {
	if x != nil {
		return x.Attached
	}
	return ""
}

type CommandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Type       int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	CreateTime int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Uuid       string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Value      string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Ex         string `protobuf:"bytes,6,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *CommandInfo) Reset() {
	*x = CommandInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInfo) ProtoMessage() {}

func (x *CommandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInfo.ProtoReflect.Descriptor instead.
func (*CommandInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{1}
}

func (x *CommandInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CommandInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommandInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CommandInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CommandInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommandInfo) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type IMFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID    string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
	FriendUserID   string `protobuf:"bytes,2,opt,name=friendUserID,proto3" json:"friendUserID,omitempty"`
	Remark         string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	CreateTime     int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	AddSource      int32  `protobuf:"varint,5,opt,name=addSource,proto3" json:"addSource,omitempty"`
	OperatorUserID string `protobuf:"bytes,6,opt,name=operatorUserID,proto3" json:"operatorUserID,omitempty"`
	Nickname       string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL        string `protobuf:"bytes,8,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Ex             string `protobuf:"bytes,9,opt,name=ex,proto3" json:"ex,omitempty"`
	AttachedInfo   string `protobuf:"bytes,10,opt,name=attachedInfo,proto3" json:"attachedInfo,omitempty"`
	IsPinned       bool   `protobuf:"varint,11,opt,name=isPinned,proto3" json:"isPinned,omitempty"`
}

func (x *IMFriend) Reset() {
	*x = IMFriend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMFriend) ProtoMessage() {}

func (x *IMFriend) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMFriend.ProtoReflect.Descriptor instead.
func (*IMFriend) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{2}
}

func (x *IMFriend) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMFriend) GetFriendUserID() string {
	if x != nil {
		return x.FriendUserID
	}
	return ""
}

func (x *IMFriend) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *IMFriend) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMFriend) GetAddSource() int32 {
	if x != nil {
		return x.AddSource
	}
	return 0
}

func (x *IMFriend) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *IMFriend) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMFriend) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMFriend) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMFriend) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

func (x *IMFriend) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

type IMBlack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID    string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
	BlockUserID    string `protobuf:"bytes,2,opt,name=blockUserID,proto3" json:"blockUserID,omitempty"`
	Nickname       string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL        string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	CreateTime     int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	AddSource      int32  `protobuf:"varint,6,opt,name=addSource,proto3" json:"addSource,omitempty"`
	OperatorUserID string `protobuf:"bytes,7,opt,name=operatorUserID,proto3" json:"operatorUserID,omitempty"`
	Ex             string `protobuf:"bytes,8,opt,name=ex,proto3" json:"ex,omitempty"`
	Attached       string `protobuf:"bytes,9,opt,name=attached,proto3" json:"attached,omitempty"`
}

func (x *IMBlack) Reset() {
	*x = IMBlack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMBlack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMBlack) ProtoMessage() {}

func (x *IMBlack) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMBlack.ProtoReflect.Descriptor instead.
func (*IMBlack) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{3}
}

func (x *IMBlack) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMBlack) GetBlockUserID() string {
	if x != nil {
		return x.BlockUserID
	}
	return ""
}

func (x *IMBlack) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMBlack) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMBlack) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMBlack) GetAddSource() int32 {
	if x != nil {
		return x.AddSource
	}
	return 0
}

func (x *IMBlack) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *IMBlack) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMBlack) GetAttached() string {
	if x != nil {
		return x.Attached
	}
	return ""
}

type IMFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID    string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	FromNickname  string `protobuf:"bytes,2,opt,name=fromNickname,proto3" json:"fromNickname,omitempty"`
	FromFaceURL   string `protobuf:"bytes,3,opt,name=fromFaceURL,proto3" json:"fromFaceURL,omitempty"`
	ToUserID      string `protobuf:"bytes,4,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
	ToNickname    string `protobuf:"bytes,5,opt,name=toNickname,proto3" json:"toNickname,omitempty"`
	ToFaceURL     string `protobuf:"bytes,6,opt,name=toFaceURL,proto3" json:"toFaceURL,omitempty"`
	HandleResult  int32  `protobuf:"varint,7,opt,name=handleResult,proto3" json:"handleResult,omitempty"`
	ReqMsg        string `protobuf:"bytes,8,opt,name=reqMsg,proto3" json:"reqMsg,omitempty"`
	CreateTime    int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	HandlerUserID string `protobuf:"bytes,10,opt,name=handlerUserID,proto3" json:"handlerUserID,omitempty"`
	HandleMsg     string `protobuf:"bytes,11,opt,name=handleMsg,proto3" json:"handleMsg,omitempty"`
	HandleTime    int64  `protobuf:"varint,12,opt,name=handleTime,proto3" json:"handleTime,omitempty"`
	Ex            string `protobuf:"bytes,13,opt,name=ex,proto3" json:"ex,omitempty"`
	Attached      string `protobuf:"bytes,14,opt,name=attached,proto3" json:"attached,omitempty"`
}

func (x *IMFriendRequest) Reset() {
	*x = IMFriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMFriendRequest) ProtoMessage() {}

func (x *IMFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMFriendRequest.ProtoReflect.Descriptor instead.
func (*IMFriendRequest) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{4}
}

func (x *IMFriendRequest) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *IMFriendRequest) GetFromNickname() string {
	if x != nil {
		return x.FromNickname
	}
	return ""
}

func (x *IMFriendRequest) GetFromFaceURL() string {
	if x != nil {
		return x.FromFaceURL
	}
	return ""
}

func (x *IMFriendRequest) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *IMFriendRequest) GetToNickname() string {
	if x != nil {
		return x.ToNickname
	}
	return ""
}

func (x *IMFriendRequest) GetToFaceURL() string {
	if x != nil {
		return x.ToFaceURL
	}
	return ""
}

func (x *IMFriendRequest) GetHandleResult() int32 {
	if x != nil {
		return x.HandleResult
	}
	return 0
}

func (x *IMFriendRequest) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *IMFriendRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMFriendRequest) GetHandlerUserID() string {
	if x != nil {
		return x.HandlerUserID
	}
	return ""
}

func (x *IMFriendRequest) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

func (x *IMFriendRequest) GetHandleTime() int64 {
	if x != nil {
		return x.HandleTime
	}
	return 0
}

func (x *IMFriendRequest) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMFriendRequest) GetAttached() string {
	if x != nil {
		return x.Attached
	}
	return ""
}

type IMGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID                string      `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	GroupName              string      `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Notification           string      `protobuf:"bytes,3,opt,name=notification,proto3" json:"notification,omitempty"`
	Introduction           string      `protobuf:"bytes,4,opt,name=introduction,proto3" json:"introduction,omitempty"`
	FaceURL                string      `protobuf:"bytes,5,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	OwnerUserID            string      `protobuf:"bytes,6,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
	CreateTime             int64       `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	MemberCount            int64       `protobuf:"varint,8,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	Ex                     string      `protobuf:"bytes,9,opt,name=ex,proto3" json:"ex,omitempty"`
	Status                 GroupStatus `protobuf:"varint,10,opt,name=status,proto3,enum=openim.sdk.shared.GroupStatus" json:"status,omitempty"`
	CreatorUserID          string      `protobuf:"bytes,11,opt,name=creatorUserID,proto3" json:"creatorUserID,omitempty"`
	NeedVerification       int32       `protobuf:"varint,12,opt,name=needVerification,proto3" json:"needVerification,omitempty"`
	LookMemberInfo         int32       `protobuf:"varint,13,opt,name=lookMemberInfo,proto3" json:"lookMemberInfo,omitempty"`
	ApplyMemberFriend      int32       `protobuf:"varint,14,opt,name=applyMemberFriend,proto3" json:"applyMemberFriend,omitempty"`
	NotificationUpdateTime int64       `protobuf:"varint,15,opt,name=notificationUpdateTime,proto3" json:"notificationUpdateTime,omitempty"`
	NotificationUserID     string      `protobuf:"bytes,16,opt,name=notificationUserID,proto3" json:"notificationUserID,omitempty"`
	AttachedInfo           string      `protobuf:"bytes,17,opt,name=attachedInfo,proto3" json:"attachedInfo,omitempty"`
}

func (x *IMGroup) Reset() {
	*x = IMGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMGroup) ProtoMessage() {}

func (x *IMGroup) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMGroup.ProtoReflect.Descriptor instead.
func (*IMGroup) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{5}
}

func (x *IMGroup) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *IMGroup) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *IMGroup) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *IMGroup) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMGroup) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMGroup) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMGroup) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *IMGroup) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMGroup) GetStatus() GroupStatus {
	if x != nil {
		return x.Status
	}
	return GroupStatus_Default
}

func (x *IMGroup) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *IMGroup) GetNeedVerification() int32 {
	if x != nil {
		return x.NeedVerification
	}
	return 0
}

func (x *IMGroup) GetLookMemberInfo() int32 {
	if x != nil {
		return x.LookMemberInfo
	}
	return 0
}

func (x *IMGroup) GetApplyMemberFriend() int32 {
	if x != nil {
		return x.ApplyMemberFriend
	}
	return 0
}

func (x *IMGroup) GetNotificationUpdateTime() int64 {
	if x != nil {
		return x.NotificationUpdateTime
	}
	return 0
}

func (x *IMGroup) GetNotificationUserID() string {
	if x != nil {
		return x.NotificationUserID
	}
	return ""
}

func (x *IMGroup) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

type IMGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID        string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	UserID         string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname       string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL        string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	RoleLevel      int32  `protobuf:"varint,5,opt,name=roleLevel,proto3" json:"roleLevel,omitempty"`
	JoinTime       int64  `protobuf:"varint,6,opt,name=joinTime,proto3" json:"joinTime,omitempty"`
	JoinSource     int32  `protobuf:"varint,7,opt,name=joinSource,proto3" json:"joinSource,omitempty"`
	InviterUserID  string `protobuf:"bytes,8,opt,name=inviterUserID,proto3" json:"inviterUserID,omitempty"`
	MuteEndTime    int64  `protobuf:"varint,9,opt,name=muteEndTime,proto3" json:"muteEndTime,omitempty"`
	OperatorUserID string `protobuf:"bytes,10,opt,name=operatorUserID,proto3" json:"operatorUserID,omitempty"`
	Ex             string `protobuf:"bytes,11,opt,name=ex,proto3" json:"ex,omitempty"`
	AttachedInfo   string `protobuf:"bytes,12,opt,name=attachedInfo,proto3" json:"attachedInfo,omitempty"`
}

func (x *IMGroupMember) Reset() {
	*x = IMGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMGroupMember) ProtoMessage() {}

func (x *IMGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMGroupMember.ProtoReflect.Descriptor instead.
func (*IMGroupMember) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{6}
}

func (x *IMGroupMember) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMGroupMember) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMGroupMember) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMGroupMember) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMGroupMember) GetRoleLevel() int32 {
	if x != nil {
		return x.RoleLevel
	}
	return 0
}

func (x *IMGroupMember) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *IMGroupMember) GetJoinSource() int32 {
	if x != nil {
		return x.JoinSource
	}
	return 0
}

func (x *IMGroupMember) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

func (x *IMGroupMember) GetMuteEndTime() int64 {
	if x != nil {
		return x.MuteEndTime
	}
	return 0
}

func (x *IMGroupMember) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *IMGroupMember) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMGroupMember) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

type IMGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID       string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	GroupName     string `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Notification  string `protobuf:"bytes,3,opt,name=notification,proto3" json:"notification,omitempty"`
	Introduction  string `protobuf:"bytes,4,opt,name=introduction,proto3" json:"introduction,omitempty"`
	GroupFaceURL  string `protobuf:"bytes,5,opt,name=groupFaceURL,proto3" json:"groupFaceURL,omitempty"`
	CreateTime    int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Status        int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreatorUserID string `protobuf:"bytes,8,opt,name=creatorUserID,proto3" json:"creatorUserID,omitempty"`
	GroupType     int32  `protobuf:"varint,9,opt,name=groupType,proto3" json:"groupType,omitempty"`
	OwnerUserID   string `protobuf:"bytes,10,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
	MemberCount   int32  `protobuf:"varint,11,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	UserID        string `protobuf:"bytes,12,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname      string `protobuf:"bytes,13,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserFaceURL   string `protobuf:"bytes,14,opt,name=userFaceURL,proto3" json:"userFaceURL,omitempty"`
	HandleResult  int32  `protobuf:"varint,15,opt,name=handleResult,proto3" json:"handleResult,omitempty"`
	ReqMsg        string `protobuf:"bytes,16,opt,name=reqMsg,proto3" json:"reqMsg,omitempty"`
	HandledMsg    string `protobuf:"bytes,17,opt,name=handledMsg,proto3" json:"handledMsg,omitempty"`
	ReqTime       int64  `protobuf:"varint,18,opt,name=reqTime,proto3" json:"reqTime,omitempty"`
	HandleUserID  string `protobuf:"bytes,19,opt,name=handleUserID,proto3" json:"handleUserID,omitempty"`
	HandledTime   int64  `protobuf:"varint,20,opt,name=handledTime,proto3" json:"handledTime,omitempty"`
	Ex            string `protobuf:"bytes,21,opt,name=ex,proto3" json:"ex,omitempty"`
	AttachedInfo  string `protobuf:"bytes,22,opt,name=attachedInfo,proto3" json:"attachedInfo,omitempty"`
	JoinSource    int32  `protobuf:"varint,23,opt,name=joinSource,proto3" json:"joinSource,omitempty"`
	InviterUserID string `protobuf:"bytes,24,opt,name=inviterUserID,proto3" json:"inviterUserID,omitempty"`
}

func (x *IMGroupRequest) Reset() {
	*x = IMGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMGroupRequest) ProtoMessage() {}

func (x *IMGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMGroupRequest.ProtoReflect.Descriptor instead.
func (*IMGroupRequest) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{7}
}

func (x *IMGroupRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *IMGroupRequest) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *IMGroupRequest) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *IMGroupRequest) GetGroupFaceURL() string {
	if x != nil {
		return x.GroupFaceURL
	}
	return ""
}

func (x *IMGroupRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMGroupRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *IMGroupRequest) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *IMGroupRequest) GetGroupType() int32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *IMGroupRequest) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMGroupRequest) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *IMGroupRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMGroupRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMGroupRequest) GetUserFaceURL() string {
	if x != nil {
		return x.UserFaceURL
	}
	return ""
}

func (x *IMGroupRequest) GetHandleResult() int32 {
	if x != nil {
		return x.HandleResult
	}
	return 0
}

func (x *IMGroupRequest) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *IMGroupRequest) GetHandledMsg() string {
	if x != nil {
		return x.HandledMsg
	}
	return ""
}

func (x *IMGroupRequest) GetReqTime() int64 {
	if x != nil {
		return x.ReqTime
	}
	return 0
}

func (x *IMGroupRequest) GetHandleUserID() string {
	if x != nil {
		return x.HandleUserID
	}
	return ""
}

func (x *IMGroupRequest) GetHandledTime() int64 {
	if x != nil {
		return x.HandledTime
	}
	return 0
}

func (x *IMGroupRequest) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMGroupRequest) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

func (x *IMGroupRequest) GetJoinSource() int32 {
	if x != nil {
		return x.JoinSource
	}
	return 0
}

func (x *IMGroupRequest) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

type IMConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationID    string                 `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	ConversationType  common.SessionType     `protobuf:"varint,2,opt,name=conversationType,proto3,enum=openim.sdk.common.SessionType" json:"conversationType,omitempty"`
	UserID            string                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	GroupID           string                 `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ShowName          string                 `protobuf:"bytes,5,opt,name=showName,proto3" json:"showName,omitempty"`
	FaceURL           string                 `protobuf:"bytes,6,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	RecvMsgOpt        common.ConvRecvMsgOpt  `protobuf:"varint,7,opt,name=recvMsgOpt,proto3,enum=openim.sdk.common.ConvRecvMsgOpt" json:"recvMsgOpt,omitempty"`
	UnreadCount       int32                  `protobuf:"varint,8,opt,name=unreadCount,proto3" json:"unreadCount,omitempty"`
	GroupAtType       common.ConvGroupAtType `protobuf:"varint,9,opt,name=groupAtType,proto3,enum=openim.sdk.common.ConvGroupAtType" json:"groupAtType,omitempty"`
	LatestMsg         *IMMessage             `protobuf:"bytes,10,opt,name=latestMsg,proto3" json:"latestMsg,omitempty"`
	LatestMsgSendTime int64                  `protobuf:"varint,11,opt,name=latestMsgSendTime,proto3" json:"latestMsgSendTime,omitempty"`
	DraftText         string                 `protobuf:"bytes,12,opt,name=draftText,proto3" json:"draftText,omitempty"`
	DraftTextTime     int64                  `protobuf:"varint,13,opt,name=draftTextTime,proto3" json:"draftTextTime,omitempty"`
	IsPinned          bool                   `protobuf:"varint,14,opt,name=isPinned,proto3" json:"isPinned,omitempty"`
	IsPrivateChat     bool                   `protobuf:"varint,15,opt,name=isPrivateChat,proto3" json:"isPrivateChat,omitempty"`
	BurnDuration      int32                  `protobuf:"varint,16,opt,name=burnDuration,proto3" json:"burnDuration,omitempty"`
	Ex                string                 `protobuf:"bytes,17,opt,name=ex,proto3" json:"ex,omitempty"`
	MsgDestructTime   int64                  `protobuf:"varint,18,opt,name=msgDestructTime,proto3" json:"msgDestructTime,omitempty"`
	IsMsgDestruct     bool                   `protobuf:"varint,19,opt,name=isMsgDestruct,proto3" json:"isMsgDestruct,omitempty"`
}

func (x *IMConversation) Reset() {
	*x = IMConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMConversation) ProtoMessage() {}

func (x *IMConversation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMConversation.ProtoReflect.Descriptor instead.
func (*IMConversation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{8}
}

func (x *IMConversation) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *IMConversation) GetConversationType() common.SessionType {
	if x != nil {
		return x.ConversationType
	}
	return common.SessionType(0)
}

func (x *IMConversation) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMConversation) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMConversation) GetShowName() string {
	if x != nil {
		return x.ShowName
	}
	return ""
}

func (x *IMConversation) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMConversation) GetRecvMsgOpt() common.ConvRecvMsgOpt {
	if x != nil {
		return x.RecvMsgOpt
	}
	return common.ConvRecvMsgOpt(0)
}

func (x *IMConversation) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *IMConversation) GetGroupAtType() common.ConvGroupAtType {
	if x != nil {
		return x.GroupAtType
	}
	return common.ConvGroupAtType(0)
}

func (x *IMConversation) GetLatestMsg() *IMMessage {
	if x != nil {
		return x.LatestMsg
	}
	return nil
}

func (x *IMConversation) GetLatestMsgSendTime() int64 {
	if x != nil {
		return x.LatestMsgSendTime
	}
	return 0
}

func (x *IMConversation) GetDraftText() string {
	if x != nil {
		return x.DraftText
	}
	return ""
}

func (x *IMConversation) GetDraftTextTime() int64 {
	if x != nil {
		return x.DraftTextTime
	}
	return 0
}

func (x *IMConversation) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *IMConversation) GetIsPrivateChat() bool {
	if x != nil {
		return x.IsPrivateChat
	}
	return false
}

func (x *IMConversation) GetBurnDuration() int32 {
	if x != nil {
		return x.BurnDuration
	}
	return 0
}

func (x *IMConversation) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMConversation) GetMsgDestructTime() int64 {
	if x != nil {
		return x.MsgDestructTime
	}
	return 0
}

func (x *IMConversation) GetIsMsgDestruct() bool {
	if x != nil {
		return x.IsMsgDestruct
	}
	return false
}

type AtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AtUserID      string `protobuf:"bytes,1,opt,name=atUserID,proto3" json:"atUserID,omitempty"`
	GroupNickname string `protobuf:"bytes,2,opt,name=groupNickname,proto3" json:"groupNickname,omitempty"`
}

func (x *AtInfo) Reset() {
	*x = AtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtInfo) ProtoMessage() {}

func (x *AtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtInfo.ProtoReflect.Descriptor instead.
func (*AtInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{9}
}

func (x *AtInfo) GetAtUserID() string {
	if x != nil {
		return x.AtUserID
	}
	return ""
}

func (x *AtInfo) GetGroupNickname() string {
	if x != nil {
		return x.GroupNickname
	}
	return ""
}

type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Size   int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{10}
}

func (x *ImageInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ImageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PictureBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Size   int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Width  int32  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height int32  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Url    string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PictureBaseInfo) Reset() {
	*x = PictureBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureBaseInfo) ProtoMessage() {}

func (x *PictureBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureBaseInfo.ProtoReflect.Descriptor instead.
func (*PictureBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{11}
}

func (x *PictureBaseInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PictureBaseInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PictureBaseInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PictureBaseInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *PictureBaseInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PictureBaseInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SoundBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SoundPath string `protobuf:"bytes,2,opt,name=soundPath,proto3" json:"soundPath,omitempty"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	DataSize  int64  `protobuf:"varint,4,opt,name=dataSize,proto3" json:"dataSize,omitempty"`
	Duration  int64  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	SoundType string `protobuf:"bytes,6,opt,name=soundType,proto3" json:"soundType,omitempty"`
}

func (x *SoundBaseInfo) Reset() {
	*x = SoundBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundBaseInfo) ProtoMessage() {}

func (x *SoundBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundBaseInfo.ProtoReflect.Descriptor instead.
func (*SoundBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{12}
}

func (x *SoundBaseInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SoundBaseInfo) GetSoundPath() string {
	if x != nil {
		return x.SoundPath
	}
	return ""
}

func (x *SoundBaseInfo) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *SoundBaseInfo) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *SoundBaseInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SoundBaseInfo) GetSoundType() string {
	if x != nil {
		return x.SoundType
	}
	return ""
}

type VideoBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoPath      string `protobuf:"bytes,1,opt,name=videoPath,proto3" json:"videoPath,omitempty"`
	VideoUUID      string `protobuf:"bytes,2,opt,name=videoUUID,proto3" json:"videoUUID,omitempty"`
	VideoURL       string `protobuf:"bytes,3,opt,name=videoURL,proto3" json:"videoURL,omitempty"`
	VideoType      string `protobuf:"bytes,4,opt,name=videoType,proto3" json:"videoType,omitempty"`
	VideoSize      int64  `protobuf:"varint,5,opt,name=videoSize,proto3" json:"videoSize,omitempty"`
	Duration       int64  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	SnapshotPath   string `protobuf:"bytes,7,opt,name=snapshotPath,proto3" json:"snapshotPath,omitempty"`
	SnapshotUUID   string `protobuf:"bytes,8,opt,name=snapshotUUID,proto3" json:"snapshotUUID,omitempty"`
	SnapshotSize   int64  `protobuf:"varint,9,opt,name=snapshotSize,proto3" json:"snapshotSize,omitempty"`
	SnapshotURL    string `protobuf:"bytes,10,opt,name=snapshotURL,proto3" json:"snapshotURL,omitempty"`
	SnapshotWidth  int32  `protobuf:"varint,11,opt,name=snapshotWidth,proto3" json:"snapshotWidth,omitempty"`
	SnapshotHeight int32  `protobuf:"varint,12,opt,name=snapshotHeight,proto3" json:"snapshotHeight,omitempty"`
	SnapshotType   string `protobuf:"bytes,13,opt,name=snapshotType,proto3" json:"snapshotType,omitempty"`
}

func (x *VideoBaseInfo) Reset() {
	*x = VideoBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoBaseInfo) ProtoMessage() {}

func (x *VideoBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoBaseInfo.ProtoReflect.Descriptor instead.
func (*VideoBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{13}
}

func (x *VideoBaseInfo) GetVideoPath() string {
	if x != nil {
		return x.VideoPath
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoUUID() string {
	if x != nil {
		return x.VideoUUID
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoURL() string {
	if x != nil {
		return x.VideoURL
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoSize() int64 {
	if x != nil {
		return x.VideoSize
	}
	return 0
}

func (x *VideoBaseInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

func (x *VideoBaseInfo) GetSnapshotUUID() string {
	if x != nil {
		return x.SnapshotUUID
	}
	return ""
}

func (x *VideoBaseInfo) GetSnapshotSize() int64 {
	if x != nil {
		return x.SnapshotSize
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotURL() string {
	if x != nil {
		return x.SnapshotURL
	}
	return ""
}

func (x *VideoBaseInfo) GetSnapshotWidth() int32 {
	if x != nil {
		return x.SnapshotWidth
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotHeight() int32 {
	if x != nil {
		return x.SnapshotHeight
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotType() string {
	if x != nil {
		return x.SnapshotType
	}
	return ""
}

type FileBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	FileName  string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize  int64  `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileType  string `protobuf:"bytes,6,opt,name=fileType,proto3" json:"fileType,omitempty"`
}

func (x *FileBaseInfo) Reset() {
	*x = FileBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBaseInfo) ProtoMessage() {}

func (x *FileBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBaseInfo.ProtoReflect.Descriptor instead.
func (*FileBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{14}
}

func (x *FileBaseInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileBaseInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FileBaseInfo) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *FileBaseInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileBaseInfo) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileBaseInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type TextElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TextElem) Reset() {
	*x = TextElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextElem) ProtoMessage() {}

func (x *TextElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextElem.ProtoReflect.Descriptor instead.
func (*TextElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{15}
}

func (x *TextElem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CardElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	FaceURL  string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL,omitempty"`
	Ex       string `protobuf:"bytes,4,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *CardElem) Reset() {
	*x = CardElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardElem) ProtoMessage() {}

func (x *CardElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardElem.ProtoReflect.Descriptor instead.
func (*CardElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{16}
}

func (x *CardElem) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CardElem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CardElem) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *CardElem) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type PictureElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath      string           `protobuf:"bytes,1,opt,name=sourcePath,proto3" json:"sourcePath,omitempty"`
	SourcePicture   *PictureBaseInfo `protobuf:"bytes,2,opt,name=sourcePicture,proto3" json:"sourcePicture,omitempty"`
	BigPicture      *PictureBaseInfo `protobuf:"bytes,3,opt,name=bigPicture,proto3" json:"bigPicture,omitempty"`
	SnapshotPicture *PictureBaseInfo `protobuf:"bytes,4,opt,name=snapshotPicture,proto3" json:"snapshotPicture,omitempty"`
}

func (x *PictureElem) Reset() {
	*x = PictureElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureElem) ProtoMessage() {}

func (x *PictureElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureElem.ProtoReflect.Descriptor instead.
func (*PictureElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{17}
}

func (x *PictureElem) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *PictureElem) GetSourcePicture() *PictureBaseInfo {
	if x != nil {
		return x.SourcePicture
	}
	return nil
}

func (x *PictureElem) GetBigPicture() *PictureBaseInfo {
	if x != nil {
		return x.BigPicture
	}
	return nil
}

func (x *PictureElem) GetSnapshotPicture() *PictureBaseInfo {
	if x != nil {
		return x.SnapshotPicture
	}
	return nil
}

type SoundElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SoundPath string `protobuf:"bytes,2,opt,name=soundPath,proto3" json:"soundPath,omitempty"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	DataSize  int64  `protobuf:"varint,4,opt,name=dataSize,proto3" json:"dataSize,omitempty"`
	Duration  int64  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	SoundType string `protobuf:"bytes,6,opt,name=soundType,proto3" json:"soundType,omitempty"`
}

func (x *SoundElem) Reset() {
	*x = SoundElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundElem) ProtoMessage() {}

func (x *SoundElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundElem.ProtoReflect.Descriptor instead.
func (*SoundElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{18}
}

func (x *SoundElem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SoundElem) GetSoundPath() string {
	if x != nil {
		return x.SoundPath
	}
	return ""
}

func (x *SoundElem) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *SoundElem) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *SoundElem) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SoundElem) GetSoundType() string {
	if x != nil {
		return x.SoundType
	}
	return ""
}

type VideoElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoPath      string `protobuf:"bytes,1,opt,name=videoPath,proto3" json:"videoPath,omitempty"`
	VideoUUID      string `protobuf:"bytes,2,opt,name=videoUUID,proto3" json:"videoUUID,omitempty"`
	VideoURL       string `protobuf:"bytes,3,opt,name=videoURL,proto3" json:"videoURL,omitempty"`
	VideoType      string `protobuf:"bytes,4,opt,name=videoType,proto3" json:"videoType,omitempty"`
	VideoSize      int64  `protobuf:"varint,5,opt,name=videoSize,proto3" json:"videoSize,omitempty"`
	Duration       int64  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	SnapshotPath   string `protobuf:"bytes,7,opt,name=snapshotPath,proto3" json:"snapshotPath,omitempty"`
	SnapshotUUID   string `protobuf:"bytes,8,opt,name=snapshotUUID,proto3" json:"snapshotUUID,omitempty"`
	SnapshotSize   int64  `protobuf:"varint,9,opt,name=snapshotSize,proto3" json:"snapshotSize,omitempty"`
	SnapshotURL    string `protobuf:"bytes,10,opt,name=snapshotURL,proto3" json:"snapshotURL,omitempty"`
	SnapshotWidth  int32  `protobuf:"varint,11,opt,name=snapshotWidth,proto3" json:"snapshotWidth,omitempty"`
	SnapshotHeight int32  `protobuf:"varint,12,opt,name=snapshotHeight,proto3" json:"snapshotHeight,omitempty"`
	SnapshotType   string `protobuf:"bytes,13,opt,name=snapshotType,proto3" json:"snapshotType,omitempty"`
}

func (x *VideoElem) Reset() {
	*x = VideoElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoElem) ProtoMessage() {}

func (x *VideoElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoElem.ProtoReflect.Descriptor instead.
func (*VideoElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{19}
}

func (x *VideoElem) GetVideoPath() string {
	if x != nil {
		return x.VideoPath
	}
	return ""
}

func (x *VideoElem) GetVideoUUID() string {
	if x != nil {
		return x.VideoUUID
	}
	return ""
}

func (x *VideoElem) GetVideoURL() string {
	if x != nil {
		return x.VideoURL
	}
	return ""
}

func (x *VideoElem) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

func (x *VideoElem) GetVideoSize() int64 {
	if x != nil {
		return x.VideoSize
	}
	return 0
}

func (x *VideoElem) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoElem) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

func (x *VideoElem) GetSnapshotUUID() string {
	if x != nil {
		return x.SnapshotUUID
	}
	return ""
}

func (x *VideoElem) GetSnapshotSize() int64 {
	if x != nil {
		return x.SnapshotSize
	}
	return 0
}

func (x *VideoElem) GetSnapshotURL() string {
	if x != nil {
		return x.SnapshotURL
	}
	return ""
}

func (x *VideoElem) GetSnapshotWidth() int32 {
	if x != nil {
		return x.SnapshotWidth
	}
	return 0
}

func (x *VideoElem) GetSnapshotHeight() int32 {
	if x != nil {
		return x.SnapshotHeight
	}
	return 0
}

func (x *VideoElem) GetSnapshotType() string {
	if x != nil {
		return x.SnapshotType
	}
	return ""
}

type FileElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
	FileName  string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize  int64  `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	FileType  string `protobuf:"bytes,6,opt,name=fileType,proto3" json:"fileType,omitempty"`
}

func (x *FileElem) Reset() {
	*x = FileElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileElem) ProtoMessage() {}

func (x *FileElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileElem.ProtoReflect.Descriptor instead.
func (*FileElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{20}
}

func (x *FileElem) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileElem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FileElem) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *FileElem) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileElem) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileElem) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type MessageEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Length int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Url    string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Ex     string `protobuf:"bytes,5,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *MessageEntity) Reset() {
	*x = MessageEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEntity) ProtoMessage() {}

func (x *MessageEntity) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEntity.ProtoReflect.Descriptor instead.
func (*MessageEntity) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{21}
}

func (x *MessageEntity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageEntity) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageEntity) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MessageEntity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEntity) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type MergeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title             string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	AbstractList      []string         `protobuf:"bytes,2,rep,name=abstractList,proto3" json:"abstractList,omitempty"`
	MultiMessage      []*IMMessage     `protobuf:"bytes,3,rep,name=multiMessage,proto3" json:"multiMessage,omitempty"`
	MessageEntityList []*MessageEntity `protobuf:"bytes,4,rep,name=messageEntityList,proto3" json:"messageEntityList,omitempty"`
}

func (x *MergeElem) Reset() {
	*x = MergeElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeElem) ProtoMessage() {}

func (x *MergeElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeElem.ProtoReflect.Descriptor instead.
func (*MergeElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{22}
}

func (x *MergeElem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MergeElem) GetAbstractList() []string {
	if x != nil {
		return x.AbstractList
	}
	return nil
}

func (x *MergeElem) GetMultiMessage() []*IMMessage {
	if x != nil {
		return x.MultiMessage
	}
	return nil
}

func (x *MergeElem) GetMessageEntityList() []*MessageEntity {
	if x != nil {
		return x.MessageEntityList
	}
	return nil
}

type AtTextElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string     `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	AtUserList   []string   `protobuf:"bytes,2,rep,name=atUserList,proto3" json:"atUserList,omitempty"`
	AtUsersInfo  []*AtInfo  `protobuf:"bytes,3,rep,name=atUsersInfo,proto3" json:"atUsersInfo,omitempty"`
	QuoteMessage *IMMessage `protobuf:"bytes,4,opt,name=quoteMessage,proto3" json:"quoteMessage,omitempty"`
	IsAtSelf     bool       `protobuf:"varint,5,opt,name=isAtSelf,proto3" json:"isAtSelf,omitempty"`
}

func (x *AtTextElem) Reset() {
	*x = AtTextElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtTextElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtTextElem) ProtoMessage() {}

func (x *AtTextElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtTextElem.ProtoReflect.Descriptor instead.
func (*AtTextElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{23}
}

func (x *AtTextElem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AtTextElem) GetAtUserList() []string {
	if x != nil {
		return x.AtUserList
	}
	return nil
}

func (x *AtTextElem) GetAtUsersInfo() []*AtInfo {
	if x != nil {
		return x.AtUsersInfo
	}
	return nil
}

func (x *AtTextElem) GetQuoteMessage() *IMMessage {
	if x != nil {
		return x.QuoteMessage
	}
	return nil
}

func (x *AtTextElem) GetIsAtSelf() bool {
	if x != nil {
		return x.IsAtSelf
	}
	return false
}

type FaceElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FaceElem) Reset() {
	*x = FaceElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceElem) ProtoMessage() {}

func (x *FaceElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceElem.ProtoReflect.Descriptor instead.
func (*FaceElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{24}
}

func (x *FaceElem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FaceElem) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type LocationElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Longitude   float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude    float64 `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
}

func (x *LocationElem) Reset() {
	*x = LocationElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationElem) ProtoMessage() {}

func (x *LocationElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationElem.ProtoReflect.Descriptor instead.
func (*LocationElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{25}
}

func (x *LocationElem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LocationElem) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LocationElem) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type CustomElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Extension   string `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *CustomElem) Reset() {
	*x = CustomElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomElem) ProtoMessage() {}

func (x *CustomElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomElem.ProtoReflect.Descriptor instead.
func (*CustomElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{26}
}

func (x *CustomElem) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CustomElem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomElem) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type QuoteElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              string           `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	QuoteMessage      *IMMessage       `protobuf:"bytes,2,opt,name=quoteMessage,proto3" json:"quoteMessage,omitempty"`
	MessageEntityList []*MessageEntity `protobuf:"bytes,3,rep,name=messageEntityList,proto3" json:"messageEntityList,omitempty"`
}

func (x *QuoteElem) Reset() {
	*x = QuoteElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteElem) ProtoMessage() {}

func (x *QuoteElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteElem.ProtoReflect.Descriptor instead.
func (*QuoteElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{27}
}

func (x *QuoteElem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *QuoteElem) GetQuoteMessage() *IMMessage {
	if x != nil {
		return x.QuoteMessage
	}
	return nil
}

func (x *QuoteElem) GetMessageEntityList() []*MessageEntity {
	if x != nil {
		return x.MessageEntityList
	}
	return nil
}

type AdvancedTextElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              string           `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	MessageEntityList []*MessageEntity `protobuf:"bytes,2,rep,name=messageEntityList,proto3" json:"messageEntityList,omitempty"`
}

func (x *AdvancedTextElem) Reset() {
	*x = AdvancedTextElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedTextElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedTextElem) ProtoMessage() {}

func (x *AdvancedTextElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedTextElem.ProtoReflect.Descriptor instead.
func (*AdvancedTextElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{28}
}

func (x *AdvancedTextElem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AdvancedTextElem) GetMessageEntityList() []*MessageEntity {
	if x != nil {
		return x.MessageEntityList
	}
	return nil
}

type TypingElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgTips string `protobuf:"bytes,1,opt,name=msgTips,proto3" json:"msgTips,omitempty"`
}

func (x *TypingElem) Reset() {
	*x = TypingElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypingElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingElem) ProtoMessage() {}

func (x *TypingElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingElem.ProtoReflect.Descriptor instead.
func (*TypingElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{29}
}

func (x *TypingElem) GetMsgTips() string {
	if x != nil {
		return x.MsgTips
	}
	return ""
}

type StreamElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Content string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Packets []string `protobuf:"bytes,3,rep,name=packets,proto3" json:"packets,omitempty"`
	End     bool     `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *StreamElem) Reset() {
	*x = StreamElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamElem) ProtoMessage() {}

func (x *StreamElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamElem.ProtoReflect.Descriptor instead.
func (*StreamElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{30}
}

func (x *StreamElem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StreamElem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *StreamElem) GetPackets() []string {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *StreamElem) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type GroupHasReadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasReadUserIDList []string `protobuf:"bytes,1,rep,name=hasReadUserIDList,proto3" json:"hasReadUserIDList,omitempty"`
	HasReadCount      int32    `protobuf:"varint,2,opt,name=hasReadCount,proto3" json:"hasReadCount,omitempty"`
	GroupMemberCount  int32    `protobuf:"varint,3,opt,name=groupMemberCount,proto3" json:"groupMemberCount,omitempty"`
}

func (x *GroupHasReadInfo) Reset() {
	*x = GroupHasReadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupHasReadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupHasReadInfo) ProtoMessage() {}

func (x *GroupHasReadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupHasReadInfo.ProtoReflect.Descriptor instead.
func (*GroupHasReadInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{31}
}

func (x *GroupHasReadInfo) GetHasReadUserIDList() []string {
	if x != nil {
		return x.HasReadUserIDList
	}
	return nil
}

func (x *GroupHasReadInfo) GetHasReadCount() int32 {
	if x != nil {
		return x.HasReadCount
	}
	return 0
}

func (x *GroupHasReadInfo) GetGroupMemberCount() int32 {
	if x != nil {
		return x.GroupMemberCount
	}
	return 0
}

type UploadProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Save     int64  `protobuf:"varint,2,opt,name=save,proto3" json:"save,omitempty"`
	Current  int64  `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	UploadID string `protobuf:"bytes,4,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
}

func (x *UploadProgress) Reset() {
	*x = UploadProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProgress) ProtoMessage() {}

func (x *UploadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProgress.ProtoReflect.Descriptor instead.
func (*UploadProgress) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{32}
}

func (x *UploadProgress) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UploadProgress) GetSave() int64 {
	if x != nil {
		return x.Save
	}
	return 0
}

func (x *UploadProgress) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *UploadProgress) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

type AttachedInfoElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupHasReadInfo *GroupHasReadInfo `protobuf:"bytes,1,opt,name=groupHasReadInfo,proto3" json:"groupHasReadInfo,omitempty"`
	IsPrivateChat    bool              `protobuf:"varint,2,opt,name=isPrivateChat,proto3" json:"isPrivateChat,omitempty"`
	BurnDuration     int32             `protobuf:"varint,3,opt,name=burnDuration,proto3" json:"burnDuration,omitempty"`
	HasReadTime      int64             `protobuf:"varint,4,opt,name=hasReadTime,proto3" json:"hasReadTime,omitempty"`
	Progress         *UploadProgress   `protobuf:"bytes,5,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *AttachedInfoElem) Reset() {
	*x = AttachedInfoElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedInfoElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedInfoElem) ProtoMessage() {}

func (x *AttachedInfoElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedInfoElem.ProtoReflect.Descriptor instead.
func (*AttachedInfoElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{33}
}

func (x *AttachedInfoElem) GetGroupHasReadInfo() *GroupHasReadInfo {
	if x != nil {
		return x.GroupHasReadInfo
	}
	return nil
}

func (x *AttachedInfoElem) GetIsPrivateChat() bool {
	if x != nil {
		return x.IsPrivateChat
	}
	return false
}

func (x *AttachedInfoElem) GetBurnDuration() int32 {
	if x != nil {
		return x.BurnDuration
	}
	return 0
}

func (x *AttachedInfoElem) GetHasReadTime() int64 {
	if x != nil {
		return x.HasReadTime
	}
	return 0
}

func (x *AttachedInfoElem) GetProgress() *UploadProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

// OnGroupCreated()
type GroupCreatedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          *IMGroup         `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser         *IMGroupMember   `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	MemberList     []*IMGroupMember `protobuf:"bytes,3,rep,name=memberList,proto3" json:"memberList,omitempty"`
	OperationTime  int64            `protobuf:"varint,4,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
	GroupOwnerUser *IMGroupMember   `protobuf:"bytes,5,opt,name=groupOwnerUser,proto3" json:"groupOwnerUser,omitempty"`
}

func (x *GroupCreatedTips) Reset() {
	*x = GroupCreatedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCreatedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCreatedTips) ProtoMessage() {}

func (x *GroupCreatedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCreatedTips.ProtoReflect.Descriptor instead.
func (*GroupCreatedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{34}
}

func (x *GroupCreatedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupCreatedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupCreatedTips) GetMemberList() []*IMGroupMember {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *GroupCreatedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupCreatedTips) GetGroupOwnerUser() *IMGroupMember {
	if x != nil {
		return x.GroupOwnerUser
	}
	return nil
}

// OnGroupInfoSet()
type GroupInfoSetTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUser   *IMGroupMember `protobuf:"bytes,1,opt,name=opUser,proto3" json:"opUser,omitempty"` //who do this
	MuteTime int64          `protobuf:"varint,2,opt,name=muteTime,proto3" json:"muteTime,omitempty"`
	Group    *IMGroup       `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupInfoSetTips) Reset() {
	*x = GroupInfoSetTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoSetTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoSetTips) ProtoMessage() {}

func (x *GroupInfoSetTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoSetTips.ProtoReflect.Descriptor instead.
func (*GroupInfoSetTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{35}
}

func (x *GroupInfoSetTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupInfoSetTips) GetMuteTime() int64 {
	if x != nil {
		return x.MuteTime
	}
	return 0
}

func (x *GroupInfoSetTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupInfoSetNameTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUser *IMGroupMember `protobuf:"bytes,1,opt,name=opUser,proto3" json:"opUser,omitempty"` //who do this
	Group  *IMGroup       `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupInfoSetNameTips) Reset() {
	*x = GroupInfoSetNameTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoSetNameTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoSetNameTips) ProtoMessage() {}

func (x *GroupInfoSetNameTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoSetNameTips.ProtoReflect.Descriptor instead.
func (*GroupInfoSetNameTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{36}
}

func (x *GroupInfoSetNameTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupInfoSetNameTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupInfoSetAnnouncementTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUser *IMGroupMember `protobuf:"bytes,1,opt,name=opUser,proto3" json:"opUser,omitempty"` //who do this
	Group  *IMGroup       `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupInfoSetAnnouncementTips) Reset() {
	*x = GroupInfoSetAnnouncementTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoSetAnnouncementTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoSetAnnouncementTips) ProtoMessage() {}

func (x *GroupInfoSetAnnouncementTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoSetAnnouncementTips.ProtoReflect.Descriptor instead.
func (*GroupInfoSetAnnouncementTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{37}
}

func (x *GroupInfoSetAnnouncementTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupInfoSetAnnouncementTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// OnJoinGroupApplication()
type JoinGroupApplicationTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group     *IMGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Applicant *IMUser  `protobuf:"bytes,2,opt,name=applicant,proto3" json:"applicant,omitempty"`
	ReqMsg    string   `protobuf:"bytes,3,opt,name=reqMsg,proto3" json:"reqMsg,omitempty"`
}

func (x *JoinGroupApplicationTips) Reset() {
	*x = JoinGroupApplicationTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupApplicationTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupApplicationTips) ProtoMessage() {}

func (x *JoinGroupApplicationTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupApplicationTips.ProtoReflect.Descriptor instead.
func (*JoinGroupApplicationTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{38}
}

func (x *JoinGroupApplicationTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *JoinGroupApplicationTips) GetApplicant() *IMUser {
	if x != nil {
		return x.Applicant
	}
	return nil
}

func (x *JoinGroupApplicationTips) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

//	OnQuitGroup()
//
// Actively leave the group
type MemberQuitTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	QuitUser      *IMGroupMember `protobuf:"bytes,2,opt,name=quitUser,proto3" json:"quitUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
}

func (x *MemberQuitTips) Reset() {
	*x = MemberQuitTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberQuitTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberQuitTips) ProtoMessage() {}

func (x *MemberQuitTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberQuitTips.ProtoReflect.Descriptor instead.
func (*MemberQuitTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{39}
}

func (x *MemberQuitTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberQuitTips) GetQuitUser() *IMGroupMember {
	if x != nil {
		return x.QuitUser
	}
	return nil
}

func (x *MemberQuitTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

// OnApplicationGroupAccepted()
type GroupApplicationAcceptedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser     *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	HandleMsg  string         `protobuf:"bytes,4,opt,name=handleMsg,proto3" json:"handleMsg,omitempty"`
	ReceiverAs int32          `protobuf:"varint,5,opt,name=receiverAs,proto3" json:"receiverAs,omitempty"` // admin(==1) or applicant(==0)
}

func (x *GroupApplicationAcceptedTips) Reset() {
	*x = GroupApplicationAcceptedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupApplicationAcceptedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupApplicationAcceptedTips) ProtoMessage() {}

func (x *GroupApplicationAcceptedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupApplicationAcceptedTips.ProtoReflect.Descriptor instead.
func (*GroupApplicationAcceptedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{40}
}

func (x *GroupApplicationAcceptedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupApplicationAcceptedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupApplicationAcceptedTips) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

func (x *GroupApplicationAcceptedTips) GetReceiverAs() int32 {
	if x != nil {
		return x.ReceiverAs
	}
	return 0
}

// OnApplicationGroupRejected()
type GroupApplicationRejectedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group      *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser     *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	HandleMsg  string         `protobuf:"bytes,4,opt,name=handleMsg,proto3" json:"handleMsg,omitempty"`
	ReceiverAs int32          `protobuf:"varint,5,opt,name=receiverAs,proto3" json:"receiverAs,omitempty"` // admin(==1) or applicant(==0)
}

func (x *GroupApplicationRejectedTips) Reset() {
	*x = GroupApplicationRejectedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupApplicationRejectedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupApplicationRejectedTips) ProtoMessage() {}

func (x *GroupApplicationRejectedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupApplicationRejectedTips.ProtoReflect.Descriptor instead.
func (*GroupApplicationRejectedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{41}
}

func (x *GroupApplicationRejectedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupApplicationRejectedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupApplicationRejectedTips) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

func (x *GroupApplicationRejectedTips) GetReceiverAs() int32 {
	if x != nil {
		return x.ReceiverAs
	}
	return 0
}

// OnTransferGroupOwner()
type GroupOwnerTransferredTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group             *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser            *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	NewGroupOwner     *IMGroupMember `protobuf:"bytes,3,opt,name=newGroupOwner,proto3" json:"newGroupOwner,omitempty"`
	OldGroupOwner     string         `protobuf:"bytes,4,opt,name=oldGroupOwner,proto3" json:"oldGroupOwner,omitempty"`
	OperationTime     int64          `protobuf:"varint,5,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
	OldGroupOwnerInfo *IMGroupMember `protobuf:"bytes,6,opt,name=oldGroupOwnerInfo,proto3" json:"oldGroupOwnerInfo,omitempty"`
}

func (x *GroupOwnerTransferredTips) Reset() {
	*x = GroupOwnerTransferredTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOwnerTransferredTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOwnerTransferredTips) ProtoMessage() {}

func (x *GroupOwnerTransferredTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOwnerTransferredTips.ProtoReflect.Descriptor instead.
func (*GroupOwnerTransferredTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{42}
}

func (x *GroupOwnerTransferredTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupOwnerTransferredTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupOwnerTransferredTips) GetNewGroupOwner() *IMGroupMember {
	if x != nil {
		return x.NewGroupOwner
	}
	return nil
}

func (x *GroupOwnerTransferredTips) GetOldGroupOwner() string {
	if x != nil {
		return x.OldGroupOwner
	}
	return ""
}

func (x *GroupOwnerTransferredTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupOwnerTransferredTips) GetOldGroupOwnerInfo() *IMGroupMember {
	if x != nil {
		return x.OldGroupOwnerInfo
	}
	return nil
}

// OnMemberKicked()
type MemberKickedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          *IMGroup         `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser         *IMGroupMember   `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	KickedUserList []*IMGroupMember `protobuf:"bytes,3,rep,name=kickedUserList,proto3" json:"kickedUserList,omitempty"`
	OperationTime  int64            `protobuf:"varint,4,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
}

func (x *MemberKickedTips) Reset() {
	*x = MemberKickedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberKickedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberKickedTips) ProtoMessage() {}

func (x *MemberKickedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberKickedTips.ProtoReflect.Descriptor instead.
func (*MemberKickedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{43}
}

func (x *MemberKickedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberKickedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *MemberKickedTips) GetKickedUserList() []*IMGroupMember {
	if x != nil {
		return x.KickedUserList
	}
	return nil
}

func (x *MemberKickedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

// OnMemberInvited()
type MemberInvitedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group           *IMGroup         `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser          *IMGroupMember   `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	InvitedUserList []*IMGroupMember `protobuf:"bytes,3,rep,name=invitedUserList,proto3" json:"invitedUserList,omitempty"`
	OperationTime   int64            `protobuf:"varint,4,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
	InviterUser     *IMGroupMember   `protobuf:"bytes,7,opt,name=inviterUser,proto3" json:"inviterUser,omitempty"`
}

func (x *MemberInvitedTips) Reset() {
	*x = MemberInvitedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberInvitedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInvitedTips) ProtoMessage() {}

func (x *MemberInvitedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInvitedTips.ProtoReflect.Descriptor instead.
func (*MemberInvitedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{44}
}

func (x *MemberInvitedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberInvitedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *MemberInvitedTips) GetInvitedUserList() []*IMGroupMember {
	if x != nil {
		return x.InvitedUserList
	}
	return nil
}

func (x *MemberInvitedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *MemberInvitedTips) GetInviterUser() *IMGroupMember {
	if x != nil {
		return x.InviterUser
	}
	return nil
}

// Actively join the group
type MemberEnterTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	EntrantUser   *IMGroupMember `protobuf:"bytes,2,opt,name=entrantUser,proto3" json:"entrantUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
}

func (x *MemberEnterTips) Reset() {
	*x = MemberEnterTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberEnterTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberEnterTips) ProtoMessage() {}

func (x *MemberEnterTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberEnterTips.ProtoReflect.Descriptor instead.
func (*MemberEnterTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{45}
}

func (x *MemberEnterTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberEnterTips) GetEntrantUser() *IMGroupMember {
	if x != nil {
		return x.EntrantUser
	}
	return nil
}

func (x *MemberEnterTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

type GroupDismissedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
}

func (x *GroupDismissedTips) Reset() {
	*x = GroupDismissedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDismissedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDismissedTips) ProtoMessage() {}

func (x *GroupDismissedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDismissedTips.ProtoReflect.Descriptor instead.
func (*GroupDismissedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{46}
}

func (x *GroupDismissedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupDismissedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupDismissedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

type GroupMemberMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
	MutedUser     *IMGroupMember `protobuf:"bytes,4,opt,name=mutedUser,proto3" json:"mutedUser,omitempty"`
	MutedSeconds  uint32         `protobuf:"varint,5,opt,name=mutedSeconds,proto3" json:"mutedSeconds,omitempty"`
}

func (x *GroupMemberMutedTips) Reset() {
	*x = GroupMemberMutedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberMutedTips) ProtoMessage() {}

func (x *GroupMemberMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberMutedTips.ProtoReflect.Descriptor instead.
func (*GroupMemberMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{47}
}

func (x *GroupMemberMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupMemberMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupMemberMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupMemberMutedTips) GetMutedUser() *IMGroupMember {
	if x != nil {
		return x.MutedUser
	}
	return nil
}

func (x *GroupMemberMutedTips) GetMutedSeconds() uint32 {
	if x != nil {
		return x.MutedSeconds
	}
	return 0
}

type GroupMemberCancelMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
	MutedUser     *IMGroupMember `protobuf:"bytes,4,opt,name=mutedUser,proto3" json:"mutedUser,omitempty"`
}

func (x *GroupMemberCancelMutedTips) Reset() {
	*x = GroupMemberCancelMutedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberCancelMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberCancelMutedTips) ProtoMessage() {}

func (x *GroupMemberCancelMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberCancelMutedTips.ProtoReflect.Descriptor instead.
func (*GroupMemberCancelMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{48}
}

func (x *GroupMemberCancelMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupMemberCancelMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupMemberCancelMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupMemberCancelMutedTips) GetMutedUser() *IMGroupMember {
	if x != nil {
		return x.MutedUser
	}
	return nil
}

type GroupMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
}

func (x *GroupMutedTips) Reset() {
	*x = GroupMutedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMutedTips) ProtoMessage() {}

func (x *GroupMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMutedTips.ProtoReflect.Descriptor instead.
func (*GroupMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{49}
}

func (x *GroupMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

type GroupCancelMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
}

func (x *GroupCancelMutedTips) Reset() {
	*x = GroupCancelMutedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCancelMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCancelMutedTips) ProtoMessage() {}

func (x *GroupCancelMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCancelMutedTips.ProtoReflect.Descriptor instead.
func (*GroupCancelMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{50}
}

func (x *GroupCancelMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupCancelMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupCancelMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

type GroupMemberInfoSetTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser,omitempty"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
	ChangedUser   *IMGroupMember `protobuf:"bytes,4,opt,name=changedUser,proto3" json:"changedUser,omitempty"`
}

func (x *GroupMemberInfoSetTips) Reset() {
	*x = GroupMemberInfoSetTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberInfoSetTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberInfoSetTips) ProtoMessage() {}

func (x *GroupMemberInfoSetTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberInfoSetTips.ProtoReflect.Descriptor instead.
func (*GroupMemberInfoSetTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{51}
}

func (x *GroupMemberInfoSetTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupMemberInfoSetTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupMemberInfoSetTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupMemberInfoSetTips) GetChangedUser() *IMGroupMember {
	if x != nil {
		return x.ChangedUser
	}
	return nil
}

type FriendApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddTime    int64  `protobuf:"varint,1,opt,name=addTime,proto3" json:"addTime,omitempty"`
	AddSource  string `protobuf:"bytes,2,opt,name=addSource,proto3" json:"addSource,omitempty"`
	AddWording string `protobuf:"bytes,3,opt,name=addWording,proto3" json:"addWording,omitempty"`
}

func (x *FriendApplication) Reset() {
	*x = FriendApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendApplication) ProtoMessage() {}

func (x *FriendApplication) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendApplication.ProtoReflect.Descriptor instead.
func (*FriendApplication) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{52}
}

func (x *FriendApplication) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

func (x *FriendApplication) GetAddSource() string {
	if x != nil {
		return x.AddSource
	}
	return ""
}

func (x *FriendApplication) GetAddWording() string {
	if x != nil {
		return x.AddWording
	}
	return ""
}

type FromToUserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
}

func (x *FromToUserID) Reset() {
	*x = FromToUserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromToUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromToUserID) ProtoMessage() {}

func (x *FromToUserID) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromToUserID.ProtoReflect.Descriptor instead.
func (*FromToUserID) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{53}
}

func (x *FromToUserID) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *FromToUserID) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

// FromUserID apply to add ToUserID
type FriendApplicationTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"`
}

func (x *FriendApplicationTips) Reset() {
	*x = FriendApplicationTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendApplicationTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendApplicationTips) ProtoMessage() {}

func (x *FriendApplicationTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendApplicationTips.ProtoReflect.Descriptor instead.
func (*FriendApplicationTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{54}
}

func (x *FriendApplicationTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

// FromUserID accept or reject ToUserID
type FriendApplicationApprovedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"`
}

func (x *FriendApplicationApprovedTips) Reset() {
	*x = FriendApplicationApprovedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendApplicationApprovedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendApplicationApprovedTips) ProtoMessage() {}

func (x *FriendApplicationApprovedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendApplicationApprovedTips.ProtoReflect.Descriptor instead.
func (*FriendApplicationApprovedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{55}
}

func (x *FriendApplicationApprovedTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

// FromUserID accept or reject ToUserID
type FriendApplicationRejectedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"`
	HandleMsg    string        `protobuf:"bytes,2,opt,name=handleMsg,proto3" json:"handleMsg,omitempty"`
}

func (x *FriendApplicationRejectedTips) Reset() {
	*x = FriendApplicationRejectedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendApplicationRejectedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendApplicationRejectedTips) ProtoMessage() {}

func (x *FriendApplicationRejectedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendApplicationRejectedTips.ProtoReflect.Descriptor instead.
func (*FriendApplicationRejectedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{56}
}

func (x *FriendApplicationRejectedTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

func (x *FriendApplicationRejectedTips) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

// FromUserID  Added a friend ToUserID
type FriendAddedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friend        *IMFriend `protobuf:"bytes,1,opt,name=friend,proto3" json:"friend,omitempty"`
	OperationTime int64     `protobuf:"varint,2,opt,name=operationTime,proto3" json:"operationTime,omitempty"`
	OpUser        *IMUser   `protobuf:"bytes,3,opt,name=opUser,proto3" json:"opUser,omitempty"` //who do this
}

func (x *FriendAddedTips) Reset() {
	*x = FriendAddedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendAddedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendAddedTips) ProtoMessage() {}

func (x *FriendAddedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendAddedTips.ProtoReflect.Descriptor instead.
func (*FriendAddedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{57}
}

func (x *FriendAddedTips) GetFriend() *IMFriend {
	if x != nil {
		return x.Friend
	}
	return nil
}

func (x *FriendAddedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *FriendAddedTips) GetOpUser() *IMUser {
	if x != nil {
		return x.OpUser
	}
	return nil
}

// FromUserID  deleted a friend ToUserID
type FriendDeletedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"` //from：owner； to：friend
}

func (x *FriendDeletedTips) Reset() {
	*x = FriendDeletedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendDeletedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendDeletedTips) ProtoMessage() {}

func (x *FriendDeletedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendDeletedTips.ProtoReflect.Descriptor instead.
func (*FriendDeletedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{58}
}

func (x *FriendDeletedTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

type BlackAddedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"` //from：owner； to：black
}

func (x *BlackAddedTips) Reset() {
	*x = BlackAddedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackAddedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackAddedTips) ProtoMessage() {}

func (x *BlackAddedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackAddedTips.ProtoReflect.Descriptor instead.
func (*BlackAddedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{59}
}

func (x *BlackAddedTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

type BlackDeletedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"` //from：owner； to：black
}

func (x *BlackDeletedTips) Reset() {
	*x = BlackDeletedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackDeletedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackDeletedTips) ProtoMessage() {}

func (x *BlackDeletedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackDeletedTips.ProtoReflect.Descriptor instead.
func (*BlackDeletedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{60}
}

func (x *BlackDeletedTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

type FriendInfoChangedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"` //from：changed； to：friend
}

func (x *FriendInfoChangedTips) Reset() {
	*x = FriendInfoChangedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendInfoChangedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendInfoChangedTips) ProtoMessage() {}

func (x *FriendInfoChangedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendInfoChangedTips.ProtoReflect.Descriptor instead.
func (*FriendInfoChangedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{61}
}

func (x *FriendInfoChangedTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

// ////////////////////user/////////////////////
type UserInfoUpdatedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *UserInfoUpdatedTips) Reset() {
	*x = UserInfoUpdatedTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoUpdatedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoUpdatedTips) ProtoMessage() {}

func (x *UserInfoUpdatedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoUpdatedTips.ProtoReflect.Descriptor instead.
func (*UserInfoUpdatedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{62}
}

func (x *UserInfoUpdatedTips) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UserStatusChangeTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
	Status     int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	PlatformID int32  `protobuf:"varint,4,opt,name=platformID,proto3" json:"platformID,omitempty"`
}

func (x *UserStatusChangeTips) Reset() {
	*x = UserStatusChangeTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatusChangeTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatusChangeTips) ProtoMessage() {}

func (x *UserStatusChangeTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatusChangeTips.ProtoReflect.Descriptor instead.
func (*UserStatusChangeTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{63}
}

func (x *UserStatusChangeTips) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *UserStatusChangeTips) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *UserStatusChangeTips) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserStatusChangeTips) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

type UserCommandAddTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
}

func (x *UserCommandAddTips) Reset() {
	*x = UserCommandAddTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCommandAddTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCommandAddTips) ProtoMessage() {}

func (x *UserCommandAddTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCommandAddTips.ProtoReflect.Descriptor instead.
func (*UserCommandAddTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{64}
}

func (x *UserCommandAddTips) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *UserCommandAddTips) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

type UserCommandUpdateTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
}

func (x *UserCommandUpdateTips) Reset() {
	*x = UserCommandUpdateTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCommandUpdateTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCommandUpdateTips) ProtoMessage() {}

func (x *UserCommandUpdateTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCommandUpdateTips.ProtoReflect.Descriptor instead.
func (*UserCommandUpdateTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{65}
}

func (x *UserCommandUpdateTips) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *UserCommandUpdateTips) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

type UserCommandDeleteTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID,omitempty"`
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID,omitempty"`
}

func (x *UserCommandDeleteTips) Reset() {
	*x = UserCommandDeleteTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCommandDeleteTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCommandDeleteTips) ProtoMessage() {}

func (x *UserCommandDeleteTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCommandDeleteTips.ProtoReflect.Descriptor instead.
func (*UserCommandDeleteTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{66}
}

func (x *UserCommandDeleteTips) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *UserCommandDeleteTips) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

// ////////////////////conversation/////////////////////
type ConversationUpdateTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID             string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ConversationIDList []string `protobuf:"bytes,2,rep,name=conversationIDList,proto3" json:"conversationIDList,omitempty"`
}

func (x *ConversationUpdateTips) Reset() {
	*x = ConversationUpdateTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationUpdateTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationUpdateTips) ProtoMessage() {}

func (x *ConversationUpdateTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationUpdateTips.ProtoReflect.Descriptor instead.
func (*ConversationUpdateTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{67}
}

func (x *ConversationUpdateTips) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ConversationUpdateTips) GetConversationIDList() []string {
	if x != nil {
		return x.ConversationIDList
	}
	return nil
}

type ConversationSetPrivateTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvID         string `protobuf:"bytes,1,opt,name=recvID,proto3" json:"recvID,omitempty"`
	SendID         string `protobuf:"bytes,2,opt,name=sendID,proto3" json:"sendID,omitempty"`
	IsPrivate      bool   `protobuf:"varint,3,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	ConversationID string `protobuf:"bytes,4,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
}

func (x *ConversationSetPrivateTips) Reset() {
	*x = ConversationSetPrivateTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationSetPrivateTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationSetPrivateTips) ProtoMessage() {}

func (x *ConversationSetPrivateTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationSetPrivateTips.ProtoReflect.Descriptor instead.
func (*ConversationSetPrivateTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{68}
}

func (x *ConversationSetPrivateTips) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *ConversationSetPrivateTips) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *ConversationSetPrivateTips) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ConversationSetPrivateTips) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type ConversationHasReadTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ConversationID  string `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	HasReadSeq      int64  `protobuf:"varint,3,opt,name=hasReadSeq,proto3" json:"hasReadSeq,omitempty"`
	UnreadCountTime int64  `protobuf:"varint,4,opt,name=unreadCountTime,proto3" json:"unreadCountTime,omitempty"`
}

func (x *ConversationHasReadTips) Reset() {
	*x = ConversationHasReadTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationHasReadTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationHasReadTips) ProtoMessage() {}

func (x *ConversationHasReadTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationHasReadTips.ProtoReflect.Descriptor instead.
func (*ConversationHasReadTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{69}
}

func (x *ConversationHasReadTips) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ConversationHasReadTips) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *ConversationHasReadTips) GetHasReadSeq() int64 {
	if x != nil {
		return x.HasReadSeq
	}
	return 0
}

func (x *ConversationHasReadTips) GetUnreadCountTime() int64 {
	if x != nil {
		return x.UnreadCountTime
	}
	return 0
}

type DeleteMessageTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpUserID string  `protobuf:"bytes,1,opt,name=opUserID,proto3" json:"opUserID,omitempty"`
	UserID   string  `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Seqs     []int64 `protobuf:"varint,3,rep,packed,name=seqs,proto3" json:"seqs,omitempty"`
}

func (x *DeleteMessageTips) Reset() {
	*x = DeleteMessageTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessageTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageTips) ProtoMessage() {}

func (x *DeleteMessageTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageTips.ProtoReflect.Descriptor instead.
func (*DeleteMessageTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteMessageTips) GetOpUserID() string {
	if x != nil {
		return x.OpUserID
	}
	return ""
}

func (x *DeleteMessageTips) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DeleteMessageTips) GetSeqs() []int64 {
	if x != nil {
		return x.Seqs
	}
	return nil
}

type RevokeMsgTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevokerUserID  string `protobuf:"bytes,1,opt,name=revokerUserID,proto3" json:"revokerUserID,omitempty"`
	ClientMsgID    string `protobuf:"bytes,2,opt,name=clientMsgID,proto3" json:"clientMsgID,omitempty"`
	RevokeTime     int64  `protobuf:"varint,3,opt,name=revokeTime,proto3" json:"revokeTime,omitempty"`
	SesstionType   int32  `protobuf:"varint,5,opt,name=sesstionType,proto3" json:"sesstionType,omitempty"`
	Seq            int64  `protobuf:"varint,6,opt,name=seq,proto3" json:"seq,omitempty"`
	ConversationID string `protobuf:"bytes,7,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	IsAdminRevoke  bool   `protobuf:"varint,8,opt,name=isAdminRevoke,proto3" json:"isAdminRevoke,omitempty"`
}

func (x *RevokeMsgTips) Reset() {
	*x = RevokeMsgTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeMsgTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeMsgTips) ProtoMessage() {}

func (x *RevokeMsgTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeMsgTips.ProtoReflect.Descriptor instead.
func (*RevokeMsgTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{71}
}

func (x *RevokeMsgTips) GetRevokerUserID() string {
	if x != nil {
		return x.RevokerUserID
	}
	return ""
}

func (x *RevokeMsgTips) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

func (x *RevokeMsgTips) GetRevokeTime() int64 {
	if x != nil {
		return x.RevokeTime
	}
	return 0
}

func (x *RevokeMsgTips) GetSesstionType() int32 {
	if x != nil {
		return x.SesstionType
	}
	return 0
}

func (x *RevokeMsgTips) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *RevokeMsgTips) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *RevokeMsgTips) GetIsAdminRevoke() bool {
	if x != nil {
		return x.IsAdminRevoke
	}
	return false
}

type MessageRevokedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevokerID                   string `protobuf:"bytes,1,opt,name=revokerID,proto3" json:"revokerID,omitempty"`
	RevokerRole                 int32  `protobuf:"varint,2,opt,name=revokerRole,proto3" json:"revokerRole,omitempty"`
	ClientMsgID                 string `protobuf:"bytes,3,opt,name=clientMsgID,proto3" json:"clientMsgID,omitempty"`
	RevokerNickname             string `protobuf:"bytes,4,opt,name=revokerNickname,proto3" json:"revokerNickname,omitempty"`
	RevokeTime                  int64  `protobuf:"varint,5,opt,name=revokeTime,proto3" json:"revokeTime,omitempty"`
	SourceMessageSendTime       int64  `protobuf:"varint,6,opt,name=sourceMessageSendTime,proto3" json:"sourceMessageSendTime,omitempty"`
	SourceMessageSendID         string `protobuf:"bytes,7,opt,name=sourceMessageSendID,proto3" json:"sourceMessageSendID,omitempty"`
	SourceMessageSenderNickname string `protobuf:"bytes,8,opt,name=sourceMessageSenderNickname,proto3" json:"sourceMessageSenderNickname,omitempty"`
	SessionType                 int32  `protobuf:"varint,10,opt,name=sessionType,proto3" json:"sessionType,omitempty"`
	Seq                         int64  `protobuf:"varint,11,opt,name=seq,proto3" json:"seq,omitempty"`
	Ex                          string `protobuf:"bytes,12,opt,name=ex,proto3" json:"ex,omitempty"`
}

func (x *MessageRevokedContent) Reset() {
	*x = MessageRevokedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRevokedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRevokedContent) ProtoMessage() {}

func (x *MessageRevokedContent) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRevokedContent.ProtoReflect.Descriptor instead.
func (*MessageRevokedContent) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{72}
}

func (x *MessageRevokedContent) GetRevokerID() string {
	if x != nil {
		return x.RevokerID
	}
	return ""
}

func (x *MessageRevokedContent) GetRevokerRole() int32 {
	if x != nil {
		return x.RevokerRole
	}
	return 0
}

func (x *MessageRevokedContent) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

func (x *MessageRevokedContent) GetRevokerNickname() string {
	if x != nil {
		return x.RevokerNickname
	}
	return ""
}

func (x *MessageRevokedContent) GetRevokeTime() int64 {
	if x != nil {
		return x.RevokeTime
	}
	return 0
}

func (x *MessageRevokedContent) GetSourceMessageSendTime() int64 {
	if x != nil {
		return x.SourceMessageSendTime
	}
	return 0
}

func (x *MessageRevokedContent) GetSourceMessageSendID() string {
	if x != nil {
		return x.SourceMessageSendID
	}
	return ""
}

func (x *MessageRevokedContent) GetSourceMessageSenderNickname() string {
	if x != nil {
		return x.SourceMessageSenderNickname
	}
	return ""
}

func (x *MessageRevokedContent) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *MessageRevokedContent) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *MessageRevokedContent) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type ClearConversationTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string   `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ConversationIDs []string `protobuf:"bytes,2,rep,name=conversationIDs,proto3" json:"conversationIDs,omitempty"`
}

func (x *ClearConversationTips) Reset() {
	*x = ClearConversationTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearConversationTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearConversationTips) ProtoMessage() {}

func (x *ClearConversationTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearConversationTips.ProtoReflect.Descriptor instead.
func (*ClearConversationTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{73}
}

func (x *ClearConversationTips) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ClearConversationTips) GetConversationIDs() []string {
	if x != nil {
		return x.ConversationIDs
	}
	return nil
}

type DeleteMsgsTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         string  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ConversationID string  `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	Seqs           []int64 `protobuf:"varint,3,rep,packed,name=seqs,proto3" json:"seqs,omitempty"`
}

func (x *DeleteMsgsTips) Reset() {
	*x = DeleteMsgsTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMsgsTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMsgsTips) ProtoMessage() {}

func (x *DeleteMsgsTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMsgsTips.ProtoReflect.Descriptor instead.
func (*DeleteMsgsTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteMsgsTips) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DeleteMsgsTips) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *DeleteMsgsTips) GetSeqs() []int64 {
	if x != nil {
		return x.Seqs
	}
	return nil
}

type MarkAsReadTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkAsReadUserID string  `protobuf:"bytes,1,opt,name=markAsReadUserID,proto3" json:"markAsReadUserID,omitempty"`
	ConversationID   string  `protobuf:"bytes,2,opt,name=conversationID,proto3" json:"conversationID,omitempty"`
	Seqs             []int64 `protobuf:"varint,3,rep,packed,name=seqs,proto3" json:"seqs,omitempty"`
	HasReadSeq       int64   `protobuf:"varint,4,opt,name=hasReadSeq,proto3" json:"hasReadSeq,omitempty"`
}

func (x *MarkAsReadTips) Reset() {
	*x = MarkAsReadTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsReadTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadTips) ProtoMessage() {}

func (x *MarkAsReadTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadTips.ProtoReflect.Descriptor instead.
func (*MarkAsReadTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{75}
}

func (x *MarkAsReadTips) GetMarkAsReadUserID() string {
	if x != nil {
		return x.MarkAsReadUserID
	}
	return ""
}

func (x *MarkAsReadTips) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *MarkAsReadTips) GetSeqs() []int64 {
	if x != nil {
		return x.Seqs
	}
	return nil
}

func (x *MarkAsReadTips) GetHasReadSeq() int64 {
	if x != nil {
		return x.HasReadSeq
	}
	return 0
}

type FriendsInfoUpdateTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID,omitempty"`
	FriendIDs    []string      `protobuf:"bytes,2,rep,name=friendIDs,proto3" json:"friendIDs,omitempty"`
}

func (x *FriendsInfoUpdateTips) Reset() {
	*x = FriendsInfoUpdateTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendsInfoUpdateTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendsInfoUpdateTips) ProtoMessage() {}

func (x *FriendsInfoUpdateTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendsInfoUpdateTips.ProtoReflect.Descriptor instead.
func (*FriendsInfoUpdateTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{76}
}

func (x *FriendsInfoUpdateTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

func (x *FriendsInfoUpdateTips) GetFriendIDs() []string {
	if x != nil {
		return x.FriendIDs
	}
	return nil
}

type SubUserOnlineStatusElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID            string  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	OnlinePlatformIDs []int32 `protobuf:"varint,2,rep,packed,name=onlinePlatformIDs,proto3" json:"onlinePlatformIDs,omitempty"`
}

func (x *SubUserOnlineStatusElem) Reset() {
	*x = SubUserOnlineStatusElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubUserOnlineStatusElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubUserOnlineStatusElem) ProtoMessage() {}

func (x *SubUserOnlineStatusElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubUserOnlineStatusElem.ProtoReflect.Descriptor instead.
func (*SubUserOnlineStatusElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{77}
}

func (x *SubUserOnlineStatusElem) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SubUserOnlineStatusElem) GetOnlinePlatformIDs() []int32 {
	if x != nil {
		return x.OnlinePlatformIDs
	}
	return nil
}

type SubUserOnlineStatusTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribers []*SubUserOnlineStatusElem `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
}

func (x *SubUserOnlineStatusTips) Reset() {
	*x = SubUserOnlineStatusTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubUserOnlineStatusTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubUserOnlineStatusTips) ProtoMessage() {}

func (x *SubUserOnlineStatusTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubUserOnlineStatusTips.ProtoReflect.Descriptor instead.
func (*SubUserOnlineStatusTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{78}
}

func (x *SubUserOnlineStatusTips) GetSubscribers() []*SubUserOnlineStatusElem {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

type SubUserOnlineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeUserID   []string `protobuf:"bytes,1,rep,name=subscribeUserID,proto3" json:"subscribeUserID,omitempty"`
	UnsubscribeUserID []string `protobuf:"bytes,2,rep,name=unsubscribeUserID,proto3" json:"unsubscribeUserID,omitempty"`
}

func (x *SubUserOnlineStatus) Reset() {
	*x = SubUserOnlineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubUserOnlineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubUserOnlineStatus) ProtoMessage() {}

func (x *SubUserOnlineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubUserOnlineStatus.ProtoReflect.Descriptor instead.
func (*SubUserOnlineStatus) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{79}
}

func (x *SubUserOnlineStatus) GetSubscribeUserID() []string {
	if x != nil {
		return x.SubscribeUserID
	}
	return nil
}

func (x *SubUserOnlineStatus) GetUnsubscribeUserID() []string {
	if x != nil {
		return x.UnsubscribeUserID
	}
	return nil
}

type IMMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgID      string                  `protobuf:"bytes,1,opt,name=clientMsgID,proto3" json:"clientMsgID,omitempty"`
	ServerMsgID      string                  `protobuf:"bytes,2,opt,name=serverMsgID,proto3" json:"serverMsgID,omitempty"`
	CreateTime       int64                   `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	SendTime         int64                   `protobuf:"varint,4,opt,name=sendTime,proto3" json:"sendTime,omitempty"`
	SessionType      common.SessionType      `protobuf:"varint,5,opt,name=sessionType,proto3,enum=openim.sdk.common.SessionType" json:"sessionType,omitempty"`
	SendID           string                  `protobuf:"bytes,6,opt,name=sendID,proto3" json:"sendID,omitempty"`
	RecvID           string                  `protobuf:"bytes,7,opt,name=recvID,proto3" json:"recvID,omitempty"`
	MsgFrom          common.MsgFrom          `protobuf:"varint,8,opt,name=msgFrom,proto3,enum=openim.sdk.common.MsgFrom" json:"msgFrom,omitempty"`
	ContentType      common.ContentType      `protobuf:"varint,9,opt,name=contentType,proto3,enum=openim.sdk.common.ContentType" json:"contentType,omitempty"`
	SenderPlatformID common.Platform         `protobuf:"varint,10,opt,name=senderPlatformID,proto3,enum=openim.sdk.common.Platform" json:"senderPlatformID,omitempty"`
	SenderNickname   string                  `protobuf:"bytes,11,opt,name=senderNickname,proto3" json:"senderNickname,omitempty"`
	SenderFaceURL    string                  `protobuf:"bytes,12,opt,name=senderFaceURL,proto3" json:"senderFaceURL,omitempty"`
	GroupID          string                  `protobuf:"bytes,13,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Seq              int64                   `protobuf:"varint,15,opt,name=seq,proto3" json:"seq,omitempty"`
	IsRead           bool                    `protobuf:"varint,16,opt,name=isRead,proto3" json:"isRead,omitempty"`
	Status           common.MsgStatus        `protobuf:"varint,17,opt,name=status,proto3,enum=openim.sdk.common.MsgStatus" json:"status,omitempty"`
	OfflinePush      *common.OfflinePushInfo `protobuf:"bytes,18,opt,name=offlinePush,proto3" json:"offlinePush,omitempty"`
	Ex               string                  `protobuf:"bytes,20,opt,name=ex,proto3" json:"ex,omitempty"`
	LocalEx          string                  `protobuf:"bytes,21,opt,name=localEx,proto3" json:"localEx,omitempty"`
	AttachedInfoElem *AttachedInfoElem       `protobuf:"bytes,22,opt,name=attachedInfoElem,proto3" json:"attachedInfoElem,omitempty"`
	// Types that are assignable to Content:
	//
	//	*IMMessage_TextElem
	//	*IMMessage_CardElem
	//	*IMMessage_PictureElem
	//	*IMMessage_SoundElem
	//	*IMMessage_VideoElem
	//	*IMMessage_FileElem
	//	*IMMessage_MergeElem
	//	*IMMessage_AtTextElem
	//	*IMMessage_FaceElem
	//	*IMMessage_LocationElem
	//	*IMMessage_CustomElem
	//	*IMMessage_QuoteElem
	//	*IMMessage_AdvancedTextElem
	//	*IMMessage_TypingElem
	//	*IMMessage_StreamElem
	//	*IMMessage_GroupCreatedTips
	//	*IMMessage_GroupInfoSetTips
	//	*IMMessage_GroupInfoSetNameTips
	//	*IMMessage_GroupInfoSetAnnouncementTips
	//	*IMMessage_JoinGroupApplicationTips
	//	*IMMessage_MemberQuitTips
	//	*IMMessage_GroupApplicationAcceptedTips
	//	*IMMessage_GroupApplicationRejectedTips
	//	*IMMessage_GroupOwnerTransferredTips
	//	*IMMessage_MemberKickedTips
	//	*IMMessage_MemberInvitedTips
	//	*IMMessage_MemberEnterTips
	//	*IMMessage_GroupDismissedTips
	//	*IMMessage_GroupMemberMutedTips
	//	*IMMessage_GroupMemberCancelMutedTips
	//	*IMMessage_GroupMutedTips
	//	*IMMessage_GroupCancelMutedTips
	//	*IMMessage_GroupMemberInfoSetTips
	//	*IMMessage_FriendApplicationTips
	//	*IMMessage_FriendApplicationApprovedTips
	//	*IMMessage_FriendApplicationRejectedTips
	//	*IMMessage_FriendAddedTips
	//	*IMMessage_FriendDeletedTips
	//	*IMMessage_BlackAddedTips
	//	*IMMessage_BlackDeletedTips
	//	*IMMessage_FriendInfoChangedTips
	//	*IMMessage_UserInfoUpdatedTips
	//	*IMMessage_UserStatusChangeTips
	//	*IMMessage_UserCommandAddTips
	//	*IMMessage_UserCommandUpdateTips
	//	*IMMessage_UserCommandDeleteTips
	//	*IMMessage_ConversationUpdateTips
	//	*IMMessage_ConversationSetPrivateTips
	//	*IMMessage_ConversationHasReadTips
	//	*IMMessage_DeleteMessageTips
	//	*IMMessage_RevokeMsgTips
	//	*IMMessage_ClearConversationTips
	//	*IMMessage_DeleteMsgsTips
	//	*IMMessage_MarkAsReadTips
	//	*IMMessage_FriendsInfoUpdateTips
	//	*IMMessage_SubUserOnlineStatusTips
	Content isIMMessage_Content `protobuf_oneof:"content"`
}

func (x *IMMessage) Reset() {
	*x = IMMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMessage) ProtoMessage() {}

func (x *IMMessage) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMessage.ProtoReflect.Descriptor instead.
func (*IMMessage) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{80}
}

func (x *IMMessage) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

func (x *IMMessage) GetServerMsgID() string {
	if x != nil {
		return x.ServerMsgID
	}
	return ""
}

func (x *IMMessage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMMessage) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *IMMessage) GetSessionType() common.SessionType {
	if x != nil {
		return x.SessionType
	}
	return common.SessionType(0)
}

func (x *IMMessage) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *IMMessage) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *IMMessage) GetMsgFrom() common.MsgFrom {
	if x != nil {
		return x.MsgFrom
	}
	return common.MsgFrom(0)
}

func (x *IMMessage) GetContentType() common.ContentType {
	if x != nil {
		return x.ContentType
	}
	return common.ContentType(0)
}

func (x *IMMessage) GetSenderPlatformID() common.Platform {
	if x != nil {
		return x.SenderPlatformID
	}
	return common.Platform(0)
}

func (x *IMMessage) GetSenderNickname() string {
	if x != nil {
		return x.SenderNickname
	}
	return ""
}

func (x *IMMessage) GetSenderFaceURL() string {
	if x != nil {
		return x.SenderFaceURL
	}
	return ""
}

func (x *IMMessage) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMMessage) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *IMMessage) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *IMMessage) GetStatus() common.MsgStatus {
	if x != nil {
		return x.Status
	}
	return common.MsgStatus(0)
}

func (x *IMMessage) GetOfflinePush() *common.OfflinePushInfo {
	if x != nil {
		return x.OfflinePush
	}
	return nil
}

func (x *IMMessage) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMMessage) GetLocalEx() string {
	if x != nil {
		return x.LocalEx
	}
	return ""
}

func (x *IMMessage) GetAttachedInfoElem() *AttachedInfoElem {
	if x != nil {
		return x.AttachedInfoElem
	}
	return nil
}

func (m *IMMessage) GetContent() isIMMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *IMMessage) GetTextElem() *TextElem {
	if x, ok := x.GetContent().(*IMMessage_TextElem); ok {
		return x.TextElem
	}
	return nil
}

func (x *IMMessage) GetCardElem() *CardElem {
	if x, ok := x.GetContent().(*IMMessage_CardElem); ok {
		return x.CardElem
	}
	return nil
}

func (x *IMMessage) GetPictureElem() *PictureElem {
	if x, ok := x.GetContent().(*IMMessage_PictureElem); ok {
		return x.PictureElem
	}
	return nil
}

func (x *IMMessage) GetSoundElem() *SoundElem {
	if x, ok := x.GetContent().(*IMMessage_SoundElem); ok {
		return x.SoundElem
	}
	return nil
}

func (x *IMMessage) GetVideoElem() *VideoElem {
	if x, ok := x.GetContent().(*IMMessage_VideoElem); ok {
		return x.VideoElem
	}
	return nil
}

func (x *IMMessage) GetFileElem() *FileElem {
	if x, ok := x.GetContent().(*IMMessage_FileElem); ok {
		return x.FileElem
	}
	return nil
}

func (x *IMMessage) GetMergeElem() *MergeElem {
	if x, ok := x.GetContent().(*IMMessage_MergeElem); ok {
		return x.MergeElem
	}
	return nil
}

func (x *IMMessage) GetAtTextElem() *AtTextElem {
	if x, ok := x.GetContent().(*IMMessage_AtTextElem); ok {
		return x.AtTextElem
	}
	return nil
}

func (x *IMMessage) GetFaceElem() *FaceElem {
	if x, ok := x.GetContent().(*IMMessage_FaceElem); ok {
		return x.FaceElem
	}
	return nil
}

func (x *IMMessage) GetLocationElem() *LocationElem {
	if x, ok := x.GetContent().(*IMMessage_LocationElem); ok {
		return x.LocationElem
	}
	return nil
}

func (x *IMMessage) GetCustomElem() *CustomElem {
	if x, ok := x.GetContent().(*IMMessage_CustomElem); ok {
		return x.CustomElem
	}
	return nil
}

func (x *IMMessage) GetQuoteElem() *QuoteElem {
	if x, ok := x.GetContent().(*IMMessage_QuoteElem); ok {
		return x.QuoteElem
	}
	return nil
}

func (x *IMMessage) GetAdvancedTextElem() *AdvancedTextElem {
	if x, ok := x.GetContent().(*IMMessage_AdvancedTextElem); ok {
		return x.AdvancedTextElem
	}
	return nil
}

func (x *IMMessage) GetTypingElem() *TypingElem {
	if x, ok := x.GetContent().(*IMMessage_TypingElem); ok {
		return x.TypingElem
	}
	return nil
}

func (x *IMMessage) GetStreamElem() *StreamElem {
	if x, ok := x.GetContent().(*IMMessage_StreamElem); ok {
		return x.StreamElem
	}
	return nil
}

func (x *IMMessage) GetGroupCreatedTips() *GroupCreatedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupCreatedTips); ok {
		return x.GroupCreatedTips
	}
	return nil
}

func (x *IMMessage) GetGroupInfoSetTips() *GroupInfoSetTips {
	if x, ok := x.GetContent().(*IMMessage_GroupInfoSetTips); ok {
		return x.GroupInfoSetTips
	}
	return nil
}

func (x *IMMessage) GetGroupInfoSetNameTips() *GroupInfoSetNameTips {
	if x, ok := x.GetContent().(*IMMessage_GroupInfoSetNameTips); ok {
		return x.GroupInfoSetNameTips
	}
	return nil
}

func (x *IMMessage) GetGroupInfoSetAnnouncementTips() *GroupInfoSetAnnouncementTips {
	if x, ok := x.GetContent().(*IMMessage_GroupInfoSetAnnouncementTips); ok {
		return x.GroupInfoSetAnnouncementTips
	}
	return nil
}

func (x *IMMessage) GetJoinGroupApplicationTips() *JoinGroupApplicationTips {
	if x, ok := x.GetContent().(*IMMessage_JoinGroupApplicationTips); ok {
		return x.JoinGroupApplicationTips
	}
	return nil
}

func (x *IMMessage) GetMemberQuitTips() *MemberQuitTips {
	if x, ok := x.GetContent().(*IMMessage_MemberQuitTips); ok {
		return x.MemberQuitTips
	}
	return nil
}

func (x *IMMessage) GetGroupApplicationAcceptedTips() *GroupApplicationAcceptedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupApplicationAcceptedTips); ok {
		return x.GroupApplicationAcceptedTips
	}
	return nil
}

func (x *IMMessage) GetGroupApplicationRejectedTips() *GroupApplicationRejectedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupApplicationRejectedTips); ok {
		return x.GroupApplicationRejectedTips
	}
	return nil
}

func (x *IMMessage) GetGroupOwnerTransferredTips() *GroupOwnerTransferredTips {
	if x, ok := x.GetContent().(*IMMessage_GroupOwnerTransferredTips); ok {
		return x.GroupOwnerTransferredTips
	}
	return nil
}

func (x *IMMessage) GetMemberKickedTips() *MemberKickedTips {
	if x, ok := x.GetContent().(*IMMessage_MemberKickedTips); ok {
		return x.MemberKickedTips
	}
	return nil
}

func (x *IMMessage) GetMemberInvitedTips() *MemberInvitedTips {
	if x, ok := x.GetContent().(*IMMessage_MemberInvitedTips); ok {
		return x.MemberInvitedTips
	}
	return nil
}

func (x *IMMessage) GetMemberEnterTips() *MemberEnterTips {
	if x, ok := x.GetContent().(*IMMessage_MemberEnterTips); ok {
		return x.MemberEnterTips
	}
	return nil
}

func (x *IMMessage) GetGroupDismissedTips() *GroupDismissedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupDismissedTips); ok {
		return x.GroupDismissedTips
	}
	return nil
}

func (x *IMMessage) GetGroupMemberMutedTips() *GroupMemberMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupMemberMutedTips); ok {
		return x.GroupMemberMutedTips
	}
	return nil
}

func (x *IMMessage) GetGroupMemberCancelMutedTips() *GroupMemberCancelMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupMemberCancelMutedTips); ok {
		return x.GroupMemberCancelMutedTips
	}
	return nil
}

func (x *IMMessage) GetGroupMutedTips() *GroupMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupMutedTips); ok {
		return x.GroupMutedTips
	}
	return nil
}

func (x *IMMessage) GetGroupCancelMutedTips() *GroupCancelMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupCancelMutedTips); ok {
		return x.GroupCancelMutedTips
	}
	return nil
}

func (x *IMMessage) GetGroupMemberInfoSetTips() *GroupMemberInfoSetTips {
	if x, ok := x.GetContent().(*IMMessage_GroupMemberInfoSetTips); ok {
		return x.GroupMemberInfoSetTips
	}
	return nil
}

func (x *IMMessage) GetFriendApplicationTips() *FriendApplicationTips {
	if x, ok := x.GetContent().(*IMMessage_FriendApplicationTips); ok {
		return x.FriendApplicationTips
	}
	return nil
}

func (x *IMMessage) GetFriendApplicationApprovedTips() *FriendApplicationApprovedTips {
	if x, ok := x.GetContent().(*IMMessage_FriendApplicationApprovedTips); ok {
		return x.FriendApplicationApprovedTips
	}
	return nil
}

func (x *IMMessage) GetFriendApplicationRejectedTips() *FriendApplicationRejectedTips {
	if x, ok := x.GetContent().(*IMMessage_FriendApplicationRejectedTips); ok {
		return x.FriendApplicationRejectedTips
	}
	return nil
}

func (x *IMMessage) GetFriendAddedTips() *FriendAddedTips {
	if x, ok := x.GetContent().(*IMMessage_FriendAddedTips); ok {
		return x.FriendAddedTips
	}
	return nil
}

func (x *IMMessage) GetFriendDeletedTips() *FriendDeletedTips {
	if x, ok := x.GetContent().(*IMMessage_FriendDeletedTips); ok {
		return x.FriendDeletedTips
	}
	return nil
}

func (x *IMMessage) GetBlackAddedTips() *BlackAddedTips {
	if x, ok := x.GetContent().(*IMMessage_BlackAddedTips); ok {
		return x.BlackAddedTips
	}
	return nil
}

func (x *IMMessage) GetBlackDeletedTips() *BlackDeletedTips {
	if x, ok := x.GetContent().(*IMMessage_BlackDeletedTips); ok {
		return x.BlackDeletedTips
	}
	return nil
}

func (x *IMMessage) GetFriendInfoChangedTips() *FriendInfoChangedTips {
	if x, ok := x.GetContent().(*IMMessage_FriendInfoChangedTips); ok {
		return x.FriendInfoChangedTips
	}
	return nil
}

func (x *IMMessage) GetUserInfoUpdatedTips() *UserInfoUpdatedTips {
	if x, ok := x.GetContent().(*IMMessage_UserInfoUpdatedTips); ok {
		return x.UserInfoUpdatedTips
	}
	return nil
}

func (x *IMMessage) GetUserStatusChangeTips() *UserStatusChangeTips {
	if x, ok := x.GetContent().(*IMMessage_UserStatusChangeTips); ok {
		return x.UserStatusChangeTips
	}
	return nil
}

func (x *IMMessage) GetUserCommandAddTips() *UserCommandAddTips {
	if x, ok := x.GetContent().(*IMMessage_UserCommandAddTips); ok {
		return x.UserCommandAddTips
	}
	return nil
}

func (x *IMMessage) GetUserCommandUpdateTips() *UserCommandUpdateTips {
	if x, ok := x.GetContent().(*IMMessage_UserCommandUpdateTips); ok {
		return x.UserCommandUpdateTips
	}
	return nil
}

func (x *IMMessage) GetUserCommandDeleteTips() *UserCommandDeleteTips {
	if x, ok := x.GetContent().(*IMMessage_UserCommandDeleteTips); ok {
		return x.UserCommandDeleteTips
	}
	return nil
}

func (x *IMMessage) GetConversationUpdateTips() *ConversationUpdateTips {
	if x, ok := x.GetContent().(*IMMessage_ConversationUpdateTips); ok {
		return x.ConversationUpdateTips
	}
	return nil
}

func (x *IMMessage) GetConversationSetPrivateTips() *ConversationSetPrivateTips {
	if x, ok := x.GetContent().(*IMMessage_ConversationSetPrivateTips); ok {
		return x.ConversationSetPrivateTips
	}
	return nil
}

func (x *IMMessage) GetConversationHasReadTips() *ConversationHasReadTips {
	if x, ok := x.GetContent().(*IMMessage_ConversationHasReadTips); ok {
		return x.ConversationHasReadTips
	}
	return nil
}

func (x *IMMessage) GetDeleteMessageTips() *DeleteMessageTips {
	if x, ok := x.GetContent().(*IMMessage_DeleteMessageTips); ok {
		return x.DeleteMessageTips
	}
	return nil
}

func (x *IMMessage) GetRevokeMsgTips() *RevokeMsgTips {
	if x, ok := x.GetContent().(*IMMessage_RevokeMsgTips); ok {
		return x.RevokeMsgTips
	}
	return nil
}

func (x *IMMessage) GetClearConversationTips() *ClearConversationTips {
	if x, ok := x.GetContent().(*IMMessage_ClearConversationTips); ok {
		return x.ClearConversationTips
	}
	return nil
}

func (x *IMMessage) GetDeleteMsgsTips() *DeleteMsgsTips {
	if x, ok := x.GetContent().(*IMMessage_DeleteMsgsTips); ok {
		return x.DeleteMsgsTips
	}
	return nil
}

func (x *IMMessage) GetMarkAsReadTips() *MarkAsReadTips {
	if x, ok := x.GetContent().(*IMMessage_MarkAsReadTips); ok {
		return x.MarkAsReadTips
	}
	return nil
}

func (x *IMMessage) GetFriendsInfoUpdateTips() *FriendsInfoUpdateTips {
	if x, ok := x.GetContent().(*IMMessage_FriendsInfoUpdateTips); ok {
		return x.FriendsInfoUpdateTips
	}
	return nil
}

func (x *IMMessage) GetSubUserOnlineStatusTips() *SubUserOnlineStatusTips {
	if x, ok := x.GetContent().(*IMMessage_SubUserOnlineStatusTips); ok {
		return x.SubUserOnlineStatusTips
	}
	return nil
}

type isIMMessage_Content interface {
	isIMMessage_Content()
}

type IMMessage_TextElem struct {
	TextElem *TextElem `protobuf:"bytes,23,opt,name=textElem,proto3,oneof"`
}

type IMMessage_CardElem struct {
	CardElem *CardElem `protobuf:"bytes,24,opt,name=cardElem,proto3,oneof"`
}

type IMMessage_PictureElem struct {
	PictureElem *PictureElem `protobuf:"bytes,25,opt,name=pictureElem,proto3,oneof"`
}

type IMMessage_SoundElem struct {
	SoundElem *SoundElem `protobuf:"bytes,26,opt,name=soundElem,proto3,oneof"`
}

type IMMessage_VideoElem struct {
	VideoElem *VideoElem `protobuf:"bytes,27,opt,name=videoElem,proto3,oneof"`
}

type IMMessage_FileElem struct {
	FileElem *FileElem `protobuf:"bytes,28,opt,name=fileElem,proto3,oneof"`
}

type IMMessage_MergeElem struct {
	MergeElem *MergeElem `protobuf:"bytes,29,opt,name=mergeElem,proto3,oneof"`
}

type IMMessage_AtTextElem struct {
	AtTextElem *AtTextElem `protobuf:"bytes,30,opt,name=atTextElem,proto3,oneof"`
}

type IMMessage_FaceElem struct {
	FaceElem *FaceElem `protobuf:"bytes,31,opt,name=faceElem,proto3,oneof"`
}

type IMMessage_LocationElem struct {
	LocationElem *LocationElem `protobuf:"bytes,32,opt,name=locationElem,proto3,oneof"`
}

type IMMessage_CustomElem struct {
	CustomElem *CustomElem `protobuf:"bytes,33,opt,name=customElem,proto3,oneof"`
}

type IMMessage_QuoteElem struct {
	QuoteElem *QuoteElem `protobuf:"bytes,34,opt,name=quoteElem,proto3,oneof"`
}

type IMMessage_AdvancedTextElem struct {
	AdvancedTextElem *AdvancedTextElem `protobuf:"bytes,35,opt,name=advancedTextElem,proto3,oneof"`
}

type IMMessage_TypingElem struct {
	TypingElem *TypingElem `protobuf:"bytes,36,opt,name=typingElem,proto3,oneof"`
}

type IMMessage_StreamElem struct {
	StreamElem *StreamElem `protobuf:"bytes,37,opt,name=streamElem,proto3,oneof"`
}

type IMMessage_GroupCreatedTips struct {
	GroupCreatedTips *GroupCreatedTips `protobuf:"bytes,38,opt,name=groupCreatedTips,proto3,oneof"`
}

type IMMessage_GroupInfoSetTips struct {
	GroupInfoSetTips *GroupInfoSetTips `protobuf:"bytes,39,opt,name=groupInfoSetTips,proto3,oneof"`
}

type IMMessage_GroupInfoSetNameTips struct {
	GroupInfoSetNameTips *GroupInfoSetNameTips `protobuf:"bytes,40,opt,name=groupInfoSetNameTips,proto3,oneof"`
}

type IMMessage_GroupInfoSetAnnouncementTips struct {
	GroupInfoSetAnnouncementTips *GroupInfoSetAnnouncementTips `protobuf:"bytes,41,opt,name=groupInfoSetAnnouncementTips,proto3,oneof"`
}

type IMMessage_JoinGroupApplicationTips struct {
	JoinGroupApplicationTips *JoinGroupApplicationTips `protobuf:"bytes,42,opt,name=joinGroupApplicationTips,proto3,oneof"`
}

type IMMessage_MemberQuitTips struct {
	MemberQuitTips *MemberQuitTips `protobuf:"bytes,43,opt,name=memberQuitTips,proto3,oneof"`
}

type IMMessage_GroupApplicationAcceptedTips struct {
	GroupApplicationAcceptedTips *GroupApplicationAcceptedTips `protobuf:"bytes,44,opt,name=groupApplicationAcceptedTips,proto3,oneof"`
}

type IMMessage_GroupApplicationRejectedTips struct {
	GroupApplicationRejectedTips *GroupApplicationRejectedTips `protobuf:"bytes,45,opt,name=groupApplicationRejectedTips,proto3,oneof"`
}

type IMMessage_GroupOwnerTransferredTips struct {
	GroupOwnerTransferredTips *GroupOwnerTransferredTips `protobuf:"bytes,46,opt,name=groupOwnerTransferredTips,proto3,oneof"`
}

type IMMessage_MemberKickedTips struct {
	MemberKickedTips *MemberKickedTips `protobuf:"bytes,47,opt,name=memberKickedTips,proto3,oneof"`
}

type IMMessage_MemberInvitedTips struct {
	MemberInvitedTips *MemberInvitedTips `protobuf:"bytes,48,opt,name=memberInvitedTips,proto3,oneof"`
}

type IMMessage_MemberEnterTips struct {
	MemberEnterTips *MemberEnterTips `protobuf:"bytes,49,opt,name=memberEnterTips,proto3,oneof"`
}

type IMMessage_GroupDismissedTips struct {
	GroupDismissedTips *GroupDismissedTips `protobuf:"bytes,50,opt,name=groupDismissedTips,proto3,oneof"`
}

type IMMessage_GroupMemberMutedTips struct {
	GroupMemberMutedTips *GroupMemberMutedTips `protobuf:"bytes,51,opt,name=groupMemberMutedTips,proto3,oneof"`
}

type IMMessage_GroupMemberCancelMutedTips struct {
	GroupMemberCancelMutedTips *GroupMemberCancelMutedTips `protobuf:"bytes,52,opt,name=groupMemberCancelMutedTips,proto3,oneof"`
}

type IMMessage_GroupMutedTips struct {
	GroupMutedTips *GroupMutedTips `protobuf:"bytes,53,opt,name=groupMutedTips,proto3,oneof"`
}

type IMMessage_GroupCancelMutedTips struct {
	GroupCancelMutedTips *GroupCancelMutedTips `protobuf:"bytes,54,opt,name=groupCancelMutedTips,proto3,oneof"`
}

type IMMessage_GroupMemberInfoSetTips struct {
	GroupMemberInfoSetTips *GroupMemberInfoSetTips `protobuf:"bytes,55,opt,name=groupMemberInfoSetTips,proto3,oneof"`
}

type IMMessage_FriendApplicationTips struct {
	FriendApplicationTips *FriendApplicationTips `protobuf:"bytes,56,opt,name=friendApplicationTips,proto3,oneof"`
}

type IMMessage_FriendApplicationApprovedTips struct {
	FriendApplicationApprovedTips *FriendApplicationApprovedTips `protobuf:"bytes,57,opt,name=friendApplicationApprovedTips,proto3,oneof"`
}

type IMMessage_FriendApplicationRejectedTips struct {
	FriendApplicationRejectedTips *FriendApplicationRejectedTips `protobuf:"bytes,58,opt,name=friendApplicationRejectedTips,proto3,oneof"`
}

type IMMessage_FriendAddedTips struct {
	FriendAddedTips *FriendAddedTips `protobuf:"bytes,59,opt,name=friendAddedTips,proto3,oneof"`
}

type IMMessage_FriendDeletedTips struct {
	FriendDeletedTips *FriendDeletedTips `protobuf:"bytes,60,opt,name=friendDeletedTips,proto3,oneof"`
}

type IMMessage_BlackAddedTips struct {
	BlackAddedTips *BlackAddedTips `protobuf:"bytes,61,opt,name=blackAddedTips,proto3,oneof"`
}

type IMMessage_BlackDeletedTips struct {
	BlackDeletedTips *BlackDeletedTips `protobuf:"bytes,62,opt,name=blackDeletedTips,proto3,oneof"`
}

type IMMessage_FriendInfoChangedTips struct {
	FriendInfoChangedTips *FriendInfoChangedTips `protobuf:"bytes,63,opt,name=friendInfoChangedTips,proto3,oneof"`
}

type IMMessage_UserInfoUpdatedTips struct {
	UserInfoUpdatedTips *UserInfoUpdatedTips `protobuf:"bytes,64,opt,name=userInfoUpdatedTips,proto3,oneof"`
}

type IMMessage_UserStatusChangeTips struct {
	UserStatusChangeTips *UserStatusChangeTips `protobuf:"bytes,65,opt,name=userStatusChangeTips,proto3,oneof"`
}

type IMMessage_UserCommandAddTips struct {
	UserCommandAddTips *UserCommandAddTips `protobuf:"bytes,66,opt,name=userCommandAddTips,proto3,oneof"`
}

type IMMessage_UserCommandUpdateTips struct {
	UserCommandUpdateTips *UserCommandUpdateTips `protobuf:"bytes,67,opt,name=userCommandUpdateTips,proto3,oneof"`
}

type IMMessage_UserCommandDeleteTips struct {
	UserCommandDeleteTips *UserCommandDeleteTips `protobuf:"bytes,68,opt,name=userCommandDeleteTips,proto3,oneof"`
}

type IMMessage_ConversationUpdateTips struct {
	ConversationUpdateTips *ConversationUpdateTips `protobuf:"bytes,69,opt,name=conversationUpdateTips,proto3,oneof"`
}

type IMMessage_ConversationSetPrivateTips struct {
	ConversationSetPrivateTips *ConversationSetPrivateTips `protobuf:"bytes,70,opt,name=conversationSetPrivateTips,proto3,oneof"`
}

type IMMessage_ConversationHasReadTips struct {
	ConversationHasReadTips *ConversationHasReadTips `protobuf:"bytes,71,opt,name=conversationHasReadTips,proto3,oneof"`
}

type IMMessage_DeleteMessageTips struct {
	DeleteMessageTips *DeleteMessageTips `protobuf:"bytes,72,opt,name=deleteMessageTips,proto3,oneof"`
}

type IMMessage_RevokeMsgTips struct {
	RevokeMsgTips *RevokeMsgTips `protobuf:"bytes,73,opt,name=revokeMsgTips,proto3,oneof"`
}

type IMMessage_ClearConversationTips struct {
	ClearConversationTips *ClearConversationTips `protobuf:"bytes,74,opt,name=clearConversationTips,proto3,oneof"`
}

type IMMessage_DeleteMsgsTips struct {
	DeleteMsgsTips *DeleteMsgsTips `protobuf:"bytes,75,opt,name=deleteMsgsTips,proto3,oneof"`
}

type IMMessage_MarkAsReadTips struct {
	MarkAsReadTips *MarkAsReadTips `protobuf:"bytes,76,opt,name=markAsReadTips,proto3,oneof"`
}

type IMMessage_FriendsInfoUpdateTips struct {
	FriendsInfoUpdateTips *FriendsInfoUpdateTips `protobuf:"bytes,77,opt,name=friendsInfoUpdateTips,proto3,oneof"`
}

type IMMessage_SubUserOnlineStatusTips struct {
	SubUserOnlineStatusTips *SubUserOnlineStatusTips `protobuf:"bytes,78,opt,name=subUserOnlineStatusTips,proto3,oneof"` //    StreamMsgTips streamMsgTips = 79;
}

func (*IMMessage_TextElem) isIMMessage_Content() {}

func (*IMMessage_CardElem) isIMMessage_Content() {}

func (*IMMessage_PictureElem) isIMMessage_Content() {}

func (*IMMessage_SoundElem) isIMMessage_Content() {}

func (*IMMessage_VideoElem) isIMMessage_Content() {}

func (*IMMessage_FileElem) isIMMessage_Content() {}

func (*IMMessage_MergeElem) isIMMessage_Content() {}

func (*IMMessage_AtTextElem) isIMMessage_Content() {}

func (*IMMessage_FaceElem) isIMMessage_Content() {}

func (*IMMessage_LocationElem) isIMMessage_Content() {}

func (*IMMessage_CustomElem) isIMMessage_Content() {}

func (*IMMessage_QuoteElem) isIMMessage_Content() {}

func (*IMMessage_AdvancedTextElem) isIMMessage_Content() {}

func (*IMMessage_TypingElem) isIMMessage_Content() {}

func (*IMMessage_StreamElem) isIMMessage_Content() {}

func (*IMMessage_GroupCreatedTips) isIMMessage_Content() {}

func (*IMMessage_GroupInfoSetTips) isIMMessage_Content() {}

func (*IMMessage_GroupInfoSetNameTips) isIMMessage_Content() {}

func (*IMMessage_GroupInfoSetAnnouncementTips) isIMMessage_Content() {}

func (*IMMessage_JoinGroupApplicationTips) isIMMessage_Content() {}

func (*IMMessage_MemberQuitTips) isIMMessage_Content() {}

func (*IMMessage_GroupApplicationAcceptedTips) isIMMessage_Content() {}

func (*IMMessage_GroupApplicationRejectedTips) isIMMessage_Content() {}

func (*IMMessage_GroupOwnerTransferredTips) isIMMessage_Content() {}

func (*IMMessage_MemberKickedTips) isIMMessage_Content() {}

func (*IMMessage_MemberInvitedTips) isIMMessage_Content() {}

func (*IMMessage_MemberEnterTips) isIMMessage_Content() {}

func (*IMMessage_GroupDismissedTips) isIMMessage_Content() {}

func (*IMMessage_GroupMemberMutedTips) isIMMessage_Content() {}

func (*IMMessage_GroupMemberCancelMutedTips) isIMMessage_Content() {}

func (*IMMessage_GroupMutedTips) isIMMessage_Content() {}

func (*IMMessage_GroupCancelMutedTips) isIMMessage_Content() {}

func (*IMMessage_GroupMemberInfoSetTips) isIMMessage_Content() {}

func (*IMMessage_FriendApplicationTips) isIMMessage_Content() {}

func (*IMMessage_FriendApplicationApprovedTips) isIMMessage_Content() {}

func (*IMMessage_FriendApplicationRejectedTips) isIMMessage_Content() {}

func (*IMMessage_FriendAddedTips) isIMMessage_Content() {}

func (*IMMessage_FriendDeletedTips) isIMMessage_Content() {}

func (*IMMessage_BlackAddedTips) isIMMessage_Content() {}

func (*IMMessage_BlackDeletedTips) isIMMessage_Content() {}

func (*IMMessage_FriendInfoChangedTips) isIMMessage_Content() {}

func (*IMMessage_UserInfoUpdatedTips) isIMMessage_Content() {}

func (*IMMessage_UserStatusChangeTips) isIMMessage_Content() {}

func (*IMMessage_UserCommandAddTips) isIMMessage_Content() {}

func (*IMMessage_UserCommandUpdateTips) isIMMessage_Content() {}

func (*IMMessage_UserCommandDeleteTips) isIMMessage_Content() {}

func (*IMMessage_ConversationUpdateTips) isIMMessage_Content() {}

func (*IMMessage_ConversationSetPrivateTips) isIMMessage_Content() {}

func (*IMMessage_ConversationHasReadTips) isIMMessage_Content() {}

func (*IMMessage_DeleteMessageTips) isIMMessage_Content() {}

func (*IMMessage_RevokeMsgTips) isIMMessage_Content() {}

func (*IMMessage_ClearConversationTips) isIMMessage_Content() {}

func (*IMMessage_DeleteMsgsTips) isIMMessage_Content() {}

func (*IMMessage_MarkAsReadTips) isIMMessage_Content() {}

func (*IMMessage_FriendsInfoUpdateTips) isIMMessage_Content() {}

func (*IMMessage_SubUserOnlineStatusTips) isIMMessage_Content() {}

var File_shared_proto protoreflect.FileDescriptor

var file_shared_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf6, 0x01, 0x0a, 0x06, 0x49, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x4d,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0xd4,
	0x02, 0x0a, 0x08, 0x49, 0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x07, 0x49, 0x4d, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0xbd, 0x03,
	0x0a, 0x0f, 0x49, 0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x83, 0x05,
	0x0a, 0x07, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6a, 0x6f, 0x69,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x06, 0x0a, 0x0e,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x4d,
	0x73, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6a, 0x6f,
	0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8b,
	0x06, 0x0a, 0x0e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x41, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x62, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x4a, 0x0a, 0x06,
	0x41, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0f,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb5, 0x01, 0x0a, 0x0d,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x52, 0x4c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x68,
	0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x89, 0x02, 0x0a, 0x0b, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x09, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x52,
	0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0xd7, 0x01, 0x0a,
	0x09, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49,
	0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x41, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x74,
	0x53, 0x65, 0x6c, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x74,
	0x53, 0x65, 0x6c, 0x66, 0x22, 0x34, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x0c, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x11,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x10,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x70, 0x73, 0x22, 0x66, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68,
	0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x0e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x61, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x4f,
	0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x72,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x22, 0x9a, 0x01,
	0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x8a, 0x01, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9d, 0x01, 0x0a,
	0x18, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x22, 0xa6, 0x01, 0x0a,
	0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x3c, 0x0a, 0x08, 0x71, 0x75, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x08, 0x71, 0x75, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x73,
	0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x19,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6f, 0x6c, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x11, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0b, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x14,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x75, 0x74,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x1a, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x0e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xa8, 0x01, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x16,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x11,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x0c, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x15, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x43,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x1d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x9f,
	0x01, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x58, 0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x0e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x57, 0x0a, 0x10, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x15, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x2d, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x60, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x71, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x71, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x22, 0xb1, 0x03, 0x0a, 0x15, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x71, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x59, 0x0a, 0x15,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22, 0x64, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x73, 0x67, 0x73, 0x54, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x71,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x71, 0x73, 0x22, 0x98, 0x01,
	0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b,
	0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x71, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x71, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x71, 0x22, 0x7a, 0x0a, 0x15, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x44, 0x73, 0x22, 0x5f, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x44, 0x73, 0x22, 0x67, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6c, 0x65,
	0x6d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0x6d,
	0x0a, 0x13, 0x53, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xd5, 0x2c,
	0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x34, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x10, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x12, 0x4f, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x42, 0x0a,
	0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x3c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6c, 0x65, 0x6d,
	0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x39, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x61,
	0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c,
	0x65, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x51, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x74,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x51, 0x0a,
	0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x51, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x14, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x75, 0x0a, 0x1c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x69, 0x0a, 0x18, 0x6a, 0x6f, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x70, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x18, 0x6a, 0x6f, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75,
	0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x75, 0x0a, 0x1c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x75, 0x0a, 0x1c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48,
	0x00, 0x52, 0x1c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x6c, 0x0a, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73,
	0x48, 0x00, 0x52, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x51, 0x0a,
	0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x54, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54,
	0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x5d, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x6f,
	0x0a, 0x1a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x4b, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x14,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x63, 0x0a, 0x16, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x74, 0x54, 0x69, 0x70, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x60, 0x0a, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x15, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x78, 0x0a, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x78, 0x0a, 0x1d,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x15,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x5a,
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x70, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x70,
	0x73, 0x48, 0x00, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18,
	0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x63, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70,
	0x73, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x6f, 0x0a, 0x1a, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00,
	0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x66, 0x0a, 0x17,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x70, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x73, 0x67, 0x54,
	0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x73, 0x67,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x15, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x73, 0x54, 0x69, 0x70, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x54, 0x69, 0x70,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x73, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x60, 0x0a, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x15, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x66, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x70, 0x73, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x70, 0x73, 0x48,
	0x00, 0x52, 0x17, 0x73, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x70, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x29, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x10, 0x02,
	0x2a, 0x6d, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x4f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x05, 0x42,
	0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_shared_proto_rawDescOnce sync.Once
	file_shared_proto_rawDescData = file_shared_proto_rawDesc
)

func file_shared_proto_rawDescGZIP() []byte {
	file_shared_proto_rawDescOnce.Do(func() {
		file_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_shared_proto_rawDescData)
	})
	return file_shared_proto_rawDescData
}

var file_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 81)
var file_shared_proto_goTypes = []interface{}{
	(GroupStatus)(0),                      // 0: openim.sdk.shared.GroupStatus
	(GroupFilter)(0),                      // 1: openim.sdk.shared.GroupFilter
	(*IMUser)(nil),                        // 2: openim.sdk.shared.IMUser
	(*CommandInfo)(nil),                   // 3: openim.sdk.shared.CommandInfo
	(*IMFriend)(nil),                      // 4: openim.sdk.shared.IMFriend
	(*IMBlack)(nil),                       // 5: openim.sdk.shared.IMBlack
	(*IMFriendRequest)(nil),               // 6: openim.sdk.shared.IMFriendRequest
	(*IMGroup)(nil),                       // 7: openim.sdk.shared.IMGroup
	(*IMGroupMember)(nil),                 // 8: openim.sdk.shared.IMGroupMember
	(*IMGroupRequest)(nil),                // 9: openim.sdk.shared.IMGroupRequest
	(*IMConversation)(nil),                // 10: openim.sdk.shared.IMConversation
	(*AtInfo)(nil),                        // 11: openim.sdk.shared.AtInfo
	(*ImageInfo)(nil),                     // 12: openim.sdk.shared.ImageInfo
	(*PictureBaseInfo)(nil),               // 13: openim.sdk.shared.PictureBaseInfo
	(*SoundBaseInfo)(nil),                 // 14: openim.sdk.shared.SoundBaseInfo
	(*VideoBaseInfo)(nil),                 // 15: openim.sdk.shared.VideoBaseInfo
	(*FileBaseInfo)(nil),                  // 16: openim.sdk.shared.FileBaseInfo
	(*TextElem)(nil),                      // 17: openim.sdk.shared.TextElem
	(*CardElem)(nil),                      // 18: openim.sdk.shared.CardElem
	(*PictureElem)(nil),                   // 19: openim.sdk.shared.PictureElem
	(*SoundElem)(nil),                     // 20: openim.sdk.shared.SoundElem
	(*VideoElem)(nil),                     // 21: openim.sdk.shared.VideoElem
	(*FileElem)(nil),                      // 22: openim.sdk.shared.FileElem
	(*MessageEntity)(nil),                 // 23: openim.sdk.shared.MessageEntity
	(*MergeElem)(nil),                     // 24: openim.sdk.shared.MergeElem
	(*AtTextElem)(nil),                    // 25: openim.sdk.shared.AtTextElem
	(*FaceElem)(nil),                      // 26: openim.sdk.shared.FaceElem
	(*LocationElem)(nil),                  // 27: openim.sdk.shared.LocationElem
	(*CustomElem)(nil),                    // 28: openim.sdk.shared.CustomElem
	(*QuoteElem)(nil),                     // 29: openim.sdk.shared.QuoteElem
	(*AdvancedTextElem)(nil),              // 30: openim.sdk.shared.AdvancedTextElem
	(*TypingElem)(nil),                    // 31: openim.sdk.shared.TypingElem
	(*StreamElem)(nil),                    // 32: openim.sdk.shared.StreamElem
	(*GroupHasReadInfo)(nil),              // 33: openim.sdk.shared.GroupHasReadInfo
	(*UploadProgress)(nil),                // 34: openim.sdk.shared.UploadProgress
	(*AttachedInfoElem)(nil),              // 35: openim.sdk.shared.AttachedInfoElem
	(*GroupCreatedTips)(nil),              // 36: openim.sdk.shared.GroupCreatedTips
	(*GroupInfoSetTips)(nil),              // 37: openim.sdk.shared.GroupInfoSetTips
	(*GroupInfoSetNameTips)(nil),          // 38: openim.sdk.shared.GroupInfoSetNameTips
	(*GroupInfoSetAnnouncementTips)(nil),  // 39: openim.sdk.shared.GroupInfoSetAnnouncementTips
	(*JoinGroupApplicationTips)(nil),      // 40: openim.sdk.shared.JoinGroupApplicationTips
	(*MemberQuitTips)(nil),                // 41: openim.sdk.shared.MemberQuitTips
	(*GroupApplicationAcceptedTips)(nil),  // 42: openim.sdk.shared.GroupApplicationAcceptedTips
	(*GroupApplicationRejectedTips)(nil),  // 43: openim.sdk.shared.GroupApplicationRejectedTips
	(*GroupOwnerTransferredTips)(nil),     // 44: openim.sdk.shared.GroupOwnerTransferredTips
	(*MemberKickedTips)(nil),              // 45: openim.sdk.shared.MemberKickedTips
	(*MemberInvitedTips)(nil),             // 46: openim.sdk.shared.MemberInvitedTips
	(*MemberEnterTips)(nil),               // 47: openim.sdk.shared.MemberEnterTips
	(*GroupDismissedTips)(nil),            // 48: openim.sdk.shared.GroupDismissedTips
	(*GroupMemberMutedTips)(nil),          // 49: openim.sdk.shared.GroupMemberMutedTips
	(*GroupMemberCancelMutedTips)(nil),    // 50: openim.sdk.shared.GroupMemberCancelMutedTips
	(*GroupMutedTips)(nil),                // 51: openim.sdk.shared.GroupMutedTips
	(*GroupCancelMutedTips)(nil),          // 52: openim.sdk.shared.GroupCancelMutedTips
	(*GroupMemberInfoSetTips)(nil),        // 53: openim.sdk.shared.GroupMemberInfoSetTips
	(*FriendApplication)(nil),             // 54: openim.sdk.shared.FriendApplication
	(*FromToUserID)(nil),                  // 55: openim.sdk.shared.FromToUserID
	(*FriendApplicationTips)(nil),         // 56: openim.sdk.shared.FriendApplicationTips
	(*FriendApplicationApprovedTips)(nil), // 57: openim.sdk.shared.FriendApplicationApprovedTips
	(*FriendApplicationRejectedTips)(nil), // 58: openim.sdk.shared.FriendApplicationRejectedTips
	(*FriendAddedTips)(nil),               // 59: openim.sdk.shared.FriendAddedTips
	(*FriendDeletedTips)(nil),             // 60: openim.sdk.shared.FriendDeletedTips
	(*BlackAddedTips)(nil),                // 61: openim.sdk.shared.BlackAddedTips
	(*BlackDeletedTips)(nil),              // 62: openim.sdk.shared.BlackDeletedTips
	(*FriendInfoChangedTips)(nil),         // 63: openim.sdk.shared.FriendInfoChangedTips
	(*UserInfoUpdatedTips)(nil),           // 64: openim.sdk.shared.UserInfoUpdatedTips
	(*UserStatusChangeTips)(nil),          // 65: openim.sdk.shared.UserStatusChangeTips
	(*UserCommandAddTips)(nil),            // 66: openim.sdk.shared.UserCommandAddTips
	(*UserCommandUpdateTips)(nil),         // 67: openim.sdk.shared.UserCommandUpdateTips
	(*UserCommandDeleteTips)(nil),         // 68: openim.sdk.shared.UserCommandDeleteTips
	(*ConversationUpdateTips)(nil),        // 69: openim.sdk.shared.ConversationUpdateTips
	(*ConversationSetPrivateTips)(nil),    // 70: openim.sdk.shared.ConversationSetPrivateTips
	(*ConversationHasReadTips)(nil),       // 71: openim.sdk.shared.ConversationHasReadTips
	(*DeleteMessageTips)(nil),             // 72: openim.sdk.shared.DeleteMessageTips
	(*RevokeMsgTips)(nil),                 // 73: openim.sdk.shared.RevokeMsgTips
	(*MessageRevokedContent)(nil),         // 74: openim.sdk.shared.MessageRevokedContent
	(*ClearConversationTips)(nil),         // 75: openim.sdk.shared.ClearConversationTips
	(*DeleteMsgsTips)(nil),                // 76: openim.sdk.shared.DeleteMsgsTips
	(*MarkAsReadTips)(nil),                // 77: openim.sdk.shared.MarkAsReadTips
	(*FriendsInfoUpdateTips)(nil),         // 78: openim.sdk.shared.FriendsInfoUpdateTips
	(*SubUserOnlineStatusElem)(nil),       // 79: openim.sdk.shared.SubUserOnlineStatusElem
	(*SubUserOnlineStatusTips)(nil),       // 80: openim.sdk.shared.SubUserOnlineStatusTips
	(*SubUserOnlineStatus)(nil),           // 81: openim.sdk.shared.SubUserOnlineStatus
	(*IMMessage)(nil),                     // 82: openim.sdk.shared.IMMessage
	(common.SessionType)(0),               // 83: openim.sdk.common.SessionType
	(common.ConvRecvMsgOpt)(0),            // 84: openim.sdk.common.ConvRecvMsgOpt
	(common.ConvGroupAtType)(0),           // 85: openim.sdk.common.ConvGroupAtType
	(common.MsgFrom)(0),                   // 86: openim.sdk.common.MsgFrom
	(common.ContentType)(0),               // 87: openim.sdk.common.ContentType
	(common.Platform)(0),                  // 88: openim.sdk.common.Platform
	(common.MsgStatus)(0),                 // 89: openim.sdk.common.MsgStatus
	(*common.OfflinePushInfo)(nil),        // 90: openim.sdk.common.OfflinePushInfo
}
var file_shared_proto_depIdxs = []int32{
	0,   // 0: openim.sdk.shared.IMGroup.status:type_name -> openim.sdk.shared.GroupStatus
	83,  // 1: openim.sdk.shared.IMConversation.conversationType:type_name -> openim.sdk.common.SessionType
	84,  // 2: openim.sdk.shared.IMConversation.recvMsgOpt:type_name -> openim.sdk.common.ConvRecvMsgOpt
	85,  // 3: openim.sdk.shared.IMConversation.groupAtType:type_name -> openim.sdk.common.ConvGroupAtType
	82,  // 4: openim.sdk.shared.IMConversation.latestMsg:type_name -> openim.sdk.shared.IMMessage
	13,  // 5: openim.sdk.shared.PictureElem.sourcePicture:type_name -> openim.sdk.shared.PictureBaseInfo
	13,  // 6: openim.sdk.shared.PictureElem.bigPicture:type_name -> openim.sdk.shared.PictureBaseInfo
	13,  // 7: openim.sdk.shared.PictureElem.snapshotPicture:type_name -> openim.sdk.shared.PictureBaseInfo
	82,  // 8: openim.sdk.shared.MergeElem.multiMessage:type_name -> openim.sdk.shared.IMMessage
	23,  // 9: openim.sdk.shared.MergeElem.messageEntityList:type_name -> openim.sdk.shared.MessageEntity
	11,  // 10: openim.sdk.shared.AtTextElem.atUsersInfo:type_name -> openim.sdk.shared.AtInfo
	82,  // 11: openim.sdk.shared.AtTextElem.quoteMessage:type_name -> openim.sdk.shared.IMMessage
	82,  // 12: openim.sdk.shared.QuoteElem.quoteMessage:type_name -> openim.sdk.shared.IMMessage
	23,  // 13: openim.sdk.shared.QuoteElem.messageEntityList:type_name -> openim.sdk.shared.MessageEntity
	23,  // 14: openim.sdk.shared.AdvancedTextElem.messageEntityList:type_name -> openim.sdk.shared.MessageEntity
	33,  // 15: openim.sdk.shared.AttachedInfoElem.groupHasReadInfo:type_name -> openim.sdk.shared.GroupHasReadInfo
	34,  // 16: openim.sdk.shared.AttachedInfoElem.progress:type_name -> openim.sdk.shared.UploadProgress
	7,   // 17: openim.sdk.shared.GroupCreatedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 18: openim.sdk.shared.GroupCreatedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 19: openim.sdk.shared.GroupCreatedTips.memberList:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 20: openim.sdk.shared.GroupCreatedTips.groupOwnerUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 21: openim.sdk.shared.GroupInfoSetTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 22: openim.sdk.shared.GroupInfoSetTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 23: openim.sdk.shared.GroupInfoSetNameTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 24: openim.sdk.shared.GroupInfoSetNameTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 25: openim.sdk.shared.GroupInfoSetAnnouncementTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 26: openim.sdk.shared.GroupInfoSetAnnouncementTips.group:type_name -> openim.sdk.shared.IMGroup
	7,   // 27: openim.sdk.shared.JoinGroupApplicationTips.group:type_name -> openim.sdk.shared.IMGroup
	2,   // 28: openim.sdk.shared.JoinGroupApplicationTips.applicant:type_name -> openim.sdk.shared.IMUser
	7,   // 29: openim.sdk.shared.MemberQuitTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 30: openim.sdk.shared.MemberQuitTips.quitUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 31: openim.sdk.shared.GroupApplicationAcceptedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 32: openim.sdk.shared.GroupApplicationAcceptedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 33: openim.sdk.shared.GroupApplicationRejectedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 34: openim.sdk.shared.GroupApplicationRejectedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 35: openim.sdk.shared.GroupOwnerTransferredTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 36: openim.sdk.shared.GroupOwnerTransferredTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 37: openim.sdk.shared.GroupOwnerTransferredTips.newGroupOwner:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 38: openim.sdk.shared.GroupOwnerTransferredTips.oldGroupOwnerInfo:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 39: openim.sdk.shared.MemberKickedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 40: openim.sdk.shared.MemberKickedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 41: openim.sdk.shared.MemberKickedTips.kickedUserList:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 42: openim.sdk.shared.MemberInvitedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 43: openim.sdk.shared.MemberInvitedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 44: openim.sdk.shared.MemberInvitedTips.invitedUserList:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 45: openim.sdk.shared.MemberInvitedTips.inviterUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 46: openim.sdk.shared.MemberEnterTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 47: openim.sdk.shared.MemberEnterTips.entrantUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 48: openim.sdk.shared.GroupDismissedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 49: openim.sdk.shared.GroupDismissedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 50: openim.sdk.shared.GroupMemberMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 51: openim.sdk.shared.GroupMemberMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 52: openim.sdk.shared.GroupMemberMutedTips.mutedUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 53: openim.sdk.shared.GroupMemberCancelMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 54: openim.sdk.shared.GroupMemberCancelMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 55: openim.sdk.shared.GroupMemberCancelMutedTips.mutedUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 56: openim.sdk.shared.GroupMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 57: openim.sdk.shared.GroupMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 58: openim.sdk.shared.GroupCancelMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 59: openim.sdk.shared.GroupCancelMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	7,   // 60: openim.sdk.shared.GroupMemberInfoSetTips.group:type_name -> openim.sdk.shared.IMGroup
	8,   // 61: openim.sdk.shared.GroupMemberInfoSetTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	8,   // 62: openim.sdk.shared.GroupMemberInfoSetTips.changedUser:type_name -> openim.sdk.shared.IMGroupMember
	55,  // 63: openim.sdk.shared.FriendApplicationTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	55,  // 64: openim.sdk.shared.FriendApplicationApprovedTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	55,  // 65: openim.sdk.shared.FriendApplicationRejectedTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	4,   // 66: openim.sdk.shared.FriendAddedTips.friend:type_name -> openim.sdk.shared.IMFriend
	2,   // 67: openim.sdk.shared.FriendAddedTips.opUser:type_name -> openim.sdk.shared.IMUser
	55,  // 68: openim.sdk.shared.FriendDeletedTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	55,  // 69: openim.sdk.shared.BlackAddedTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	55,  // 70: openim.sdk.shared.BlackDeletedTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	55,  // 71: openim.sdk.shared.FriendInfoChangedTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	55,  // 72: openim.sdk.shared.FriendsInfoUpdateTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	79,  // 73: openim.sdk.shared.SubUserOnlineStatusTips.subscribers:type_name -> openim.sdk.shared.SubUserOnlineStatusElem
	83,  // 74: openim.sdk.shared.IMMessage.sessionType:type_name -> openim.sdk.common.SessionType
	86,  // 75: openim.sdk.shared.IMMessage.msgFrom:type_name -> openim.sdk.common.MsgFrom
	87,  // 76: openim.sdk.shared.IMMessage.contentType:type_name -> openim.sdk.common.ContentType
	88,  // 77: openim.sdk.shared.IMMessage.senderPlatformID:type_name -> openim.sdk.common.Platform
	89,  // 78: openim.sdk.shared.IMMessage.status:type_name -> openim.sdk.common.MsgStatus
	90,  // 79: openim.sdk.shared.IMMessage.offlinePush:type_name -> openim.sdk.common.OfflinePushInfo
	35,  // 80: openim.sdk.shared.IMMessage.attachedInfoElem:type_name -> openim.sdk.shared.AttachedInfoElem
	17,  // 81: openim.sdk.shared.IMMessage.textElem:type_name -> openim.sdk.shared.TextElem
	18,  // 82: openim.sdk.shared.IMMessage.cardElem:type_name -> openim.sdk.shared.CardElem
	19,  // 83: openim.sdk.shared.IMMessage.pictureElem:type_name -> openim.sdk.shared.PictureElem
	20,  // 84: openim.sdk.shared.IMMessage.soundElem:type_name -> openim.sdk.shared.SoundElem
	21,  // 85: openim.sdk.shared.IMMessage.videoElem:type_name -> openim.sdk.shared.VideoElem
	22,  // 86: openim.sdk.shared.IMMessage.fileElem:type_name -> openim.sdk.shared.FileElem
	24,  // 87: openim.sdk.shared.IMMessage.mergeElem:type_name -> openim.sdk.shared.MergeElem
	25,  // 88: openim.sdk.shared.IMMessage.atTextElem:type_name -> openim.sdk.shared.AtTextElem
	26,  // 89: openim.sdk.shared.IMMessage.faceElem:type_name -> openim.sdk.shared.FaceElem
	27,  // 90: openim.sdk.shared.IMMessage.locationElem:type_name -> openim.sdk.shared.LocationElem
	28,  // 91: openim.sdk.shared.IMMessage.customElem:type_name -> openim.sdk.shared.CustomElem
	29,  // 92: openim.sdk.shared.IMMessage.quoteElem:type_name -> openim.sdk.shared.QuoteElem
	30,  // 93: openim.sdk.shared.IMMessage.advancedTextElem:type_name -> openim.sdk.shared.AdvancedTextElem
	31,  // 94: openim.sdk.shared.IMMessage.typingElem:type_name -> openim.sdk.shared.TypingElem
	32,  // 95: openim.sdk.shared.IMMessage.streamElem:type_name -> openim.sdk.shared.StreamElem
	36,  // 96: openim.sdk.shared.IMMessage.groupCreatedTips:type_name -> openim.sdk.shared.GroupCreatedTips
	37,  // 97: openim.sdk.shared.IMMessage.groupInfoSetTips:type_name -> openim.sdk.shared.GroupInfoSetTips
	38,  // 98: openim.sdk.shared.IMMessage.groupInfoSetNameTips:type_name -> openim.sdk.shared.GroupInfoSetNameTips
	39,  // 99: openim.sdk.shared.IMMessage.groupInfoSetAnnouncementTips:type_name -> openim.sdk.shared.GroupInfoSetAnnouncementTips
	40,  // 100: openim.sdk.shared.IMMessage.joinGroupApplicationTips:type_name -> openim.sdk.shared.JoinGroupApplicationTips
	41,  // 101: openim.sdk.shared.IMMessage.memberQuitTips:type_name -> openim.sdk.shared.MemberQuitTips
	42,  // 102: openim.sdk.shared.IMMessage.groupApplicationAcceptedTips:type_name -> openim.sdk.shared.GroupApplicationAcceptedTips
	43,  // 103: openim.sdk.shared.IMMessage.groupApplicationRejectedTips:type_name -> openim.sdk.shared.GroupApplicationRejectedTips
	44,  // 104: openim.sdk.shared.IMMessage.groupOwnerTransferredTips:type_name -> openim.sdk.shared.GroupOwnerTransferredTips
	45,  // 105: openim.sdk.shared.IMMessage.memberKickedTips:type_name -> openim.sdk.shared.MemberKickedTips
	46,  // 106: openim.sdk.shared.IMMessage.memberInvitedTips:type_name -> openim.sdk.shared.MemberInvitedTips
	47,  // 107: openim.sdk.shared.IMMessage.memberEnterTips:type_name -> openim.sdk.shared.MemberEnterTips
	48,  // 108: openim.sdk.shared.IMMessage.groupDismissedTips:type_name -> openim.sdk.shared.GroupDismissedTips
	49,  // 109: openim.sdk.shared.IMMessage.groupMemberMutedTips:type_name -> openim.sdk.shared.GroupMemberMutedTips
	50,  // 110: openim.sdk.shared.IMMessage.groupMemberCancelMutedTips:type_name -> openim.sdk.shared.GroupMemberCancelMutedTips
	51,  // 111: openim.sdk.shared.IMMessage.groupMutedTips:type_name -> openim.sdk.shared.GroupMutedTips
	52,  // 112: openim.sdk.shared.IMMessage.groupCancelMutedTips:type_name -> openim.sdk.shared.GroupCancelMutedTips
	53,  // 113: openim.sdk.shared.IMMessage.groupMemberInfoSetTips:type_name -> openim.sdk.shared.GroupMemberInfoSetTips
	56,  // 114: openim.sdk.shared.IMMessage.friendApplicationTips:type_name -> openim.sdk.shared.FriendApplicationTips
	57,  // 115: openim.sdk.shared.IMMessage.friendApplicationApprovedTips:type_name -> openim.sdk.shared.FriendApplicationApprovedTips
	58,  // 116: openim.sdk.shared.IMMessage.friendApplicationRejectedTips:type_name -> openim.sdk.shared.FriendApplicationRejectedTips
	59,  // 117: openim.sdk.shared.IMMessage.friendAddedTips:type_name -> openim.sdk.shared.FriendAddedTips
	60,  // 118: openim.sdk.shared.IMMessage.friendDeletedTips:type_name -> openim.sdk.shared.FriendDeletedTips
	61,  // 119: openim.sdk.shared.IMMessage.blackAddedTips:type_name -> openim.sdk.shared.BlackAddedTips
	62,  // 120: openim.sdk.shared.IMMessage.blackDeletedTips:type_name -> openim.sdk.shared.BlackDeletedTips
	63,  // 121: openim.sdk.shared.IMMessage.friendInfoChangedTips:type_name -> openim.sdk.shared.FriendInfoChangedTips
	64,  // 122: openim.sdk.shared.IMMessage.userInfoUpdatedTips:type_name -> openim.sdk.shared.UserInfoUpdatedTips
	65,  // 123: openim.sdk.shared.IMMessage.userStatusChangeTips:type_name -> openim.sdk.shared.UserStatusChangeTips
	66,  // 124: openim.sdk.shared.IMMessage.userCommandAddTips:type_name -> openim.sdk.shared.UserCommandAddTips
	67,  // 125: openim.sdk.shared.IMMessage.userCommandUpdateTips:type_name -> openim.sdk.shared.UserCommandUpdateTips
	68,  // 126: openim.sdk.shared.IMMessage.userCommandDeleteTips:type_name -> openim.sdk.shared.UserCommandDeleteTips
	69,  // 127: openim.sdk.shared.IMMessage.conversationUpdateTips:type_name -> openim.sdk.shared.ConversationUpdateTips
	70,  // 128: openim.sdk.shared.IMMessage.conversationSetPrivateTips:type_name -> openim.sdk.shared.ConversationSetPrivateTips
	71,  // 129: openim.sdk.shared.IMMessage.conversationHasReadTips:type_name -> openim.sdk.shared.ConversationHasReadTips
	72,  // 130: openim.sdk.shared.IMMessage.deleteMessageTips:type_name -> openim.sdk.shared.DeleteMessageTips
	73,  // 131: openim.sdk.shared.IMMessage.revokeMsgTips:type_name -> openim.sdk.shared.RevokeMsgTips
	75,  // 132: openim.sdk.shared.IMMessage.clearConversationTips:type_name -> openim.sdk.shared.ClearConversationTips
	76,  // 133: openim.sdk.shared.IMMessage.deleteMsgsTips:type_name -> openim.sdk.shared.DeleteMsgsTips
	77,  // 134: openim.sdk.shared.IMMessage.markAsReadTips:type_name -> openim.sdk.shared.MarkAsReadTips
	78,  // 135: openim.sdk.shared.IMMessage.friendsInfoUpdateTips:type_name -> openim.sdk.shared.FriendsInfoUpdateTips
	80,  // 136: openim.sdk.shared.IMMessage.subUserOnlineStatusTips:type_name -> openim.sdk.shared.SubUserOnlineStatusTips
	137, // [137:137] is the sub-list for method output_type
	137, // [137:137] is the sub-list for method input_type
	137, // [137:137] is the sub-list for extension type_name
	137, // [137:137] is the sub-list for extension extendee
	0,   // [0:137] is the sub-list for field type_name
}

func init() { file_shared_proto_init() }
func file_shared_proto_init() {
	if File_shared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shared_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMFriend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMBlack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMFriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoundBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoundElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtTextElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedTextElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypingElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupHasReadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedInfoElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCreatedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoSetTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoSetNameTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoSetAnnouncementTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupApplicationTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberQuitTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupApplicationAcceptedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupApplicationRejectedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOwnerTransferredTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberKickedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberInvitedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberEnterTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDismissedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberMutedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberCancelMutedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMutedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCancelMutedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberInfoSetTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromToUserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendApplicationTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendApplicationApprovedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendApplicationRejectedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendAddedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendDeletedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackAddedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackDeletedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendInfoChangedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoUpdatedTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatusChangeTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCommandAddTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCommandUpdateTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCommandDeleteTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationUpdateTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationSetPrivateTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationHasReadTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessageTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeMsgTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRevokedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearConversationTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMsgsTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAsReadTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendsInfoUpdateTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubUserOnlineStatusElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubUserOnlineStatusTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubUserOnlineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_shared_proto_msgTypes[80].OneofWrappers = []interface{}{
		(*IMMessage_TextElem)(nil),
		(*IMMessage_CardElem)(nil),
		(*IMMessage_PictureElem)(nil),
		(*IMMessage_SoundElem)(nil),
		(*IMMessage_VideoElem)(nil),
		(*IMMessage_FileElem)(nil),
		(*IMMessage_MergeElem)(nil),
		(*IMMessage_AtTextElem)(nil),
		(*IMMessage_FaceElem)(nil),
		(*IMMessage_LocationElem)(nil),
		(*IMMessage_CustomElem)(nil),
		(*IMMessage_QuoteElem)(nil),
		(*IMMessage_AdvancedTextElem)(nil),
		(*IMMessage_TypingElem)(nil),
		(*IMMessage_StreamElem)(nil),
		(*IMMessage_GroupCreatedTips)(nil),
		(*IMMessage_GroupInfoSetTips)(nil),
		(*IMMessage_GroupInfoSetNameTips)(nil),
		(*IMMessage_GroupInfoSetAnnouncementTips)(nil),
		(*IMMessage_JoinGroupApplicationTips)(nil),
		(*IMMessage_MemberQuitTips)(nil),
		(*IMMessage_GroupApplicationAcceptedTips)(nil),
		(*IMMessage_GroupApplicationRejectedTips)(nil),
		(*IMMessage_GroupOwnerTransferredTips)(nil),
		(*IMMessage_MemberKickedTips)(nil),
		(*IMMessage_MemberInvitedTips)(nil),
		(*IMMessage_MemberEnterTips)(nil),
		(*IMMessage_GroupDismissedTips)(nil),
		(*IMMessage_GroupMemberMutedTips)(nil),
		(*IMMessage_GroupMemberCancelMutedTips)(nil),
		(*IMMessage_GroupMutedTips)(nil),
		(*IMMessage_GroupCancelMutedTips)(nil),
		(*IMMessage_GroupMemberInfoSetTips)(nil),
		(*IMMessage_FriendApplicationTips)(nil),
		(*IMMessage_FriendApplicationApprovedTips)(nil),
		(*IMMessage_FriendApplicationRejectedTips)(nil),
		(*IMMessage_FriendAddedTips)(nil),
		(*IMMessage_FriendDeletedTips)(nil),
		(*IMMessage_BlackAddedTips)(nil),
		(*IMMessage_BlackDeletedTips)(nil),
		(*IMMessage_FriendInfoChangedTips)(nil),
		(*IMMessage_UserInfoUpdatedTips)(nil),
		(*IMMessage_UserStatusChangeTips)(nil),
		(*IMMessage_UserCommandAddTips)(nil),
		(*IMMessage_UserCommandUpdateTips)(nil),
		(*IMMessage_UserCommandDeleteTips)(nil),
		(*IMMessage_ConversationUpdateTips)(nil),
		(*IMMessage_ConversationSetPrivateTips)(nil),
		(*IMMessage_ConversationHasReadTips)(nil),
		(*IMMessage_DeleteMessageTips)(nil),
		(*IMMessage_RevokeMsgTips)(nil),
		(*IMMessage_ClearConversationTips)(nil),
		(*IMMessage_DeleteMsgsTips)(nil),
		(*IMMessage_MarkAsReadTips)(nil),
		(*IMMessage_FriendsInfoUpdateTips)(nil),
		(*IMMessage_SubUserOnlineStatusTips)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shared_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   81,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_proto_goTypes,
		DependencyIndexes: file_shared_proto_depIdxs,
		EnumInfos:         file_shared_proto_enumTypes,
		MessageInfos:      file_shared_proto_msgTypes,
	}.Build()
	File_shared_proto = out.File
	file_shared_proto_rawDesc = nil
	file_shared_proto_goTypes = nil
	file_shared_proto_depIdxs = nil
}
