// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.1
// source: shared.proto

package shared

import (
	common "github.com/openimsdk/openim-sdk-core/v3/proto/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupStatus int32

const (
	// normal group chat
	GroupStatus_Default GroupStatus = 0
	// the group chat has been disbanded
	GroupStatus_Dismissed GroupStatus = 2
)

// Enum value maps for GroupStatus.
var (
	GroupStatus_name = map[int32]string{
		0: "Default",
		2: "Dismissed",
	}
	GroupStatus_value = map[string]int32{
		"Default":   0,
		"Dismissed": 2,
	}
)

func (x GroupStatus) Enum() *GroupStatus {
	p := new(GroupStatus)
	*p = x
	return p
}

func (x GroupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[0].Descriptor()
}

func (GroupStatus) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[0]
}

func (x GroupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupStatus.Descriptor instead.
func (GroupStatus) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{0}
}

type GroupJoinSource int32

const (
	GroupJoinSource__ GroupJoinSource = 0
	// administrator invitation to join
	GroupJoinSource_Admin GroupJoinSource = 1
	// invite to join
	GroupJoinSource_Invitation GroupJoinSource = 2
	// search to join
	GroupJoinSource_Search GroupJoinSource = 3
	// scan code to join
	GroupJoinSource_QRCode GroupJoinSource = 4
)

// Enum value maps for GroupJoinSource.
var (
	GroupJoinSource_name = map[int32]string{
		0: "_",
		1: "Admin",
		2: "Invitation",
		3: "Search",
		4: "QRCode",
	}
	GroupJoinSource_value = map[string]int32{
		"_":          0,
		"Admin":      1,
		"Invitation": 2,
		"Search":     3,
		"QRCode":     4,
	}
)

func (x GroupJoinSource) Enum() *GroupJoinSource {
	p := new(GroupJoinSource)
	*p = x
	return p
}

func (x GroupJoinSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupJoinSource) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[1].Descriptor()
}

func (GroupJoinSource) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[1]
}

func (x GroupJoinSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupJoinSource.Descriptor instead.
func (GroupJoinSource) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{1}
}

type GroupNeedVerification int32

const (
	// application requires consent, and invitation is direct entry.
	GroupNeedVerification_ApplyNeedVerificationInviteDirectly GroupNeedVerification = 0
	// everyone entering the group needs to be verified, except for those invited by the group owner or administrator.
	GroupNeedVerification_AllNeedVerification GroupNeedVerification = 1
	// direct access to group chat.
	GroupNeedVerification_DirectAccess GroupNeedVerification = 2
)

// Enum value maps for GroupNeedVerification.
var (
	GroupNeedVerification_name = map[int32]string{
		0: "ApplyNeedVerificationInviteDirectly",
		1: "AllNeedVerification",
		2: "DirectAccess",
	}
	GroupNeedVerification_value = map[string]int32{
		"ApplyNeedVerificationInviteDirectly": 0,
		"AllNeedVerification":                 1,
		"DirectAccess":                        2,
	}
)

func (x GroupNeedVerification) Enum() *GroupNeedVerification {
	p := new(GroupNeedVerification)
	*p = x
	return p
}

func (x GroupNeedVerification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupNeedVerification) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[2].Descriptor()
}

func (GroupNeedVerification) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[2]
}

func (x GroupNeedVerification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupNeedVerification.Descriptor instead.
func (GroupNeedVerification) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{2}
}

type GroupLookMemberInfo int32

const (
	// do not allow access to member information via the group
	GroupLookMemberInfo_ProhibitGroupLookMemberInfo GroupLookMemberInfo = 0
	// allow access to member information via the group
	GroupLookMemberInfo_AllowGroupLookMemberInfo GroupLookMemberInfo = 1
)

// Enum value maps for GroupLookMemberInfo.
var (
	GroupLookMemberInfo_name = map[int32]string{
		0: "ProhibitGroupLookMemberInfo",
		1: "AllowGroupLookMemberInfo",
	}
	GroupLookMemberInfo_value = map[string]int32{
		"ProhibitGroupLookMemberInfo": 0,
		"AllowGroupLookMemberInfo":    1,
	}
)

func (x GroupLookMemberInfo) Enum() *GroupLookMemberInfo {
	p := new(GroupLookMemberInfo)
	*p = x
	return p
}

func (x GroupLookMemberInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupLookMemberInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[3].Descriptor()
}

func (GroupLookMemberInfo) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[3]
}

func (x GroupLookMemberInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupLookMemberInfo.Descriptor instead.
func (GroupLookMemberInfo) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{3}
}

type GroupApplyMemberFriend int32

const (
	// do not allow group members to add friends directly
	GroupApplyMemberFriend_ProhibitGroupApplyMemberFriend GroupApplyMemberFriend = 0
	// allow group members to add friends directly
	GroupApplyMemberFriend_AllowGroupApplyMemberFriend GroupApplyMemberFriend = 1
)

// Enum value maps for GroupApplyMemberFriend.
var (
	GroupApplyMemberFriend_name = map[int32]string{
		0: "ProhibitGroupApplyMemberFriend",
		1: "AllowGroupApplyMemberFriend",
	}
	GroupApplyMemberFriend_value = map[string]int32{
		"ProhibitGroupApplyMemberFriend": 0,
		"AllowGroupApplyMemberFriend":    1,
	}
)

func (x GroupApplyMemberFriend) Enum() *GroupApplyMemberFriend {
	p := new(GroupApplyMemberFriend)
	*p = x
	return p
}

func (x GroupApplyMemberFriend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupApplyMemberFriend) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[4].Descriptor()
}

func (GroupApplyMemberFriend) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[4]
}

func (x GroupApplyMemberFriend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupApplyMemberFriend.Descriptor instead.
func (GroupApplyMemberFriend) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{4}
}

// IM User information
type IMUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           string                  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`                                                              // User ID
	Nickname         string                  `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`                                                          // User nickname
	FaceURL          string                  `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`                                                            // User avatar URL
	Ex               string                  `protobuf:"bytes,4,opt,name=ex,proto3" json:"ex"`                                                                      // User extension field
	CreateTime       int64                   `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime"`                                                     // User register time
	GlobalRecvMsgOpt common.GlobalRecvMsgOpt `protobuf:"varint,6,opt,name=globalRecvMsgOpt,proto3,enum=openim.sdk.common.GlobalRecvMsgOpt" json:"globalRecvMsgOpt"` // Global message recv option
	Attached         string                  `protobuf:"bytes,7,opt,name=attached,proto3" json:"attached"`                                                          // SDK internal extension field
}

func (x *IMUser) Reset() {
	*x = IMUser{}
	mi := &file_shared_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMUser) ProtoMessage() {}

func (x *IMUser) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMUser.ProtoReflect.Descriptor instead.
func (*IMUser) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{0}
}

func (x *IMUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMUser) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMUser) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMUser) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMUser) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMUser) GetGlobalRecvMsgOpt() common.GlobalRecvMsgOpt {
	if x != nil {
		return x.GlobalRecvMsgOpt
	}
	return common.GlobalRecvMsgOpt(0)
}

func (x *IMUser) GetAttached() string {
	if x != nil {
		return x.Attached
	}
	return ""
}

type CommandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Type       int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	CreateTime int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime"`
	Uuid       string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid"`
	Value      string `protobuf:"bytes,5,opt,name=value,proto3" json:"value"`
	Ex         string `protobuf:"bytes,6,opt,name=ex,proto3" json:"ex"`
}

func (x *CommandInfo) Reset() {
	*x = CommandInfo{}
	mi := &file_shared_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInfo) ProtoMessage() {}

func (x *CommandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInfo.ProtoReflect.Descriptor instead.
func (*CommandInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{1}
}

func (x *CommandInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CommandInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommandInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CommandInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CommandInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommandInfo) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type IMFriend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID    string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	FriendUserID   string `protobuf:"bytes,2,opt,name=friendUserID,proto3" json:"friendUserID"`
	Remark         string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark"`
	CreateTime     int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime"`
	AddSource      int32  `protobuf:"varint,5,opt,name=addSource,proto3" json:"addSource"`
	OperatorUserID string `protobuf:"bytes,6,opt,name=operatorUserID,proto3" json:"operatorUserID"`
	Nickname       string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname"`
	FaceURL        string `protobuf:"bytes,8,opt,name=faceURL,proto3" json:"faceURL"`
	Ex             string `protobuf:"bytes,9,opt,name=ex,proto3" json:"ex"`
	AttachedInfo   string `protobuf:"bytes,10,opt,name=attachedInfo,proto3" json:"attachedInfo"`
	IsPinned       bool   `protobuf:"varint,11,opt,name=isPinned,proto3" json:"isPinned"`
}

func (x *IMFriend) Reset() {
	*x = IMFriend{}
	mi := &file_shared_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMFriend) ProtoMessage() {}

func (x *IMFriend) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMFriend.ProtoReflect.Descriptor instead.
func (*IMFriend) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{2}
}

func (x *IMFriend) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMFriend) GetFriendUserID() string {
	if x != nil {
		return x.FriendUserID
	}
	return ""
}

func (x *IMFriend) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *IMFriend) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMFriend) GetAddSource() int32 {
	if x != nil {
		return x.AddSource
	}
	return 0
}

func (x *IMFriend) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *IMFriend) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMFriend) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMFriend) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMFriend) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

func (x *IMFriend) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

type IMBlack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUserID    string `protobuf:"bytes,1,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	BlockUserID    string `protobuf:"bytes,2,opt,name=blockUserID,proto3" json:"blockUserID"`
	Nickname       string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL        string `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	CreateTime     int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime"`
	AddSource      int32  `protobuf:"varint,6,opt,name=addSource,proto3" json:"addSource"`
	OperatorUserID string `protobuf:"bytes,7,opt,name=operatorUserID,proto3" json:"operatorUserID"`
	Ex             string `protobuf:"bytes,8,opt,name=ex,proto3" json:"ex"`
	Attached       string `protobuf:"bytes,9,opt,name=attached,proto3" json:"attached"`
}

func (x *IMBlack) Reset() {
	*x = IMBlack{}
	mi := &file_shared_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMBlack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMBlack) ProtoMessage() {}

func (x *IMBlack) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMBlack.ProtoReflect.Descriptor instead.
func (*IMBlack) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{3}
}

func (x *IMBlack) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMBlack) GetBlockUserID() string {
	if x != nil {
		return x.BlockUserID
	}
	return ""
}

func (x *IMBlack) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMBlack) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMBlack) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMBlack) GetAddSource() int32 {
	if x != nil {
		return x.AddSource
	}
	return 0
}

func (x *IMBlack) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *IMBlack) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMBlack) GetAttached() string {
	if x != nil {
		return x.Attached
	}
	return ""
}

type IMFriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID    string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID"`
	FromNickname  string `protobuf:"bytes,2,opt,name=fromNickname,proto3" json:"fromNickname"`
	FromFaceURL   string `protobuf:"bytes,3,opt,name=fromFaceURL,proto3" json:"fromFaceURL"`
	ToUserID      string `protobuf:"bytes,4,opt,name=toUserID,proto3" json:"toUserID"`
	ToNickname    string `protobuf:"bytes,5,opt,name=toNickname,proto3" json:"toNickname"`
	ToFaceURL     string `protobuf:"bytes,6,opt,name=toFaceURL,proto3" json:"toFaceURL"`
	HandleResult  int32  `protobuf:"varint,7,opt,name=handleResult,proto3" json:"handleResult"`
	ReqMsg        string `protobuf:"bytes,8,opt,name=reqMsg,proto3" json:"reqMsg"`
	CreateTime    int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime"`
	HandlerUserID string `protobuf:"bytes,10,opt,name=handlerUserID,proto3" json:"handlerUserID"`
	HandleMsg     string `protobuf:"bytes,11,opt,name=handleMsg,proto3" json:"handleMsg"`
	HandleTime    int64  `protobuf:"varint,12,opt,name=handleTime,proto3" json:"handleTime"`
	Ex            string `protobuf:"bytes,13,opt,name=ex,proto3" json:"ex"`
	Attached      string `protobuf:"bytes,14,opt,name=attached,proto3" json:"attached"`
}

func (x *IMFriendRequest) Reset() {
	*x = IMFriendRequest{}
	mi := &file_shared_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMFriendRequest) ProtoMessage() {}

func (x *IMFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMFriendRequest.ProtoReflect.Descriptor instead.
func (*IMFriendRequest) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{4}
}

func (x *IMFriendRequest) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *IMFriendRequest) GetFromNickname() string {
	if x != nil {
		return x.FromNickname
	}
	return ""
}

func (x *IMFriendRequest) GetFromFaceURL() string {
	if x != nil {
		return x.FromFaceURL
	}
	return ""
}

func (x *IMFriendRequest) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

func (x *IMFriendRequest) GetToNickname() string {
	if x != nil {
		return x.ToNickname
	}
	return ""
}

func (x *IMFriendRequest) GetToFaceURL() string {
	if x != nil {
		return x.ToFaceURL
	}
	return ""
}

func (x *IMFriendRequest) GetHandleResult() int32 {
	if x != nil {
		return x.HandleResult
	}
	return 0
}

func (x *IMFriendRequest) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *IMFriendRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMFriendRequest) GetHandlerUserID() string {
	if x != nil {
		return x.HandlerUserID
	}
	return ""
}

func (x *IMFriendRequest) GetHandleMsg() string {
	if x != nil {
		return x.HandleMsg
	}
	return ""
}

func (x *IMFriendRequest) GetHandleTime() int64 {
	if x != nil {
		return x.HandleTime
	}
	return 0
}

func (x *IMFriendRequest) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMFriendRequest) GetAttached() string {
	if x != nil {
		return x.Attached
	}
	return ""
}

type IMGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group id, no need to specify when creating
	GroupID string `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID"`
	// group name
	GroupName string `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName"`
	// group notification
	Notification string `protobuf:"bytes,3,opt,name=notification,proto3" json:"notification"`
	// group introduction
	Introduction string `protobuf:"bytes,4,opt,name=introduction,proto3" json:"introduction"`
	// group face url
	FaceURL string `protobuf:"bytes,5,opt,name=faceURL,proto3" json:"faceURL"`
	// group owner user id
	OwnerUserID string `protobuf:"bytes,6,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	// group creation time
	CreateTime int64 `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime"`
	// group member count
	MemberCount int64 `protobuf:"varint,8,opt,name=memberCount,proto3" json:"memberCount"`
	// extension field
	Ex string `protobuf:"bytes,9,opt,name=ex,proto3" json:"ex"`
	// group status
	Status GroupStatus `protobuf:"varint,10,opt,name=status,proto3,enum=openim.sdk.shared.GroupStatus" json:"status"`
	// group creator user id
	CreatorUserID string `protobuf:"bytes,11,opt,name=creatorUserID,proto3" json:"creatorUserID"`
	// whether to verify the group
	NeedVerification GroupNeedVerification `protobuf:"varint,12,opt,name=needVerification,proto3,enum=openim.sdk.shared.GroupNeedVerification" json:"needVerification"`
	// whether to view the group member information
	LookMemberInfo GroupLookMemberInfo `protobuf:"varint,13,opt,name=lookMemberInfo,proto3,enum=openim.sdk.shared.GroupLookMemberInfo" json:"lookMemberInfo"`
	// whether to allow group members to add friends
	ApplyMemberFriend GroupApplyMemberFriend `protobuf:"varint,14,opt,name=applyMemberFriend,proto3,enum=openim.sdk.shared.GroupApplyMemberFriend" json:"applyMemberFriend"`
	// notification update time
	NotificationUpdateTime int64 `protobuf:"varint,15,opt,name=notificationUpdateTime,proto3" json:"notificationUpdateTime"`
	// notification update user id
	NotificationUserID string `protobuf:"bytes,16,opt,name=notificationUserID,proto3" json:"notificationUserID"`
	// group attached info
	AttachedInfo string `protobuf:"bytes,17,opt,name=attachedInfo,proto3" json:"attachedInfo"`
}

func (x *IMGroup) Reset() {
	*x = IMGroup{}
	mi := &file_shared_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMGroup) ProtoMessage() {}

func (x *IMGroup) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMGroup.ProtoReflect.Descriptor instead.
func (*IMGroup) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{5}
}

func (x *IMGroup) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *IMGroup) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *IMGroup) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *IMGroup) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMGroup) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMGroup) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMGroup) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *IMGroup) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMGroup) GetStatus() GroupStatus {
	if x != nil {
		return x.Status
	}
	return GroupStatus_Default
}

func (x *IMGroup) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *IMGroup) GetNeedVerification() GroupNeedVerification {
	if x != nil {
		return x.NeedVerification
	}
	return GroupNeedVerification_ApplyNeedVerificationInviteDirectly
}

func (x *IMGroup) GetLookMemberInfo() GroupLookMemberInfo {
	if x != nil {
		return x.LookMemberInfo
	}
	return GroupLookMemberInfo_ProhibitGroupLookMemberInfo
}

func (x *IMGroup) GetApplyMemberFriend() GroupApplyMemberFriend {
	if x != nil {
		return x.ApplyMemberFriend
	}
	return GroupApplyMemberFriend_ProhibitGroupApplyMemberFriend
}

func (x *IMGroup) GetNotificationUpdateTime() int64 {
	if x != nil {
		return x.NotificationUpdateTime
	}
	return 0
}

func (x *IMGroup) GetNotificationUserID() string {
	if x != nil {
		return x.NotificationUserID
	}
	return ""
}

func (x *IMGroup) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

type IMGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID        string          `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID"`
	UserID         string          `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	Nickname       string          `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL        string          `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	RoleLevel      int32           `protobuf:"varint,5,opt,name=roleLevel,proto3" json:"roleLevel"`
	JoinTime       int64           `protobuf:"varint,6,opt,name=joinTime,proto3" json:"joinTime"`
	JoinSource     GroupJoinSource `protobuf:"varint,7,opt,name=joinSource,proto3,enum=openim.sdk.shared.GroupJoinSource" json:"joinSource"`
	InviterUserID  string          `protobuf:"bytes,8,opt,name=inviterUserID,proto3" json:"inviterUserID"`
	MuteEndTime    int64           `protobuf:"varint,9,opt,name=muteEndTime,proto3" json:"muteEndTime"`
	OperatorUserID string          `protobuf:"bytes,10,opt,name=operatorUserID,proto3" json:"operatorUserID"`
	Ex             string          `protobuf:"bytes,11,opt,name=ex,proto3" json:"ex"`
	AttachedInfo   string          `protobuf:"bytes,12,opt,name=attachedInfo,proto3" json:"attachedInfo"`
}

func (x *IMGroupMember) Reset() {
	*x = IMGroupMember{}
	mi := &file_shared_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMGroupMember) ProtoMessage() {}

func (x *IMGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMGroupMember.ProtoReflect.Descriptor instead.
func (*IMGroupMember) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{6}
}

func (x *IMGroupMember) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMGroupMember) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMGroupMember) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMGroupMember) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMGroupMember) GetRoleLevel() int32 {
	if x != nil {
		return x.RoleLevel
	}
	return 0
}

func (x *IMGroupMember) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *IMGroupMember) GetJoinSource() GroupJoinSource {
	if x != nil {
		return x.JoinSource
	}
	return GroupJoinSource__
}

func (x *IMGroupMember) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

func (x *IMGroupMember) GetMuteEndTime() int64 {
	if x != nil {
		return x.MuteEndTime
	}
	return 0
}

func (x *IMGroupMember) GetOperatorUserID() string {
	if x != nil {
		return x.OperatorUserID
	}
	return ""
}

func (x *IMGroupMember) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMGroupMember) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

type IMGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID       string          `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID"`
	GroupName     string          `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName"`
	Notification  string          `protobuf:"bytes,3,opt,name=notification,proto3" json:"notification"`
	Introduction  string          `protobuf:"bytes,4,opt,name=introduction,proto3" json:"introduction"`
	GroupFaceURL  string          `protobuf:"bytes,5,opt,name=groupFaceURL,proto3" json:"groupFaceURL"`
	CreateTime    int64           `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime"`
	Status        int32           `protobuf:"varint,7,opt,name=status,proto3" json:"status"`
	CreatorUserID string          `protobuf:"bytes,8,opt,name=creatorUserID,proto3" json:"creatorUserID"`
	OwnerUserID   string          `protobuf:"bytes,9,opt,name=ownerUserID,proto3" json:"ownerUserID"`
	MemberCount   int32           `protobuf:"varint,10,opt,name=memberCount,proto3" json:"memberCount"`
	UserID        string          `protobuf:"bytes,11,opt,name=userID,proto3" json:"userID"`
	Nickname      string          `protobuf:"bytes,12,opt,name=nickname,proto3" json:"nickname"`
	UserFaceURL   string          `protobuf:"bytes,13,opt,name=userFaceURL,proto3" json:"userFaceURL"`
	HandleResult  int32           `protobuf:"varint,14,opt,name=handleResult,proto3" json:"handleResult"`
	ReqMsg        string          `protobuf:"bytes,15,opt,name=reqMsg,proto3" json:"reqMsg"`
	HandledMsg    string          `protobuf:"bytes,16,opt,name=handledMsg,proto3" json:"handledMsg"`
	ReqTime       int64           `protobuf:"varint,17,opt,name=reqTime,proto3" json:"reqTime"`
	HandleUserID  string          `protobuf:"bytes,18,opt,name=handleUserID,proto3" json:"handleUserID"`
	HandledTime   int64           `protobuf:"varint,19,opt,name=handledTime,proto3" json:"handledTime"`
	Ex            string          `protobuf:"bytes,20,opt,name=ex,proto3" json:"ex"`
	AttachedInfo  string          `protobuf:"bytes,21,opt,name=attachedInfo,proto3" json:"attachedInfo"`
	JoinSource    GroupJoinSource `protobuf:"varint,22,opt,name=joinSource,proto3,enum=openim.sdk.shared.GroupJoinSource" json:"joinSource"`
	InviterUserID string          `protobuf:"bytes,23,opt,name=inviterUserID,proto3" json:"inviterUserID"`
}

func (x *IMGroupRequest) Reset() {
	*x = IMGroupRequest{}
	mi := &file_shared_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMGroupRequest) ProtoMessage() {}

func (x *IMGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMGroupRequest.ProtoReflect.Descriptor instead.
func (*IMGroupRequest) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{7}
}

func (x *IMGroupRequest) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMGroupRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *IMGroupRequest) GetNotification() string {
	if x != nil {
		return x.Notification
	}
	return ""
}

func (x *IMGroupRequest) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *IMGroupRequest) GetGroupFaceURL() string {
	if x != nil {
		return x.GroupFaceURL
	}
	return ""
}

func (x *IMGroupRequest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMGroupRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *IMGroupRequest) GetCreatorUserID() string {
	if x != nil {
		return x.CreatorUserID
	}
	return ""
}

func (x *IMGroupRequest) GetOwnerUserID() string {
	if x != nil {
		return x.OwnerUserID
	}
	return ""
}

func (x *IMGroupRequest) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *IMGroupRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMGroupRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *IMGroupRequest) GetUserFaceURL() string {
	if x != nil {
		return x.UserFaceURL
	}
	return ""
}

func (x *IMGroupRequest) GetHandleResult() int32 {
	if x != nil {
		return x.HandleResult
	}
	return 0
}

func (x *IMGroupRequest) GetReqMsg() string {
	if x != nil {
		return x.ReqMsg
	}
	return ""
}

func (x *IMGroupRequest) GetHandledMsg() string {
	if x != nil {
		return x.HandledMsg
	}
	return ""
}

func (x *IMGroupRequest) GetReqTime() int64 {
	if x != nil {
		return x.ReqTime
	}
	return 0
}

func (x *IMGroupRequest) GetHandleUserID() string {
	if x != nil {
		return x.HandleUserID
	}
	return ""
}

func (x *IMGroupRequest) GetHandledTime() int64 {
	if x != nil {
		return x.HandledTime
	}
	return 0
}

func (x *IMGroupRequest) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMGroupRequest) GetAttachedInfo() string {
	if x != nil {
		return x.AttachedInfo
	}
	return ""
}

func (x *IMGroupRequest) GetJoinSource() GroupJoinSource {
	if x != nil {
		return x.JoinSource
	}
	return GroupJoinSource__
}

func (x *IMGroupRequest) GetInviterUserID() string {
	if x != nil {
		return x.InviterUserID
	}
	return ""
}

type IMConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationID    string                 `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	ConversationType  common.SessionType     `protobuf:"varint,2,opt,name=conversationType,proto3,enum=openim.sdk.common.SessionType" json:"conversationType"`
	UserID            string                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`
	GroupID           string                 `protobuf:"bytes,4,opt,name=groupID,proto3" json:"groupID"`
	ShowName          string                 `protobuf:"bytes,5,opt,name=showName,proto3" json:"showName"`
	FaceURL           string                 `protobuf:"bytes,6,opt,name=faceURL,proto3" json:"faceURL"`
	RecvMsgOpt        common.ConvRecvMsgOpt  `protobuf:"varint,7,opt,name=recvMsgOpt,proto3,enum=openim.sdk.common.ConvRecvMsgOpt" json:"recvMsgOpt"`
	UnreadCount       int32                  `protobuf:"varint,8,opt,name=unreadCount,proto3" json:"unreadCount"`
	GroupAtType       common.ConvGroupAtType `protobuf:"varint,9,opt,name=groupAtType,proto3,enum=openim.sdk.common.ConvGroupAtType" json:"groupAtType"`
	LatestMsg         *IMMessage             `protobuf:"bytes,10,opt,name=latestMsg,proto3" json:"latestMsg"`
	LatestMsgSendTime int64                  `protobuf:"varint,11,opt,name=latestMsgSendTime,proto3" json:"latestMsgSendTime"`
	DraftText         string                 `protobuf:"bytes,12,opt,name=draftText,proto3" json:"draftText"`
	DraftTextTime     int64                  `protobuf:"varint,13,opt,name=draftTextTime,proto3" json:"draftTextTime"`
	IsPinned          bool                   `protobuf:"varint,14,opt,name=isPinned,proto3" json:"isPinned"`
	IsPrivateChat     bool                   `protobuf:"varint,15,opt,name=isPrivateChat,proto3" json:"isPrivateChat"`
	BurnDuration      int32                  `protobuf:"varint,16,opt,name=burnDuration,proto3" json:"burnDuration"`
	Ex                string                 `protobuf:"bytes,17,opt,name=ex,proto3" json:"ex"`
	MsgDestructTime   int64                  `protobuf:"varint,18,opt,name=msgDestructTime,proto3" json:"msgDestructTime"`
	IsMsgDestruct     bool                   `protobuf:"varint,19,opt,name=isMsgDestruct,proto3" json:"isMsgDestruct"`
}

func (x *IMConversation) Reset() {
	*x = IMConversation{}
	mi := &file_shared_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMConversation) ProtoMessage() {}

func (x *IMConversation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMConversation.ProtoReflect.Descriptor instead.
func (*IMConversation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{8}
}

func (x *IMConversation) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *IMConversation) GetConversationType() common.SessionType {
	if x != nil {
		return x.ConversationType
	}
	return common.SessionType(0)
}

func (x *IMConversation) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *IMConversation) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMConversation) GetShowName() string {
	if x != nil {
		return x.ShowName
	}
	return ""
}

func (x *IMConversation) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *IMConversation) GetRecvMsgOpt() common.ConvRecvMsgOpt {
	if x != nil {
		return x.RecvMsgOpt
	}
	return common.ConvRecvMsgOpt(0)
}

func (x *IMConversation) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *IMConversation) GetGroupAtType() common.ConvGroupAtType {
	if x != nil {
		return x.GroupAtType
	}
	return common.ConvGroupAtType(0)
}

func (x *IMConversation) GetLatestMsg() *IMMessage {
	if x != nil {
		return x.LatestMsg
	}
	return nil
}

func (x *IMConversation) GetLatestMsgSendTime() int64 {
	if x != nil {
		return x.LatestMsgSendTime
	}
	return 0
}

func (x *IMConversation) GetDraftText() string {
	if x != nil {
		return x.DraftText
	}
	return ""
}

func (x *IMConversation) GetDraftTextTime() int64 {
	if x != nil {
		return x.DraftTextTime
	}
	return 0
}

func (x *IMConversation) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *IMConversation) GetIsPrivateChat() bool {
	if x != nil {
		return x.IsPrivateChat
	}
	return false
}

func (x *IMConversation) GetBurnDuration() int32 {
	if x != nil {
		return x.BurnDuration
	}
	return 0
}

func (x *IMConversation) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMConversation) GetMsgDestructTime() int64 {
	if x != nil {
		return x.MsgDestructTime
	}
	return 0
}

func (x *IMConversation) GetIsMsgDestruct() bool {
	if x != nil {
		return x.IsMsgDestruct
	}
	return false
}

type AtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AtUserID      string `protobuf:"bytes,1,opt,name=atUserID,proto3" json:"atUserID"`
	GroupNickname string `protobuf:"bytes,2,opt,name=groupNickname,proto3" json:"groupNickname"`
}

func (x *AtInfo) Reset() {
	*x = AtInfo{}
	mi := &file_shared_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtInfo) ProtoMessage() {}

func (x *AtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtInfo.ProtoReflect.Descriptor instead.
func (*AtInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{9}
}

func (x *AtInfo) GetAtUserID() string {
	if x != nil {
		return x.AtUserID
	}
	return ""
}

func (x *AtInfo) GetGroupNickname() string {
	if x != nil {
		return x.GroupNickname
	}
	return ""
}

type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width"`
	Height int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type"`
	Size   int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	mi := &file_shared_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{10}
}

func (x *ImageInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ImageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PictureBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	Size   int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size"`
	Width  int32  `protobuf:"varint,4,opt,name=width,proto3" json:"width"`
	Height int32  `protobuf:"varint,5,opt,name=height,proto3" json:"height"`
	Url    string `protobuf:"bytes,6,opt,name=url,proto3" json:"url"`
}

func (x *PictureBaseInfo) Reset() {
	*x = PictureBaseInfo{}
	mi := &file_shared_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PictureBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureBaseInfo) ProtoMessage() {}

func (x *PictureBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureBaseInfo.ProtoReflect.Descriptor instead.
func (*PictureBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{11}
}

func (x *PictureBaseInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PictureBaseInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PictureBaseInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PictureBaseInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *PictureBaseInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PictureBaseInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SoundBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid"`
	SoundPath string `protobuf:"bytes,2,opt,name=soundPath,proto3" json:"soundPath"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL"`
	DataSize  int64  `protobuf:"varint,4,opt,name=dataSize,proto3" json:"dataSize"`
	Duration  int64  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration"`
	SoundType string `protobuf:"bytes,6,opt,name=soundType,proto3" json:"soundType"`
}

func (x *SoundBaseInfo) Reset() {
	*x = SoundBaseInfo{}
	mi := &file_shared_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoundBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundBaseInfo) ProtoMessage() {}

func (x *SoundBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundBaseInfo.ProtoReflect.Descriptor instead.
func (*SoundBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{12}
}

func (x *SoundBaseInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SoundBaseInfo) GetSoundPath() string {
	if x != nil {
		return x.SoundPath
	}
	return ""
}

func (x *SoundBaseInfo) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *SoundBaseInfo) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *SoundBaseInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SoundBaseInfo) GetSoundType() string {
	if x != nil {
		return x.SoundType
	}
	return ""
}

type VideoBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoPath      string `protobuf:"bytes,1,opt,name=videoPath,proto3" json:"videoPath"`
	VideoUUID      string `protobuf:"bytes,2,opt,name=videoUUID,proto3" json:"videoUUID"`
	VideoURL       string `protobuf:"bytes,3,opt,name=videoURL,proto3" json:"videoURL"`
	VideoType      string `protobuf:"bytes,4,opt,name=videoType,proto3" json:"videoType"`
	VideoSize      int64  `protobuf:"varint,5,opt,name=videoSize,proto3" json:"videoSize"`
	Duration       int64  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration"`
	SnapshotPath   string `protobuf:"bytes,7,opt,name=snapshotPath,proto3" json:"snapshotPath"`
	SnapshotUUID   string `protobuf:"bytes,8,opt,name=snapshotUUID,proto3" json:"snapshotUUID"`
	SnapshotSize   int64  `protobuf:"varint,9,opt,name=snapshotSize,proto3" json:"snapshotSize"`
	SnapshotURL    string `protobuf:"bytes,10,opt,name=snapshotURL,proto3" json:"snapshotURL"`
	SnapshotWidth  int32  `protobuf:"varint,11,opt,name=snapshotWidth,proto3" json:"snapshotWidth"`
	SnapshotHeight int32  `protobuf:"varint,12,opt,name=snapshotHeight,proto3" json:"snapshotHeight"`
	SnapshotType   string `protobuf:"bytes,13,opt,name=snapshotType,proto3" json:"snapshotType"`
}

func (x *VideoBaseInfo) Reset() {
	*x = VideoBaseInfo{}
	mi := &file_shared_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoBaseInfo) ProtoMessage() {}

func (x *VideoBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoBaseInfo.ProtoReflect.Descriptor instead.
func (*VideoBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{13}
}

func (x *VideoBaseInfo) GetVideoPath() string {
	if x != nil {
		return x.VideoPath
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoUUID() string {
	if x != nil {
		return x.VideoUUID
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoURL() string {
	if x != nil {
		return x.VideoURL
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

func (x *VideoBaseInfo) GetVideoSize() int64 {
	if x != nil {
		return x.VideoSize
	}
	return 0
}

func (x *VideoBaseInfo) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

func (x *VideoBaseInfo) GetSnapshotUUID() string {
	if x != nil {
		return x.SnapshotUUID
	}
	return ""
}

func (x *VideoBaseInfo) GetSnapshotSize() int64 {
	if x != nil {
		return x.SnapshotSize
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotURL() string {
	if x != nil {
		return x.SnapshotURL
	}
	return ""
}

func (x *VideoBaseInfo) GetSnapshotWidth() int32 {
	if x != nil {
		return x.SnapshotWidth
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotHeight() int32 {
	if x != nil {
		return x.SnapshotHeight
	}
	return 0
}

func (x *VideoBaseInfo) GetSnapshotType() string {
	if x != nil {
		return x.SnapshotType
	}
	return ""
}

type FileBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL"`
	FileName  string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName"`
	FileSize  int64  `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize"`
	FileType  string `protobuf:"bytes,6,opt,name=fileType,proto3" json:"fileType"`
}

func (x *FileBaseInfo) Reset() {
	*x = FileBaseInfo{}
	mi := &file_shared_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBaseInfo) ProtoMessage() {}

func (x *FileBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBaseInfo.ProtoReflect.Descriptor instead.
func (*FileBaseInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{14}
}

func (x *FileBaseInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileBaseInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FileBaseInfo) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *FileBaseInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileBaseInfo) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileBaseInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type TextElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content"`
}

func (x *TextElem) Reset() {
	*x = TextElem{}
	mi := &file_shared_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextElem) ProtoMessage() {}

func (x *TextElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextElem.ProtoReflect.Descriptor instead.
func (*TextElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{15}
}

func (x *TextElem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CardElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	FaceURL  string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	Ex       string `protobuf:"bytes,4,opt,name=ex,proto3" json:"ex"`
}

func (x *CardElem) Reset() {
	*x = CardElem{}
	mi := &file_shared_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardElem) ProtoMessage() {}

func (x *CardElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardElem.ProtoReflect.Descriptor instead.
func (*CardElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{16}
}

func (x *CardElem) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CardElem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *CardElem) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *CardElem) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type PictureElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePath      string           `protobuf:"bytes,1,opt,name=sourcePath,proto3" json:"sourcePath"`
	SourcePicture   *PictureBaseInfo `protobuf:"bytes,2,opt,name=sourcePicture,proto3" json:"sourcePicture"`
	BigPicture      *PictureBaseInfo `protobuf:"bytes,3,opt,name=bigPicture,proto3" json:"bigPicture"`
	SnapshotPicture *PictureBaseInfo `protobuf:"bytes,4,opt,name=snapshotPicture,proto3" json:"snapshotPicture"`
}

func (x *PictureElem) Reset() {
	*x = PictureElem{}
	mi := &file_shared_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PictureElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureElem) ProtoMessage() {}

func (x *PictureElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureElem.ProtoReflect.Descriptor instead.
func (*PictureElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{17}
}

func (x *PictureElem) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *PictureElem) GetSourcePicture() *PictureBaseInfo {
	if x != nil {
		return x.SourcePicture
	}
	return nil
}

func (x *PictureElem) GetBigPicture() *PictureBaseInfo {
	if x != nil {
		return x.BigPicture
	}
	return nil
}

func (x *PictureElem) GetSnapshotPicture() *PictureBaseInfo {
	if x != nil {
		return x.SnapshotPicture
	}
	return nil
}

type SoundElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid      string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid"`
	SoundPath string `protobuf:"bytes,2,opt,name=soundPath,proto3" json:"soundPath"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL"`
	DataSize  int64  `protobuf:"varint,4,opt,name=dataSize,proto3" json:"dataSize"`
	Duration  int64  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration"`
	SoundType string `protobuf:"bytes,6,opt,name=soundType,proto3" json:"soundType"`
}

func (x *SoundElem) Reset() {
	*x = SoundElem{}
	mi := &file_shared_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoundElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundElem) ProtoMessage() {}

func (x *SoundElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundElem.ProtoReflect.Descriptor instead.
func (*SoundElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{18}
}

func (x *SoundElem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SoundElem) GetSoundPath() string {
	if x != nil {
		return x.SoundPath
	}
	return ""
}

func (x *SoundElem) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *SoundElem) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *SoundElem) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SoundElem) GetSoundType() string {
	if x != nil {
		return x.SoundType
	}
	return ""
}

type VideoElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoPath      string `protobuf:"bytes,1,opt,name=videoPath,proto3" json:"videoPath"`
	VideoUUID      string `protobuf:"bytes,2,opt,name=videoUUID,proto3" json:"videoUUID"`
	VideoURL       string `protobuf:"bytes,3,opt,name=videoURL,proto3" json:"videoURL"`
	VideoType      string `protobuf:"bytes,4,opt,name=videoType,proto3" json:"videoType"`
	VideoSize      int64  `protobuf:"varint,5,opt,name=videoSize,proto3" json:"videoSize"`
	Duration       int64  `protobuf:"varint,6,opt,name=duration,proto3" json:"duration"`
	SnapshotPath   string `protobuf:"bytes,7,opt,name=snapshotPath,proto3" json:"snapshotPath"`
	SnapshotUUID   string `protobuf:"bytes,8,opt,name=snapshotUUID,proto3" json:"snapshotUUID"`
	SnapshotSize   int64  `protobuf:"varint,9,opt,name=snapshotSize,proto3" json:"snapshotSize"`
	SnapshotURL    string `protobuf:"bytes,10,opt,name=snapshotURL,proto3" json:"snapshotURL"`
	SnapshotWidth  int32  `protobuf:"varint,11,opt,name=snapshotWidth,proto3" json:"snapshotWidth"`
	SnapshotHeight int32  `protobuf:"varint,12,opt,name=snapshotHeight,proto3" json:"snapshotHeight"`
	SnapshotType   string `protobuf:"bytes,13,opt,name=snapshotType,proto3" json:"snapshotType"`
}

func (x *VideoElem) Reset() {
	*x = VideoElem{}
	mi := &file_shared_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoElem) ProtoMessage() {}

func (x *VideoElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoElem.ProtoReflect.Descriptor instead.
func (*VideoElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{19}
}

func (x *VideoElem) GetVideoPath() string {
	if x != nil {
		return x.VideoPath
	}
	return ""
}

func (x *VideoElem) GetVideoUUID() string {
	if x != nil {
		return x.VideoUUID
	}
	return ""
}

func (x *VideoElem) GetVideoURL() string {
	if x != nil {
		return x.VideoURL
	}
	return ""
}

func (x *VideoElem) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

func (x *VideoElem) GetVideoSize() int64 {
	if x != nil {
		return x.VideoSize
	}
	return 0
}

func (x *VideoElem) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VideoElem) GetSnapshotPath() string {
	if x != nil {
		return x.SnapshotPath
	}
	return ""
}

func (x *VideoElem) GetSnapshotUUID() string {
	if x != nil {
		return x.SnapshotUUID
	}
	return ""
}

func (x *VideoElem) GetSnapshotSize() int64 {
	if x != nil {
		return x.SnapshotSize
	}
	return 0
}

func (x *VideoElem) GetSnapshotURL() string {
	if x != nil {
		return x.SnapshotURL
	}
	return ""
}

func (x *VideoElem) GetSnapshotWidth() int32 {
	if x != nil {
		return x.SnapshotWidth
	}
	return 0
}

func (x *VideoElem) GetSnapshotHeight() int32 {
	if x != nil {
		return x.SnapshotHeight
	}
	return 0
}

func (x *VideoElem) GetSnapshotType() string {
	if x != nil {
		return x.SnapshotType
	}
	return ""
}

type FileElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid"`
	SourceURL string `protobuf:"bytes,3,opt,name=sourceURL,proto3" json:"sourceURL"`
	FileName  string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName"`
	FileSize  int64  `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize"`
	FileType  string `protobuf:"bytes,6,opt,name=fileType,proto3" json:"fileType"`
}

func (x *FileElem) Reset() {
	*x = FileElem{}
	mi := &file_shared_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileElem) ProtoMessage() {}

func (x *FileElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileElem.ProtoReflect.Descriptor instead.
func (*FileElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{20}
}

func (x *FileElem) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileElem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FileElem) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

func (x *FileElem) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileElem) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileElem) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

type MessageEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset"`
	Length int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length"`
	Url    string `protobuf:"bytes,4,opt,name=url,proto3" json:"url"`
	Ex     string `protobuf:"bytes,5,opt,name=ex,proto3" json:"ex"`
}

func (x *MessageEntity) Reset() {
	*x = MessageEntity{}
	mi := &file_shared_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEntity) ProtoMessage() {}

func (x *MessageEntity) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEntity.ProtoReflect.Descriptor instead.
func (*MessageEntity) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{21}
}

func (x *MessageEntity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MessageEntity) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageEntity) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MessageEntity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageEntity) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type MergeElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title             string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	AbstractList      []string         `protobuf:"bytes,2,rep,name=abstractList,proto3" json:"abstractList"`
	MultiMessage      []*IMMessage     `protobuf:"bytes,3,rep,name=multiMessage,proto3" json:"multiMessage"`
	MessageEntityList []*MessageEntity `protobuf:"bytes,4,rep,name=messageEntityList,proto3" json:"messageEntityList"`
}

func (x *MergeElem) Reset() {
	*x = MergeElem{}
	mi := &file_shared_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeElem) ProtoMessage() {}

func (x *MergeElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeElem.ProtoReflect.Descriptor instead.
func (*MergeElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{22}
}

func (x *MergeElem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MergeElem) GetAbstractList() []string {
	if x != nil {
		return x.AbstractList
	}
	return nil
}

func (x *MergeElem) GetMultiMessage() []*IMMessage {
	if x != nil {
		return x.MultiMessage
	}
	return nil
}

func (x *MergeElem) GetMessageEntityList() []*MessageEntity {
	if x != nil {
		return x.MessageEntityList
	}
	return nil
}

type AtTextElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string     `protobuf:"bytes,1,opt,name=text,proto3" json:"text"`
	AtUserList   []string   `protobuf:"bytes,2,rep,name=atUserList,proto3" json:"atUserList"`
	AtUsersInfo  []*AtInfo  `protobuf:"bytes,3,rep,name=atUsersInfo,proto3" json:"atUsersInfo"`
	QuoteMessage *IMMessage `protobuf:"bytes,4,opt,name=quoteMessage,proto3" json:"quoteMessage"`
	IsAtSelf     bool       `protobuf:"varint,5,opt,name=isAtSelf,proto3" json:"isAtSelf"`
}

func (x *AtTextElem) Reset() {
	*x = AtTextElem{}
	mi := &file_shared_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtTextElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtTextElem) ProtoMessage() {}

func (x *AtTextElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtTextElem.ProtoReflect.Descriptor instead.
func (*AtTextElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{23}
}

func (x *AtTextElem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AtTextElem) GetAtUserList() []string {
	if x != nil {
		return x.AtUserList
	}
	return nil
}

func (x *AtTextElem) GetAtUsersInfo() []*AtInfo {
	if x != nil {
		return x.AtUsersInfo
	}
	return nil
}

func (x *AtTextElem) GetQuoteMessage() *IMMessage {
	if x != nil {
		return x.QuoteMessage
	}
	return nil
}

func (x *AtTextElem) GetIsAtSelf() bool {
	if x != nil {
		return x.IsAtSelf
	}
	return false
}

type FaceElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *FaceElem) Reset() {
	*x = FaceElem{}
	mi := &file_shared_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceElem) ProtoMessage() {}

func (x *FaceElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceElem.ProtoReflect.Descriptor instead.
func (*FaceElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{24}
}

func (x *FaceElem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FaceElem) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type LocationElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string  `protobuf:"bytes,1,opt,name=description,proto3" json:"description"`
	Longitude   float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude"`
	Latitude    float64 `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude"`
}

func (x *LocationElem) Reset() {
	*x = LocationElem{}
	mi := &file_shared_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationElem) ProtoMessage() {}

func (x *LocationElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationElem.ProtoReflect.Descriptor instead.
func (*LocationElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{25}
}

func (x *LocationElem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LocationElem) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LocationElem) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type CustomElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        string `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
	Extension   string `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension"`
}

func (x *CustomElem) Reset() {
	*x = CustomElem{}
	mi := &file_shared_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomElem) ProtoMessage() {}

func (x *CustomElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomElem.ProtoReflect.Descriptor instead.
func (*CustomElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{26}
}

func (x *CustomElem) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CustomElem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomElem) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

type QuoteElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              string           `protobuf:"bytes,1,opt,name=text,proto3" json:"text"`
	QuoteMessage      *IMMessage       `protobuf:"bytes,2,opt,name=quoteMessage,proto3" json:"quoteMessage"`
	MessageEntityList []*MessageEntity `protobuf:"bytes,3,rep,name=messageEntityList,proto3" json:"messageEntityList"`
}

func (x *QuoteElem) Reset() {
	*x = QuoteElem{}
	mi := &file_shared_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteElem) ProtoMessage() {}

func (x *QuoteElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteElem.ProtoReflect.Descriptor instead.
func (*QuoteElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{27}
}

func (x *QuoteElem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *QuoteElem) GetQuoteMessage() *IMMessage {
	if x != nil {
		return x.QuoteMessage
	}
	return nil
}

func (x *QuoteElem) GetMessageEntityList() []*MessageEntity {
	if x != nil {
		return x.MessageEntityList
	}
	return nil
}

type AdvancedTextElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              string           `protobuf:"bytes,1,opt,name=text,proto3" json:"text"`
	MessageEntityList []*MessageEntity `protobuf:"bytes,2,rep,name=messageEntityList,proto3" json:"messageEntityList"`
}

func (x *AdvancedTextElem) Reset() {
	*x = AdvancedTextElem{}
	mi := &file_shared_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancedTextElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedTextElem) ProtoMessage() {}

func (x *AdvancedTextElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedTextElem.ProtoReflect.Descriptor instead.
func (*AdvancedTextElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{28}
}

func (x *AdvancedTextElem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AdvancedTextElem) GetMessageEntityList() []*MessageEntity {
	if x != nil {
		return x.MessageEntityList
	}
	return nil
}

type TypingElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgTips string `protobuf:"bytes,1,opt,name=msgTips,proto3" json:"msgTips"`
}

func (x *TypingElem) Reset() {
	*x = TypingElem{}
	mi := &file_shared_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypingElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingElem) ProtoMessage() {}

func (x *TypingElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingElem.ProtoReflect.Descriptor instead.
func (*TypingElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{29}
}

func (x *TypingElem) GetMsgTips() string {
	if x != nil {
		return x.MsgTips
	}
	return ""
}

type StreamElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Content string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content"`
	Packets []string `protobuf:"bytes,3,rep,name=packets,proto3" json:"packets"`
	End     bool     `protobuf:"varint,4,opt,name=end,proto3" json:"end"`
}

func (x *StreamElem) Reset() {
	*x = StreamElem{}
	mi := &file_shared_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamElem) ProtoMessage() {}

func (x *StreamElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamElem.ProtoReflect.Descriptor instead.
func (*StreamElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{30}
}

func (x *StreamElem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StreamElem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *StreamElem) GetPackets() []string {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *StreamElem) GetEnd() bool {
	if x != nil {
		return x.End
	}
	return false
}

type GroupHasReadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasReadUserIDList []string `protobuf:"bytes,1,rep,name=hasReadUserIDList,proto3" json:"hasReadUserIDList"`
	HasReadCount      int32    `protobuf:"varint,2,opt,name=hasReadCount,proto3" json:"hasReadCount"`
	GroupMemberCount  int32    `protobuf:"varint,3,opt,name=groupMemberCount,proto3" json:"groupMemberCount"`
}

func (x *GroupHasReadInfo) Reset() {
	*x = GroupHasReadInfo{}
	mi := &file_shared_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupHasReadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupHasReadInfo) ProtoMessage() {}

func (x *GroupHasReadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupHasReadInfo.ProtoReflect.Descriptor instead.
func (*GroupHasReadInfo) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{31}
}

func (x *GroupHasReadInfo) GetHasReadUserIDList() []string {
	if x != nil {
		return x.HasReadUserIDList
	}
	return nil
}

func (x *GroupHasReadInfo) GetHasReadCount() int32 {
	if x != nil {
		return x.HasReadCount
	}
	return 0
}

func (x *GroupHasReadInfo) GetGroupMemberCount() int32 {
	if x != nil {
		return x.GroupMemberCount
	}
	return 0
}

type UploadProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64  `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Save     int64  `protobuf:"varint,2,opt,name=save,proto3" json:"save"`
	Current  int64  `protobuf:"varint,3,opt,name=current,proto3" json:"current"`
	UploadID string `protobuf:"bytes,4,opt,name=uploadID,proto3" json:"uploadID"`
}

func (x *UploadProgress) Reset() {
	*x = UploadProgress{}
	mi := &file_shared_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProgress) ProtoMessage() {}

func (x *UploadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProgress.ProtoReflect.Descriptor instead.
func (*UploadProgress) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{32}
}

func (x *UploadProgress) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UploadProgress) GetSave() int64 {
	if x != nil {
		return x.Save
	}
	return 0
}

func (x *UploadProgress) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *UploadProgress) GetUploadID() string {
	if x != nil {
		return x.UploadID
	}
	return ""
}

type AttachedInfoElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupHasReadInfo *GroupHasReadInfo `protobuf:"bytes,1,opt,name=groupHasReadInfo,proto3" json:"groupHasReadInfo"`
	IsPrivateChat    bool              `protobuf:"varint,2,opt,name=isPrivateChat,proto3" json:"isPrivateChat"`
	BurnDuration     int32             `protobuf:"varint,3,opt,name=burnDuration,proto3" json:"burnDuration"`
	HasReadTime      int64             `protobuf:"varint,4,opt,name=hasReadTime,proto3" json:"hasReadTime"`
	Progress         *UploadProgress   `protobuf:"bytes,5,opt,name=progress,proto3" json:"progress"`
}

func (x *AttachedInfoElem) Reset() {
	*x = AttachedInfoElem{}
	mi := &file_shared_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachedInfoElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedInfoElem) ProtoMessage() {}

func (x *AttachedInfoElem) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedInfoElem.ProtoReflect.Descriptor instead.
func (*AttachedInfoElem) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{33}
}

func (x *AttachedInfoElem) GetGroupHasReadInfo() *GroupHasReadInfo {
	if x != nil {
		return x.GroupHasReadInfo
	}
	return nil
}

func (x *AttachedInfoElem) GetIsPrivateChat() bool {
	if x != nil {
		return x.IsPrivateChat
	}
	return false
}

func (x *AttachedInfoElem) GetBurnDuration() int32 {
	if x != nil {
		return x.BurnDuration
	}
	return 0
}

func (x *AttachedInfoElem) GetHasReadTime() int64 {
	if x != nil {
		return x.HasReadTime
	}
	return 0
}

func (x *AttachedInfoElem) GetProgress() *UploadProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

// ////////////////////group/////////////////////
//
//	OnGroupCreated()
type GroupCreatedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          *IMGroup         `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser         *IMGroupMember   `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	MemberList     []*IMGroupMember `protobuf:"bytes,3,rep,name=memberList,proto3" json:"memberList"`
	OperationTime  int64            `protobuf:"varint,4,opt,name=operationTime,proto3" json:"operationTime"`
	GroupOwnerUser *IMGroupMember   `protobuf:"bytes,5,opt,name=groupOwnerUser,proto3" json:"groupOwnerUser"`
}

func (x *GroupCreatedTips) Reset() {
	*x = GroupCreatedTips{}
	mi := &file_shared_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupCreatedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCreatedTips) ProtoMessage() {}

func (x *GroupCreatedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCreatedTips.ProtoReflect.Descriptor instead.
func (*GroupCreatedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{34}
}

func (x *GroupCreatedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupCreatedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupCreatedTips) GetMemberList() []*IMGroupMember {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *GroupCreatedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupCreatedTips) GetGroupOwnerUser() *IMGroupMember {
	if x != nil {
		return x.GroupOwnerUser
	}
	return nil
}

//	OnGroupInfoSet()
//
//	message GroupInfoSetTips {
//	 shared.IMGroupMember opUser = 1; //who do this
//	 int64 muteTime = 2;
//	 shared.IMGroup group = 3;
//	}
//
//	message GroupInfoSetNameTips {
//	 shared.IMGroupMember opUser = 1; //who do this
//	 shared.IMGroup group = 2;
//	}
//
//	message GroupInfoSetAnnouncementTips {
//	 shared.IMGroupMember opUser = 1; //who do this
//	 shared.IMGroup group = 2;
//	}
//
//	OnJoinGroupApplication()
//
//	message JoinGroupApplicationTips {
//	 shared.IMGroup group = 1;
//	 shared.IMUser applicant = 2;
//	 string reqMsg = 3;
//	}
//
//	OnQuitGroup()
//
// Actively leave the group
type MemberQuitTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	QuitUser      *IMGroupMember `protobuf:"bytes,2,opt,name=quitUser,proto3" json:"quitUser"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime"`
}

func (x *MemberQuitTips) Reset() {
	*x = MemberQuitTips{}
	mi := &file_shared_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberQuitTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberQuitTips) ProtoMessage() {}

func (x *MemberQuitTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberQuitTips.ProtoReflect.Descriptor instead.
func (*MemberQuitTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{35}
}

func (x *MemberQuitTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberQuitTips) GetQuitUser() *IMGroupMember {
	if x != nil {
		return x.QuitUser
	}
	return nil
}

func (x *MemberQuitTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

//	OnApplicationGroupAccepted()
//
//	message GroupApplicationAcceptedTips {
//	 shared.IMGroup group = 1;
//	 shared.IMGroupMember opUser = 2;
//	 string handleMsg = 4;
//	 int32 receiverAs = 5; // admin(==1) or applicant(==0)
//	}
//
//	OnApplicationGroupRejected()
//
//	message GroupApplicationRejectedTips {
//	 shared.IMGroup group = 1;
//	 shared.IMGroupMember opUser = 2;
//	 string handleMsg = 4;
//	 int32 receiverAs = 5; // admin(==1) or applicant(==0)
//	}
//
//	OnTransferGroupOwner()
type GroupOwnerTransferredTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group             *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser            *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	NewGroupOwner     *IMGroupMember `protobuf:"bytes,3,opt,name=newGroupOwner,proto3" json:"newGroupOwner"`
	OldGroupOwner     string         `protobuf:"bytes,4,opt,name=oldGroupOwner,proto3" json:"oldGroupOwner"`
	OperationTime     int64          `protobuf:"varint,5,opt,name=operationTime,proto3" json:"operationTime"`
	OldGroupOwnerInfo *IMGroupMember `protobuf:"bytes,6,opt,name=oldGroupOwnerInfo,proto3" json:"oldGroupOwnerInfo"`
}

func (x *GroupOwnerTransferredTips) Reset() {
	*x = GroupOwnerTransferredTips{}
	mi := &file_shared_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupOwnerTransferredTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOwnerTransferredTips) ProtoMessage() {}

func (x *GroupOwnerTransferredTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOwnerTransferredTips.ProtoReflect.Descriptor instead.
func (*GroupOwnerTransferredTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{36}
}

func (x *GroupOwnerTransferredTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupOwnerTransferredTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupOwnerTransferredTips) GetNewGroupOwner() *IMGroupMember {
	if x != nil {
		return x.NewGroupOwner
	}
	return nil
}

func (x *GroupOwnerTransferredTips) GetOldGroupOwner() string {
	if x != nil {
		return x.OldGroupOwner
	}
	return ""
}

func (x *GroupOwnerTransferredTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupOwnerTransferredTips) GetOldGroupOwnerInfo() *IMGroupMember {
	if x != nil {
		return x.OldGroupOwnerInfo
	}
	return nil
}

// OnMemberKicked()
type MemberKickedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          *IMGroup         `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser         *IMGroupMember   `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	KickedUserList []*IMGroupMember `protobuf:"bytes,3,rep,name=kickedUserList,proto3" json:"kickedUserList"`
	OperationTime  int64            `protobuf:"varint,4,opt,name=operationTime,proto3" json:"operationTime"`
}

func (x *MemberKickedTips) Reset() {
	*x = MemberKickedTips{}
	mi := &file_shared_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberKickedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberKickedTips) ProtoMessage() {}

func (x *MemberKickedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberKickedTips.ProtoReflect.Descriptor instead.
func (*MemberKickedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{37}
}

func (x *MemberKickedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberKickedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *MemberKickedTips) GetKickedUserList() []*IMGroupMember {
	if x != nil {
		return x.KickedUserList
	}
	return nil
}

func (x *MemberKickedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

// OnMemberInvited()
type MemberInvitedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group           *IMGroup         `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser          *IMGroupMember   `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	InvitedUserList []*IMGroupMember `protobuf:"bytes,3,rep,name=invitedUserList,proto3" json:"invitedUserList"`
	OperationTime   int64            `protobuf:"varint,4,opt,name=operationTime,proto3" json:"operationTime"`
	InviterUser     *IMGroupMember   `protobuf:"bytes,7,opt,name=inviterUser,proto3" json:"inviterUser"`
}

func (x *MemberInvitedTips) Reset() {
	*x = MemberInvitedTips{}
	mi := &file_shared_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberInvitedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInvitedTips) ProtoMessage() {}

func (x *MemberInvitedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInvitedTips.ProtoReflect.Descriptor instead.
func (*MemberInvitedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{38}
}

func (x *MemberInvitedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberInvitedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *MemberInvitedTips) GetInvitedUserList() []*IMGroupMember {
	if x != nil {
		return x.InvitedUserList
	}
	return nil
}

func (x *MemberInvitedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *MemberInvitedTips) GetInviterUser() *IMGroupMember {
	if x != nil {
		return x.InviterUser
	}
	return nil
}

// Actively join the group
type MemberEnterTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	EntrantUser   *IMGroupMember `protobuf:"bytes,2,opt,name=entrantUser,proto3" json:"entrantUser"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime"`
}

func (x *MemberEnterTips) Reset() {
	*x = MemberEnterTips{}
	mi := &file_shared_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberEnterTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberEnterTips) ProtoMessage() {}

func (x *MemberEnterTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberEnterTips.ProtoReflect.Descriptor instead.
func (*MemberEnterTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{39}
}

func (x *MemberEnterTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *MemberEnterTips) GetEntrantUser() *IMGroupMember {
	if x != nil {
		return x.EntrantUser
	}
	return nil
}

func (x *MemberEnterTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

type GroupDismissedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime"`
}

func (x *GroupDismissedTips) Reset() {
	*x = GroupDismissedTips{}
	mi := &file_shared_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDismissedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDismissedTips) ProtoMessage() {}

func (x *GroupDismissedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDismissedTips.ProtoReflect.Descriptor instead.
func (*GroupDismissedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{40}
}

func (x *GroupDismissedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupDismissedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupDismissedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

type GroupMemberMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime"`
	MutedUser     *IMGroupMember `protobuf:"bytes,4,opt,name=mutedUser,proto3" json:"mutedUser"`
	MutedSeconds  uint32         `protobuf:"varint,5,opt,name=mutedSeconds,proto3" json:"mutedSeconds"`
}

func (x *GroupMemberMutedTips) Reset() {
	*x = GroupMemberMutedTips{}
	mi := &file_shared_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupMemberMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberMutedTips) ProtoMessage() {}

func (x *GroupMemberMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberMutedTips.ProtoReflect.Descriptor instead.
func (*GroupMemberMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{41}
}

func (x *GroupMemberMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupMemberMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupMemberMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupMemberMutedTips) GetMutedUser() *IMGroupMember {
	if x != nil {
		return x.MutedUser
	}
	return nil
}

func (x *GroupMemberMutedTips) GetMutedSeconds() uint32 {
	if x != nil {
		return x.MutedSeconds
	}
	return 0
}

type GroupMemberCancelMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime"`
	MutedUser     *IMGroupMember `protobuf:"bytes,4,opt,name=mutedUser,proto3" json:"mutedUser"`
}

func (x *GroupMemberCancelMutedTips) Reset() {
	*x = GroupMemberCancelMutedTips{}
	mi := &file_shared_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupMemberCancelMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberCancelMutedTips) ProtoMessage() {}

func (x *GroupMemberCancelMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberCancelMutedTips.ProtoReflect.Descriptor instead.
func (*GroupMemberCancelMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{42}
}

func (x *GroupMemberCancelMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupMemberCancelMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupMemberCancelMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *GroupMemberCancelMutedTips) GetMutedUser() *IMGroupMember {
	if x != nil {
		return x.MutedUser
	}
	return nil
}

type GroupMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime"`
}

func (x *GroupMutedTips) Reset() {
	*x = GroupMutedTips{}
	mi := &file_shared_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMutedTips) ProtoMessage() {}

func (x *GroupMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMutedTips.ProtoReflect.Descriptor instead.
func (*GroupMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{43}
}

func (x *GroupMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

type GroupCancelMutedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group         *IMGroup       `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
	OpUser        *IMGroupMember `protobuf:"bytes,2,opt,name=opUser,proto3" json:"opUser"`
	OperationTime int64          `protobuf:"varint,3,opt,name=operationTime,proto3" json:"operationTime"`
}

func (x *GroupCancelMutedTips) Reset() {
	*x = GroupCancelMutedTips{}
	mi := &file_shared_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupCancelMutedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCancelMutedTips) ProtoMessage() {}

func (x *GroupCancelMutedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCancelMutedTips.ProtoReflect.Descriptor instead.
func (*GroupCancelMutedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{44}
}

func (x *GroupCancelMutedTips) GetGroup() *IMGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupCancelMutedTips) GetOpUser() *IMGroupMember {
	if x != nil {
		return x.OpUser
	}
	return nil
}

func (x *GroupCancelMutedTips) GetOperationTime() int64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

//	message GroupMemberInfoSetTips {
//	 shared.IMGroup group = 1;
//	 shared.IMGroupMember opUser = 2;
//	 int64 operationTime = 3;
//	 shared.IMGroupMember changedUser = 4;
//	}
//
// ////////////////////friend/////////////////////
//
//	message FriendApplication {
//	 int64 addTime = 1;
//	 string addSource = 2;
//	 string addWording = 3;
//	}
type FromToUserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUserID string `protobuf:"bytes,1,opt,name=fromUserID,proto3" json:"fromUserID"`
	ToUserID   string `protobuf:"bytes,2,opt,name=toUserID,proto3" json:"toUserID"`
}

func (x *FromToUserID) Reset() {
	*x = FromToUserID{}
	mi := &file_shared_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromToUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromToUserID) ProtoMessage() {}

func (x *FromToUserID) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromToUserID.ProtoReflect.Descriptor instead.
func (*FromToUserID) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{45}
}

func (x *FromToUserID) GetFromUserID() string {
	if x != nil {
		return x.FromUserID
	}
	return ""
}

func (x *FromToUserID) GetToUserID() string {
	if x != nil {
		return x.ToUserID
	}
	return ""
}

// FromUserID apply to add ToUserID
//
//	message FriendApplicationTips {
//	 FromToUserID fromToUserID = 1;
//	}
//
// FromUserID accept or reject ToUserID
type FriendApplicationApprovedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromToUserID *FromToUserID `protobuf:"bytes,1,opt,name=fromToUserID,proto3" json:"fromToUserID"`
}

func (x *FriendApplicationApprovedTips) Reset() {
	*x = FriendApplicationApprovedTips{}
	mi := &file_shared_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendApplicationApprovedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendApplicationApprovedTips) ProtoMessage() {}

func (x *FriendApplicationApprovedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendApplicationApprovedTips.ProtoReflect.Descriptor instead.
func (*FriendApplicationApprovedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{46}
}

func (x *FriendApplicationApprovedTips) GetFromToUserID() *FromToUserID {
	if x != nil {
		return x.FromToUserID
	}
	return nil
}

type RevokedTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevokerID                   string `protobuf:"bytes,1,opt,name=revokerID,proto3" json:"revokerID"`
	RevokerRole                 int32  `protobuf:"varint,2,opt,name=revokerRole,proto3" json:"revokerRole"`
	ClientMsgID                 string `protobuf:"bytes,3,opt,name=clientMsgID,proto3" json:"clientMsgID"`
	RevokerNickname             string `protobuf:"bytes,4,opt,name=revokerNickname,proto3" json:"revokerNickname"`
	RevokeTime                  int64  `protobuf:"varint,5,opt,name=revokeTime,proto3" json:"revokeTime"`
	SourceMessageSendTime       int64  `protobuf:"varint,6,opt,name=sourceMessageSendTime,proto3" json:"sourceMessageSendTime"`
	SourceMessageSendID         string `protobuf:"bytes,7,opt,name=sourceMessageSendID,proto3" json:"sourceMessageSendID"`
	SourceMessageSenderNickname string `protobuf:"bytes,8,opt,name=sourceMessageSenderNickname,proto3" json:"sourceMessageSenderNickname"`
	SessionType                 int32  `protobuf:"varint,10,opt,name=sessionType,proto3" json:"sessionType"`
	Seq                         int64  `protobuf:"varint,11,opt,name=seq,proto3" json:"seq"`
	Ex                          string `protobuf:"bytes,12,opt,name=ex,proto3" json:"ex"`
}

func (x *RevokedTips) Reset() {
	*x = RevokedTips{}
	mi := &file_shared_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokedTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokedTips) ProtoMessage() {}

func (x *RevokedTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokedTips.ProtoReflect.Descriptor instead.
func (*RevokedTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{47}
}

func (x *RevokedTips) GetRevokerID() string {
	if x != nil {
		return x.RevokerID
	}
	return ""
}

func (x *RevokedTips) GetRevokerRole() int32 {
	if x != nil {
		return x.RevokerRole
	}
	return 0
}

func (x *RevokedTips) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

func (x *RevokedTips) GetRevokerNickname() string {
	if x != nil {
		return x.RevokerNickname
	}
	return ""
}

func (x *RevokedTips) GetRevokeTime() int64 {
	if x != nil {
		return x.RevokeTime
	}
	return 0
}

func (x *RevokedTips) GetSourceMessageSendTime() int64 {
	if x != nil {
		return x.SourceMessageSendTime
	}
	return 0
}

func (x *RevokedTips) GetSourceMessageSendID() string {
	if x != nil {
		return x.SourceMessageSendID
	}
	return ""
}

func (x *RevokedTips) GetSourceMessageSenderNickname() string {
	if x != nil {
		return x.SourceMessageSenderNickname
	}
	return ""
}

func (x *RevokedTips) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *RevokedTips) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *RevokedTips) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type ConversationPrivateChatTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvID         string `protobuf:"bytes,1,opt,name=recvID,proto3" json:"recvID"`
	SendID         string `protobuf:"bytes,2,opt,name=sendID,proto3" json:"sendID"`
	IsPrivate      bool   `protobuf:"varint,3,opt,name=isPrivate,proto3" json:"isPrivate"`
	ConversationID string `protobuf:"bytes,4,opt,name=conversationID,proto3" json:"conversationID"`
}

func (x *ConversationPrivateChatTips) Reset() {
	*x = ConversationPrivateChatTips{}
	mi := &file_shared_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationPrivateChatTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationPrivateChatTips) ProtoMessage() {}

func (x *ConversationPrivateChatTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationPrivateChatTips.ProtoReflect.Descriptor instead.
func (*ConversationPrivateChatTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{48}
}

func (x *ConversationPrivateChatTips) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *ConversationPrivateChatTips) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *ConversationPrivateChatTips) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ConversationPrivateChatTips) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type BusinessTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (x *BusinessTips) Reset() {
	*x = BusinessTips{}
	mi := &file_shared_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusinessTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessTips) ProtoMessage() {}

func (x *BusinessTips) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessTips.ProtoReflect.Descriptor instead.
func (*BusinessTips) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{49}
}

func (x *BusinessTips) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BusinessTips) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type IMMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientMsgID      string                  `protobuf:"bytes,1,opt,name=clientMsgID,proto3" json:"clientMsgID"`
	ServerMsgID      string                  `protobuf:"bytes,2,opt,name=serverMsgID,proto3" json:"serverMsgID"`
	CreateTime       int64                   `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime"`
	SendTime         int64                   `protobuf:"varint,4,opt,name=sendTime,proto3" json:"sendTime"`
	SessionType      common.SessionType      `protobuf:"varint,5,opt,name=sessionType,proto3,enum=openim.sdk.common.SessionType" json:"sessionType"`
	SendID           string                  `protobuf:"bytes,6,opt,name=sendID,proto3" json:"sendID"`
	RecvID           string                  `protobuf:"bytes,7,opt,name=recvID,proto3" json:"recvID"`
	MsgFrom          common.MsgFrom          `protobuf:"varint,8,opt,name=msgFrom,proto3,enum=openim.sdk.common.MsgFrom" json:"msgFrom"`
	ContentType      common.ContentType      `protobuf:"varint,9,opt,name=contentType,proto3,enum=openim.sdk.common.ContentType" json:"contentType"`
	SenderPlatformID common.Platform         `protobuf:"varint,10,opt,name=senderPlatformID,proto3,enum=openim.sdk.common.Platform" json:"senderPlatformID"`
	SenderNickname   string                  `protobuf:"bytes,11,opt,name=senderNickname,proto3" json:"senderNickname"`
	SenderFaceURL    string                  `protobuf:"bytes,12,opt,name=senderFaceURL,proto3" json:"senderFaceURL"`
	GroupID          string                  `protobuf:"bytes,13,opt,name=groupID,proto3" json:"groupID"`
	Seq              int64                   `protobuf:"varint,15,opt,name=seq,proto3" json:"seq"`
	IsRead           bool                    `protobuf:"varint,16,opt,name=isRead,proto3" json:"isRead"`
	Status           common.MsgStatus        `protobuf:"varint,17,opt,name=status,proto3,enum=openim.sdk.common.MsgStatus" json:"status"`
	OfflinePush      *common.OfflinePushInfo `protobuf:"bytes,18,opt,name=offlinePush,proto3" json:"offlinePush"`
	Ex               string                  `protobuf:"bytes,20,opt,name=ex,proto3" json:"ex"`
	LocalEx          string                  `protobuf:"bytes,21,opt,name=localEx,proto3" json:"localEx"`
	AttachedInfoElem *AttachedInfoElem       `protobuf:"bytes,22,opt,name=attachedInfoElem,proto3" json:"attachedInfoElem"`
	// Types that are assignable to Content:
	//
	//	*IMMessage_TextElem
	//	*IMMessage_CardElem
	//	*IMMessage_PictureElem
	//	*IMMessage_SoundElem
	//	*IMMessage_VideoElem
	//	*IMMessage_FileElem
	//	*IMMessage_MergeElem
	//	*IMMessage_AtTextElem
	//	*IMMessage_FaceElem
	//	*IMMessage_LocationElem
	//	*IMMessage_CustomElem
	//	*IMMessage_QuoteElem
	//	*IMMessage_AdvancedTextElem
	//	*IMMessage_TypingElem
	//	*IMMessage_StreamElem
	//	*IMMessage_RevokedTips
	//	*IMMessage_GroupCreatedTips
	//	*IMMessage_MemberQuitTips
	//	*IMMessage_GroupOwnerTransferredTips
	//	*IMMessage_MemberKickedTips
	//	*IMMessage_MemberInvitedTips
	//	*IMMessage_MemberEnterTips
	//	*IMMessage_GroupDismissedTips
	//	*IMMessage_GroupMemberMutedTips
	//	*IMMessage_GroupMemberCancelMutedTips
	//	*IMMessage_GroupMutedTips
	//	*IMMessage_GroupCancelMutedTips
	//	*IMMessage_FriendApplicationApprovedTips
	//	*IMMessage_ConversationPrivateChatTips
	//	*IMMessage_BusinessTips
	Content isIMMessage_Content `protobuf_oneof:"content"`
}

func (x *IMMessage) Reset() {
	*x = IMMessage{}
	mi := &file_shared_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMMessage) ProtoMessage() {}

func (x *IMMessage) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMMessage.ProtoReflect.Descriptor instead.
func (*IMMessage) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{50}
}

func (x *IMMessage) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

func (x *IMMessage) GetServerMsgID() string {
	if x != nil {
		return x.ServerMsgID
	}
	return ""
}

func (x *IMMessage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IMMessage) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *IMMessage) GetSessionType() common.SessionType {
	if x != nil {
		return x.SessionType
	}
	return common.SessionType(0)
}

func (x *IMMessage) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *IMMessage) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *IMMessage) GetMsgFrom() common.MsgFrom {
	if x != nil {
		return x.MsgFrom
	}
	return common.MsgFrom(0)
}

func (x *IMMessage) GetContentType() common.ContentType {
	if x != nil {
		return x.ContentType
	}
	return common.ContentType(0)
}

func (x *IMMessage) GetSenderPlatformID() common.Platform {
	if x != nil {
		return x.SenderPlatformID
	}
	return common.Platform(0)
}

func (x *IMMessage) GetSenderNickname() string {
	if x != nil {
		return x.SenderNickname
	}
	return ""
}

func (x *IMMessage) GetSenderFaceURL() string {
	if x != nil {
		return x.SenderFaceURL
	}
	return ""
}

func (x *IMMessage) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *IMMessage) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *IMMessage) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *IMMessage) GetStatus() common.MsgStatus {
	if x != nil {
		return x.Status
	}
	return common.MsgStatus(0)
}

func (x *IMMessage) GetOfflinePush() *common.OfflinePushInfo {
	if x != nil {
		return x.OfflinePush
	}
	return nil
}

func (x *IMMessage) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

func (x *IMMessage) GetLocalEx() string {
	if x != nil {
		return x.LocalEx
	}
	return ""
}

func (x *IMMessage) GetAttachedInfoElem() *AttachedInfoElem {
	if x != nil {
		return x.AttachedInfoElem
	}
	return nil
}

func (m *IMMessage) GetContent() isIMMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *IMMessage) GetTextElem() *TextElem {
	if x, ok := x.GetContent().(*IMMessage_TextElem); ok {
		return x.TextElem
	}
	return nil
}

func (x *IMMessage) GetCardElem() *CardElem {
	if x, ok := x.GetContent().(*IMMessage_CardElem); ok {
		return x.CardElem
	}
	return nil
}

func (x *IMMessage) GetPictureElem() *PictureElem {
	if x, ok := x.GetContent().(*IMMessage_PictureElem); ok {
		return x.PictureElem
	}
	return nil
}

func (x *IMMessage) GetSoundElem() *SoundElem {
	if x, ok := x.GetContent().(*IMMessage_SoundElem); ok {
		return x.SoundElem
	}
	return nil
}

func (x *IMMessage) GetVideoElem() *VideoElem {
	if x, ok := x.GetContent().(*IMMessage_VideoElem); ok {
		return x.VideoElem
	}
	return nil
}

func (x *IMMessage) GetFileElem() *FileElem {
	if x, ok := x.GetContent().(*IMMessage_FileElem); ok {
		return x.FileElem
	}
	return nil
}

func (x *IMMessage) GetMergeElem() *MergeElem {
	if x, ok := x.GetContent().(*IMMessage_MergeElem); ok {
		return x.MergeElem
	}
	return nil
}

func (x *IMMessage) GetAtTextElem() *AtTextElem {
	if x, ok := x.GetContent().(*IMMessage_AtTextElem); ok {
		return x.AtTextElem
	}
	return nil
}

func (x *IMMessage) GetFaceElem() *FaceElem {
	if x, ok := x.GetContent().(*IMMessage_FaceElem); ok {
		return x.FaceElem
	}
	return nil
}

func (x *IMMessage) GetLocationElem() *LocationElem {
	if x, ok := x.GetContent().(*IMMessage_LocationElem); ok {
		return x.LocationElem
	}
	return nil
}

func (x *IMMessage) GetCustomElem() *CustomElem {
	if x, ok := x.GetContent().(*IMMessage_CustomElem); ok {
		return x.CustomElem
	}
	return nil
}

func (x *IMMessage) GetQuoteElem() *QuoteElem {
	if x, ok := x.GetContent().(*IMMessage_QuoteElem); ok {
		return x.QuoteElem
	}
	return nil
}

func (x *IMMessage) GetAdvancedTextElem() *AdvancedTextElem {
	if x, ok := x.GetContent().(*IMMessage_AdvancedTextElem); ok {
		return x.AdvancedTextElem
	}
	return nil
}

func (x *IMMessage) GetTypingElem() *TypingElem {
	if x, ok := x.GetContent().(*IMMessage_TypingElem); ok {
		return x.TypingElem
	}
	return nil
}

func (x *IMMessage) GetStreamElem() *StreamElem {
	if x, ok := x.GetContent().(*IMMessage_StreamElem); ok {
		return x.StreamElem
	}
	return nil
}

func (x *IMMessage) GetRevokedTips() *RevokedTips {
	if x, ok := x.GetContent().(*IMMessage_RevokedTips); ok {
		return x.RevokedTips
	}
	return nil
}

func (x *IMMessage) GetGroupCreatedTips() *GroupCreatedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupCreatedTips); ok {
		return x.GroupCreatedTips
	}
	return nil
}

func (x *IMMessage) GetMemberQuitTips() *MemberQuitTips {
	if x, ok := x.GetContent().(*IMMessage_MemberQuitTips); ok {
		return x.MemberQuitTips
	}
	return nil
}

func (x *IMMessage) GetGroupOwnerTransferredTips() *GroupOwnerTransferredTips {
	if x, ok := x.GetContent().(*IMMessage_GroupOwnerTransferredTips); ok {
		return x.GroupOwnerTransferredTips
	}
	return nil
}

func (x *IMMessage) GetMemberKickedTips() *MemberKickedTips {
	if x, ok := x.GetContent().(*IMMessage_MemberKickedTips); ok {
		return x.MemberKickedTips
	}
	return nil
}

func (x *IMMessage) GetMemberInvitedTips() *MemberInvitedTips {
	if x, ok := x.GetContent().(*IMMessage_MemberInvitedTips); ok {
		return x.MemberInvitedTips
	}
	return nil
}

func (x *IMMessage) GetMemberEnterTips() *MemberEnterTips {
	if x, ok := x.GetContent().(*IMMessage_MemberEnterTips); ok {
		return x.MemberEnterTips
	}
	return nil
}

func (x *IMMessage) GetGroupDismissedTips() *GroupDismissedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupDismissedTips); ok {
		return x.GroupDismissedTips
	}
	return nil
}

func (x *IMMessage) GetGroupMemberMutedTips() *GroupMemberMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupMemberMutedTips); ok {
		return x.GroupMemberMutedTips
	}
	return nil
}

func (x *IMMessage) GetGroupMemberCancelMutedTips() *GroupMemberCancelMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupMemberCancelMutedTips); ok {
		return x.GroupMemberCancelMutedTips
	}
	return nil
}

func (x *IMMessage) GetGroupMutedTips() *GroupMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupMutedTips); ok {
		return x.GroupMutedTips
	}
	return nil
}

func (x *IMMessage) GetGroupCancelMutedTips() *GroupCancelMutedTips {
	if x, ok := x.GetContent().(*IMMessage_GroupCancelMutedTips); ok {
		return x.GroupCancelMutedTips
	}
	return nil
}

func (x *IMMessage) GetFriendApplicationApprovedTips() *FriendApplicationApprovedTips {
	if x, ok := x.GetContent().(*IMMessage_FriendApplicationApprovedTips); ok {
		return x.FriendApplicationApprovedTips
	}
	return nil
}

func (x *IMMessage) GetConversationPrivateChatTips() *ConversationPrivateChatTips {
	if x, ok := x.GetContent().(*IMMessage_ConversationPrivateChatTips); ok {
		return x.ConversationPrivateChatTips
	}
	return nil
}

func (x *IMMessage) GetBusinessTips() *BusinessTips {
	if x, ok := x.GetContent().(*IMMessage_BusinessTips); ok {
		return x.BusinessTips
	}
	return nil
}

type isIMMessage_Content interface {
	isIMMessage_Content()
}

type IMMessage_TextElem struct {
	TextElem *TextElem `protobuf:"bytes,23,opt,name=textElem,proto3,oneof"`
}

type IMMessage_CardElem struct {
	CardElem *CardElem `protobuf:"bytes,24,opt,name=cardElem,proto3,oneof"`
}

type IMMessage_PictureElem struct {
	PictureElem *PictureElem `protobuf:"bytes,25,opt,name=pictureElem,proto3,oneof"`
}

type IMMessage_SoundElem struct {
	SoundElem *SoundElem `protobuf:"bytes,26,opt,name=soundElem,proto3,oneof"`
}

type IMMessage_VideoElem struct {
	VideoElem *VideoElem `protobuf:"bytes,27,opt,name=videoElem,proto3,oneof"`
}

type IMMessage_FileElem struct {
	FileElem *FileElem `protobuf:"bytes,28,opt,name=fileElem,proto3,oneof"`
}

type IMMessage_MergeElem struct {
	MergeElem *MergeElem `protobuf:"bytes,29,opt,name=mergeElem,proto3,oneof"`
}

type IMMessage_AtTextElem struct {
	AtTextElem *AtTextElem `protobuf:"bytes,30,opt,name=atTextElem,proto3,oneof"`
}

type IMMessage_FaceElem struct {
	FaceElem *FaceElem `protobuf:"bytes,31,opt,name=faceElem,proto3,oneof"`
}

type IMMessage_LocationElem struct {
	LocationElem *LocationElem `protobuf:"bytes,32,opt,name=locationElem,proto3,oneof"`
}

type IMMessage_CustomElem struct {
	CustomElem *CustomElem `protobuf:"bytes,33,opt,name=customElem,proto3,oneof"`
}

type IMMessage_QuoteElem struct {
	QuoteElem *QuoteElem `protobuf:"bytes,34,opt,name=quoteElem,proto3,oneof"`
}

type IMMessage_AdvancedTextElem struct {
	AdvancedTextElem *AdvancedTextElem `protobuf:"bytes,35,opt,name=advancedTextElem,proto3,oneof"`
}

type IMMessage_TypingElem struct {
	TypingElem *TypingElem `protobuf:"bytes,36,opt,name=typingElem,proto3,oneof"`
}

type IMMessage_StreamElem struct {
	StreamElem *StreamElem `protobuf:"bytes,37,opt,name=streamElem,proto3,oneof"`
}

type IMMessage_RevokedTips struct {
	RevokedTips *RevokedTips `protobuf:"bytes,38,opt,name=revokedTips,proto3,oneof"`
}

type IMMessage_GroupCreatedTips struct {
	GroupCreatedTips *GroupCreatedTips `protobuf:"bytes,311,opt,name=groupCreatedTips,proto3,oneof"`
}

type IMMessage_MemberQuitTips struct {
	// GroupInfoSetTips groupInfoSetTips = 39;
	// GroupInfoSetNameTips groupInfoSetNameTips = 40;
	// GroupInfoSetAnnouncementTips groupInfoSetAnnouncementTips = 41;
	// JoinGroupApplicationTips joinGroupApplicationTips = 42;
	MemberQuitTips *MemberQuitTips `protobuf:"bytes,43,opt,name=memberQuitTips,proto3,oneof"`
}

type IMMessage_GroupOwnerTransferredTips struct {
	// GroupApplicationAcceptedTips groupApplicationAcceptedTips = 44;
	// GroupApplicationRejectedTips groupApplicationRejectedTips = 45;
	GroupOwnerTransferredTips *GroupOwnerTransferredTips `protobuf:"bytes,46,opt,name=groupOwnerTransferredTips,proto3,oneof"`
}

type IMMessage_MemberKickedTips struct {
	MemberKickedTips *MemberKickedTips `protobuf:"bytes,47,opt,name=memberKickedTips,proto3,oneof"`
}

type IMMessage_MemberInvitedTips struct {
	MemberInvitedTips *MemberInvitedTips `protobuf:"bytes,48,opt,name=memberInvitedTips,proto3,oneof"`
}

type IMMessage_MemberEnterTips struct {
	MemberEnterTips *MemberEnterTips `protobuf:"bytes,49,opt,name=memberEnterTips,proto3,oneof"`
}

type IMMessage_GroupDismissedTips struct {
	GroupDismissedTips *GroupDismissedTips `protobuf:"bytes,50,opt,name=groupDismissedTips,proto3,oneof"`
}

type IMMessage_GroupMemberMutedTips struct {
	GroupMemberMutedTips *GroupMemberMutedTips `protobuf:"bytes,51,opt,name=groupMemberMutedTips,proto3,oneof"`
}

type IMMessage_GroupMemberCancelMutedTips struct {
	GroupMemberCancelMutedTips *GroupMemberCancelMutedTips `protobuf:"bytes,52,opt,name=groupMemberCancelMutedTips,proto3,oneof"`
}

type IMMessage_GroupMutedTips struct {
	GroupMutedTips *GroupMutedTips `protobuf:"bytes,53,opt,name=groupMutedTips,proto3,oneof"`
}

type IMMessage_GroupCancelMutedTips struct {
	GroupCancelMutedTips *GroupCancelMutedTips `protobuf:"bytes,54,opt,name=groupCancelMutedTips,proto3,oneof"`
}

type IMMessage_FriendApplicationApprovedTips struct {
	// GroupMemberInfoSetTips groupMemberInfoSetTips = 55;
	// FriendApplicationTips friendApplicationTips = 56;
	FriendApplicationApprovedTips *FriendApplicationApprovedTips `protobuf:"bytes,57,opt,name=friendApplicationApprovedTips,proto3,oneof"`
}

type IMMessage_ConversationPrivateChatTips struct {
	// FriendApplicationRejectedTips friendApplicationRejectedTips = 58;
	// FriendAddedTips friendAddedTips = 59;
	// FriendDeletedTips friendDeletedTips = 60;
	// BlackAddedTips blackAddedTips = 61;
	// BlackDeletedTips blackDeletedTips = 62;
	// FriendInfoChangedTips friendInfoChangedTips = 63;
	// UserInfoUpdatedTips userInfoUpdatedTips = 64;
	// UserStatusChangeTips userStatusChangeTips = 65;
	// UserCommandAddTips userCommandAddTips = 66;
	// UserCommandUpdateTips userCommandUpdateTips = 67;
	// UserCommandDeleteTips userCommandDeleteTips = 68;
	// ConversationUpdateTips conversationUpdateTips = 69;
	// ConversationSetPrivateTips conversationSetPrivateTips = 70;
	// ConversationHasReadTips conversationHasReadTips = 71;
	// DeleteMessageTips deleteMessageTips = 72;
	// RevokedTips revokedTips = 73;
	// ClearConversationTips clearConversationTips = 74;
	// DeleteMsgsTips deleteMsgsTips = 75;
	// MarkAsReadTips markAsReadTips = 76;
	// FriendsInfoUpdateTips friendsInfoUpdateTips = 77;
	// SubUserOnlineStatusTips subUserOnlineStatusTips = 78;
	// StreamMsgTips streamMsgTips = 79;
	ConversationPrivateChatTips *ConversationPrivateChatTips `protobuf:"bytes,79,opt,name=conversationPrivateChatTips,proto3,oneof"`
}

type IMMessage_BusinessTips struct {
	BusinessTips *BusinessTips `protobuf:"bytes,80,opt,name=businessTips,proto3,oneof"`
}

func (*IMMessage_TextElem) isIMMessage_Content() {}

func (*IMMessage_CardElem) isIMMessage_Content() {}

func (*IMMessage_PictureElem) isIMMessage_Content() {}

func (*IMMessage_SoundElem) isIMMessage_Content() {}

func (*IMMessage_VideoElem) isIMMessage_Content() {}

func (*IMMessage_FileElem) isIMMessage_Content() {}

func (*IMMessage_MergeElem) isIMMessage_Content() {}

func (*IMMessage_AtTextElem) isIMMessage_Content() {}

func (*IMMessage_FaceElem) isIMMessage_Content() {}

func (*IMMessage_LocationElem) isIMMessage_Content() {}

func (*IMMessage_CustomElem) isIMMessage_Content() {}

func (*IMMessage_QuoteElem) isIMMessage_Content() {}

func (*IMMessage_AdvancedTextElem) isIMMessage_Content() {}

func (*IMMessage_TypingElem) isIMMessage_Content() {}

func (*IMMessage_StreamElem) isIMMessage_Content() {}

func (*IMMessage_RevokedTips) isIMMessage_Content() {}

func (*IMMessage_GroupCreatedTips) isIMMessage_Content() {}

func (*IMMessage_MemberQuitTips) isIMMessage_Content() {}

func (*IMMessage_GroupOwnerTransferredTips) isIMMessage_Content() {}

func (*IMMessage_MemberKickedTips) isIMMessage_Content() {}

func (*IMMessage_MemberInvitedTips) isIMMessage_Content() {}

func (*IMMessage_MemberEnterTips) isIMMessage_Content() {}

func (*IMMessage_GroupDismissedTips) isIMMessage_Content() {}

func (*IMMessage_GroupMemberMutedTips) isIMMessage_Content() {}

func (*IMMessage_GroupMemberCancelMutedTips) isIMMessage_Content() {}

func (*IMMessage_GroupMutedTips) isIMMessage_Content() {}

func (*IMMessage_GroupCancelMutedTips) isIMMessage_Content() {}

func (*IMMessage_FriendApplicationApprovedTips) isIMMessage_Content() {}

func (*IMMessage_ConversationPrivateChatTips) isIMMessage_Content() {}

func (*IMMessage_BusinessTips) isIMMessage_Content() {}

var File_shared_proto protoreflect.FileDescriptor

var file_shared_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf3, 0x01, 0x0a, 0x06, 0x49, 0x4d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0xd4, 0x02, 0x0a, 0x08,
	0x49, 0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x07, 0x49, 0x4d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0xbd, 0x03, 0x0a, 0x0f, 0x49,
	0x4d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x80, 0x06, 0x0a, 0x07, 0x49,
	0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x54, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x6f, 0x6f, 0x6b, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x11,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x03,
	0x0a, 0x0d, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x06, 0x0a, 0x0e, 0x49, 0x4d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x4d, 0x73, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x71, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x4d,
	0x73, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x8b, 0x06, 0x0a, 0x0e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x52, 0x65,
	0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x72, 0x61,
	0x66, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x73, 0x67, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73,
	0x4d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x4a, 0x0a, 0x06, 0x41, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0xb5, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x03, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52,
	0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x08,
	0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x68, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x0e, 0x0a, 0x02,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x89, 0x02, 0x0a,
	0x0b, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x03, 0x0a,
	0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55,
	0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x0d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78,
	0x22, 0xd7, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x41,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x41, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x22, 0x34, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6a,
	0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a,
	0x09, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40,
	0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x76, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x70, 0x73,
	0x22, 0x66, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x11, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x0e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x22, 0x8e, 0x02,
	0x0a, 0x10, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x4f, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x72,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb0,
	0x02, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x71, 0x75, 0x69, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x08, 0x71, 0x75, 0x69, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x19, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49,
	0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x6e,
	0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0e, 0x6b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x11, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49,
	0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x1a, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49,
	0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x09, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x38, 0x0a, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xa8, 0x01, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49,
	0x4d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x1d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa7, 0x03, 0x0a,
	0x0b, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x44,
	0x12, 0x40, 0x0a, 0x1b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x0c,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xee, 0x18, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x76, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x12, 0x4f, 0x0a, 0x10, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x08,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6c, 0x65,
	0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3c, 0x0a,
	0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x61,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x41, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x08,
	0x66, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x3f,
	0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x3c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x51, 0x0a,
	0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x10,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65,
	0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x51, 0x75, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x75, 0x69,
	0x74, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51,
	0x75, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x6c, 0x0a, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x19, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4e,
	0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x12, 0x57,
	0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00,
	0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x75, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x6f, 0x0a, 0x1a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x70, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x14, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x78, 0x0a, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x70, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x1d,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x69, 0x70, 0x73, 0x12, 0x72, 0x0a,
	0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x70, 0x73, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x70,
	0x73, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70,
	0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x70, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2a, 0x29, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x4b,
	0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x04, 0x2a, 0x6b, 0x0a, 0x15, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x65,
	0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f,
	0x6f, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x2a, 0x5d,
	0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x01, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x73, 0x64, 0x6b,
	0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shared_proto_rawDescOnce sync.Once
	file_shared_proto_rawDescData = file_shared_proto_rawDesc
)

func file_shared_proto_rawDescGZIP() []byte {
	file_shared_proto_rawDescOnce.Do(func() {
		file_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_shared_proto_rawDescData)
	})
	return file_shared_proto_rawDescData
}

var file_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_shared_proto_goTypes = []any{
	(GroupStatus)(0),                      // 0: openim.sdk.shared.GroupStatus
	(GroupJoinSource)(0),                  // 1: openim.sdk.shared.GroupJoinSource
	(GroupNeedVerification)(0),            // 2: openim.sdk.shared.GroupNeedVerification
	(GroupLookMemberInfo)(0),              // 3: openim.sdk.shared.GroupLookMemberInfo
	(GroupApplyMemberFriend)(0),           // 4: openim.sdk.shared.GroupApplyMemberFriend
	(*IMUser)(nil),                        // 5: openim.sdk.shared.IMUser
	(*CommandInfo)(nil),                   // 6: openim.sdk.shared.CommandInfo
	(*IMFriend)(nil),                      // 7: openim.sdk.shared.IMFriend
	(*IMBlack)(nil),                       // 8: openim.sdk.shared.IMBlack
	(*IMFriendRequest)(nil),               // 9: openim.sdk.shared.IMFriendRequest
	(*IMGroup)(nil),                       // 10: openim.sdk.shared.IMGroup
	(*IMGroupMember)(nil),                 // 11: openim.sdk.shared.IMGroupMember
	(*IMGroupRequest)(nil),                // 12: openim.sdk.shared.IMGroupRequest
	(*IMConversation)(nil),                // 13: openim.sdk.shared.IMConversation
	(*AtInfo)(nil),                        // 14: openim.sdk.shared.AtInfo
	(*ImageInfo)(nil),                     // 15: openim.sdk.shared.ImageInfo
	(*PictureBaseInfo)(nil),               // 16: openim.sdk.shared.PictureBaseInfo
	(*SoundBaseInfo)(nil),                 // 17: openim.sdk.shared.SoundBaseInfo
	(*VideoBaseInfo)(nil),                 // 18: openim.sdk.shared.VideoBaseInfo
	(*FileBaseInfo)(nil),                  // 19: openim.sdk.shared.FileBaseInfo
	(*TextElem)(nil),                      // 20: openim.sdk.shared.TextElem
	(*CardElem)(nil),                      // 21: openim.sdk.shared.CardElem
	(*PictureElem)(nil),                   // 22: openim.sdk.shared.PictureElem
	(*SoundElem)(nil),                     // 23: openim.sdk.shared.SoundElem
	(*VideoElem)(nil),                     // 24: openim.sdk.shared.VideoElem
	(*FileElem)(nil),                      // 25: openim.sdk.shared.FileElem
	(*MessageEntity)(nil),                 // 26: openim.sdk.shared.MessageEntity
	(*MergeElem)(nil),                     // 27: openim.sdk.shared.MergeElem
	(*AtTextElem)(nil),                    // 28: openim.sdk.shared.AtTextElem
	(*FaceElem)(nil),                      // 29: openim.sdk.shared.FaceElem
	(*LocationElem)(nil),                  // 30: openim.sdk.shared.LocationElem
	(*CustomElem)(nil),                    // 31: openim.sdk.shared.CustomElem
	(*QuoteElem)(nil),                     // 32: openim.sdk.shared.QuoteElem
	(*AdvancedTextElem)(nil),              // 33: openim.sdk.shared.AdvancedTextElem
	(*TypingElem)(nil),                    // 34: openim.sdk.shared.TypingElem
	(*StreamElem)(nil),                    // 35: openim.sdk.shared.StreamElem
	(*GroupHasReadInfo)(nil),              // 36: openim.sdk.shared.GroupHasReadInfo
	(*UploadProgress)(nil),                // 37: openim.sdk.shared.UploadProgress
	(*AttachedInfoElem)(nil),              // 38: openim.sdk.shared.AttachedInfoElem
	(*GroupCreatedTips)(nil),              // 39: openim.sdk.shared.GroupCreatedTips
	(*MemberQuitTips)(nil),                // 40: openim.sdk.shared.MemberQuitTips
	(*GroupOwnerTransferredTips)(nil),     // 41: openim.sdk.shared.GroupOwnerTransferredTips
	(*MemberKickedTips)(nil),              // 42: openim.sdk.shared.MemberKickedTips
	(*MemberInvitedTips)(nil),             // 43: openim.sdk.shared.MemberInvitedTips
	(*MemberEnterTips)(nil),               // 44: openim.sdk.shared.MemberEnterTips
	(*GroupDismissedTips)(nil),            // 45: openim.sdk.shared.GroupDismissedTips
	(*GroupMemberMutedTips)(nil),          // 46: openim.sdk.shared.GroupMemberMutedTips
	(*GroupMemberCancelMutedTips)(nil),    // 47: openim.sdk.shared.GroupMemberCancelMutedTips
	(*GroupMutedTips)(nil),                // 48: openim.sdk.shared.GroupMutedTips
	(*GroupCancelMutedTips)(nil),          // 49: openim.sdk.shared.GroupCancelMutedTips
	(*FromToUserID)(nil),                  // 50: openim.sdk.shared.FromToUserID
	(*FriendApplicationApprovedTips)(nil), // 51: openim.sdk.shared.FriendApplicationApprovedTips
	(*RevokedTips)(nil),                   // 52: openim.sdk.shared.RevokedTips
	(*ConversationPrivateChatTips)(nil),   // 53: openim.sdk.shared.ConversationPrivateChatTips
	(*BusinessTips)(nil),                  // 54: openim.sdk.shared.BusinessTips
	(*IMMessage)(nil),                     // 55: openim.sdk.shared.IMMessage
	(common.GlobalRecvMsgOpt)(0),          // 56: openim.sdk.common.GlobalRecvMsgOpt
	(common.SessionType)(0),               // 57: openim.sdk.common.SessionType
	(common.ConvRecvMsgOpt)(0),            // 58: openim.sdk.common.ConvRecvMsgOpt
	(common.ConvGroupAtType)(0),           // 59: openim.sdk.common.ConvGroupAtType
	(common.MsgFrom)(0),                   // 60: openim.sdk.common.MsgFrom
	(common.ContentType)(0),               // 61: openim.sdk.common.ContentType
	(common.Platform)(0),                  // 62: openim.sdk.common.Platform
	(common.MsgStatus)(0),                 // 63: openim.sdk.common.MsgStatus
	(*common.OfflinePushInfo)(nil),        // 64: openim.sdk.common.OfflinePushInfo
}
var file_shared_proto_depIdxs = []int32{
	56, // 0: openim.sdk.shared.IMUser.globalRecvMsgOpt:type_name -> openim.sdk.common.GlobalRecvMsgOpt
	0,  // 1: openim.sdk.shared.IMGroup.status:type_name -> openim.sdk.shared.GroupStatus
	2,  // 2: openim.sdk.shared.IMGroup.needVerification:type_name -> openim.sdk.shared.GroupNeedVerification
	3,  // 3: openim.sdk.shared.IMGroup.lookMemberInfo:type_name -> openim.sdk.shared.GroupLookMemberInfo
	4,  // 4: openim.sdk.shared.IMGroup.applyMemberFriend:type_name -> openim.sdk.shared.GroupApplyMemberFriend
	1,  // 5: openim.sdk.shared.IMGroupMember.joinSource:type_name -> openim.sdk.shared.GroupJoinSource
	1,  // 6: openim.sdk.shared.IMGroupRequest.joinSource:type_name -> openim.sdk.shared.GroupJoinSource
	57, // 7: openim.sdk.shared.IMConversation.conversationType:type_name -> openim.sdk.common.SessionType
	58, // 8: openim.sdk.shared.IMConversation.recvMsgOpt:type_name -> openim.sdk.common.ConvRecvMsgOpt
	59, // 9: openim.sdk.shared.IMConversation.groupAtType:type_name -> openim.sdk.common.ConvGroupAtType
	55, // 10: openim.sdk.shared.IMConversation.latestMsg:type_name -> openim.sdk.shared.IMMessage
	16, // 11: openim.sdk.shared.PictureElem.sourcePicture:type_name -> openim.sdk.shared.PictureBaseInfo
	16, // 12: openim.sdk.shared.PictureElem.bigPicture:type_name -> openim.sdk.shared.PictureBaseInfo
	16, // 13: openim.sdk.shared.PictureElem.snapshotPicture:type_name -> openim.sdk.shared.PictureBaseInfo
	55, // 14: openim.sdk.shared.MergeElem.multiMessage:type_name -> openim.sdk.shared.IMMessage
	26, // 15: openim.sdk.shared.MergeElem.messageEntityList:type_name -> openim.sdk.shared.MessageEntity
	14, // 16: openim.sdk.shared.AtTextElem.atUsersInfo:type_name -> openim.sdk.shared.AtInfo
	55, // 17: openim.sdk.shared.AtTextElem.quoteMessage:type_name -> openim.sdk.shared.IMMessage
	55, // 18: openim.sdk.shared.QuoteElem.quoteMessage:type_name -> openim.sdk.shared.IMMessage
	26, // 19: openim.sdk.shared.QuoteElem.messageEntityList:type_name -> openim.sdk.shared.MessageEntity
	26, // 20: openim.sdk.shared.AdvancedTextElem.messageEntityList:type_name -> openim.sdk.shared.MessageEntity
	36, // 21: openim.sdk.shared.AttachedInfoElem.groupHasReadInfo:type_name -> openim.sdk.shared.GroupHasReadInfo
	37, // 22: openim.sdk.shared.AttachedInfoElem.progress:type_name -> openim.sdk.shared.UploadProgress
	10, // 23: openim.sdk.shared.GroupCreatedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 24: openim.sdk.shared.GroupCreatedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	11, // 25: openim.sdk.shared.GroupCreatedTips.memberList:type_name -> openim.sdk.shared.IMGroupMember
	11, // 26: openim.sdk.shared.GroupCreatedTips.groupOwnerUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 27: openim.sdk.shared.MemberQuitTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 28: openim.sdk.shared.MemberQuitTips.quitUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 29: openim.sdk.shared.GroupOwnerTransferredTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 30: openim.sdk.shared.GroupOwnerTransferredTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	11, // 31: openim.sdk.shared.GroupOwnerTransferredTips.newGroupOwner:type_name -> openim.sdk.shared.IMGroupMember
	11, // 32: openim.sdk.shared.GroupOwnerTransferredTips.oldGroupOwnerInfo:type_name -> openim.sdk.shared.IMGroupMember
	10, // 33: openim.sdk.shared.MemberKickedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 34: openim.sdk.shared.MemberKickedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	11, // 35: openim.sdk.shared.MemberKickedTips.kickedUserList:type_name -> openim.sdk.shared.IMGroupMember
	10, // 36: openim.sdk.shared.MemberInvitedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 37: openim.sdk.shared.MemberInvitedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	11, // 38: openim.sdk.shared.MemberInvitedTips.invitedUserList:type_name -> openim.sdk.shared.IMGroupMember
	11, // 39: openim.sdk.shared.MemberInvitedTips.inviterUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 40: openim.sdk.shared.MemberEnterTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 41: openim.sdk.shared.MemberEnterTips.entrantUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 42: openim.sdk.shared.GroupDismissedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 43: openim.sdk.shared.GroupDismissedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 44: openim.sdk.shared.GroupMemberMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 45: openim.sdk.shared.GroupMemberMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	11, // 46: openim.sdk.shared.GroupMemberMutedTips.mutedUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 47: openim.sdk.shared.GroupMemberCancelMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 48: openim.sdk.shared.GroupMemberCancelMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	11, // 49: openim.sdk.shared.GroupMemberCancelMutedTips.mutedUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 50: openim.sdk.shared.GroupMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 51: openim.sdk.shared.GroupMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	10, // 52: openim.sdk.shared.GroupCancelMutedTips.group:type_name -> openim.sdk.shared.IMGroup
	11, // 53: openim.sdk.shared.GroupCancelMutedTips.opUser:type_name -> openim.sdk.shared.IMGroupMember
	50, // 54: openim.sdk.shared.FriendApplicationApprovedTips.fromToUserID:type_name -> openim.sdk.shared.FromToUserID
	57, // 55: openim.sdk.shared.IMMessage.sessionType:type_name -> openim.sdk.common.SessionType
	60, // 56: openim.sdk.shared.IMMessage.msgFrom:type_name -> openim.sdk.common.MsgFrom
	61, // 57: openim.sdk.shared.IMMessage.contentType:type_name -> openim.sdk.common.ContentType
	62, // 58: openim.sdk.shared.IMMessage.senderPlatformID:type_name -> openim.sdk.common.Platform
	63, // 59: openim.sdk.shared.IMMessage.status:type_name -> openim.sdk.common.MsgStatus
	64, // 60: openim.sdk.shared.IMMessage.offlinePush:type_name -> openim.sdk.common.OfflinePushInfo
	38, // 61: openim.sdk.shared.IMMessage.attachedInfoElem:type_name -> openim.sdk.shared.AttachedInfoElem
	20, // 62: openim.sdk.shared.IMMessage.textElem:type_name -> openim.sdk.shared.TextElem
	21, // 63: openim.sdk.shared.IMMessage.cardElem:type_name -> openim.sdk.shared.CardElem
	22, // 64: openim.sdk.shared.IMMessage.pictureElem:type_name -> openim.sdk.shared.PictureElem
	23, // 65: openim.sdk.shared.IMMessage.soundElem:type_name -> openim.sdk.shared.SoundElem
	24, // 66: openim.sdk.shared.IMMessage.videoElem:type_name -> openim.sdk.shared.VideoElem
	25, // 67: openim.sdk.shared.IMMessage.fileElem:type_name -> openim.sdk.shared.FileElem
	27, // 68: openim.sdk.shared.IMMessage.mergeElem:type_name -> openim.sdk.shared.MergeElem
	28, // 69: openim.sdk.shared.IMMessage.atTextElem:type_name -> openim.sdk.shared.AtTextElem
	29, // 70: openim.sdk.shared.IMMessage.faceElem:type_name -> openim.sdk.shared.FaceElem
	30, // 71: openim.sdk.shared.IMMessage.locationElem:type_name -> openim.sdk.shared.LocationElem
	31, // 72: openim.sdk.shared.IMMessage.customElem:type_name -> openim.sdk.shared.CustomElem
	32, // 73: openim.sdk.shared.IMMessage.quoteElem:type_name -> openim.sdk.shared.QuoteElem
	33, // 74: openim.sdk.shared.IMMessage.advancedTextElem:type_name -> openim.sdk.shared.AdvancedTextElem
	34, // 75: openim.sdk.shared.IMMessage.typingElem:type_name -> openim.sdk.shared.TypingElem
	35, // 76: openim.sdk.shared.IMMessage.streamElem:type_name -> openim.sdk.shared.StreamElem
	52, // 77: openim.sdk.shared.IMMessage.revokedTips:type_name -> openim.sdk.shared.RevokedTips
	39, // 78: openim.sdk.shared.IMMessage.groupCreatedTips:type_name -> openim.sdk.shared.GroupCreatedTips
	40, // 79: openim.sdk.shared.IMMessage.memberQuitTips:type_name -> openim.sdk.shared.MemberQuitTips
	41, // 80: openim.sdk.shared.IMMessage.groupOwnerTransferredTips:type_name -> openim.sdk.shared.GroupOwnerTransferredTips
	42, // 81: openim.sdk.shared.IMMessage.memberKickedTips:type_name -> openim.sdk.shared.MemberKickedTips
	43, // 82: openim.sdk.shared.IMMessage.memberInvitedTips:type_name -> openim.sdk.shared.MemberInvitedTips
	44, // 83: openim.sdk.shared.IMMessage.memberEnterTips:type_name -> openim.sdk.shared.MemberEnterTips
	45, // 84: openim.sdk.shared.IMMessage.groupDismissedTips:type_name -> openim.sdk.shared.GroupDismissedTips
	46, // 85: openim.sdk.shared.IMMessage.groupMemberMutedTips:type_name -> openim.sdk.shared.GroupMemberMutedTips
	47, // 86: openim.sdk.shared.IMMessage.groupMemberCancelMutedTips:type_name -> openim.sdk.shared.GroupMemberCancelMutedTips
	48, // 87: openim.sdk.shared.IMMessage.groupMutedTips:type_name -> openim.sdk.shared.GroupMutedTips
	49, // 88: openim.sdk.shared.IMMessage.groupCancelMutedTips:type_name -> openim.sdk.shared.GroupCancelMutedTips
	51, // 89: openim.sdk.shared.IMMessage.friendApplicationApprovedTips:type_name -> openim.sdk.shared.FriendApplicationApprovedTips
	53, // 90: openim.sdk.shared.IMMessage.conversationPrivateChatTips:type_name -> openim.sdk.shared.ConversationPrivateChatTips
	54, // 91: openim.sdk.shared.IMMessage.businessTips:type_name -> openim.sdk.shared.BusinessTips
	92, // [92:92] is the sub-list for method output_type
	92, // [92:92] is the sub-list for method input_type
	92, // [92:92] is the sub-list for extension type_name
	92, // [92:92] is the sub-list for extension extendee
	0,  // [0:92] is the sub-list for field type_name
}

func init() { file_shared_proto_init() }
func file_shared_proto_init() {
	if File_shared_proto != nil {
		return
	}
	file_shared_proto_msgTypes[50].OneofWrappers = []any{
		(*IMMessage_TextElem)(nil),
		(*IMMessage_CardElem)(nil),
		(*IMMessage_PictureElem)(nil),
		(*IMMessage_SoundElem)(nil),
		(*IMMessage_VideoElem)(nil),
		(*IMMessage_FileElem)(nil),
		(*IMMessage_MergeElem)(nil),
		(*IMMessage_AtTextElem)(nil),
		(*IMMessage_FaceElem)(nil),
		(*IMMessage_LocationElem)(nil),
		(*IMMessage_CustomElem)(nil),
		(*IMMessage_QuoteElem)(nil),
		(*IMMessage_AdvancedTextElem)(nil),
		(*IMMessage_TypingElem)(nil),
		(*IMMessage_StreamElem)(nil),
		(*IMMessage_RevokedTips)(nil),
		(*IMMessage_GroupCreatedTips)(nil),
		(*IMMessage_MemberQuitTips)(nil),
		(*IMMessage_GroupOwnerTransferredTips)(nil),
		(*IMMessage_MemberKickedTips)(nil),
		(*IMMessage_MemberInvitedTips)(nil),
		(*IMMessage_MemberEnterTips)(nil),
		(*IMMessage_GroupDismissedTips)(nil),
		(*IMMessage_GroupMemberMutedTips)(nil),
		(*IMMessage_GroupMemberCancelMutedTips)(nil),
		(*IMMessage_GroupMutedTips)(nil),
		(*IMMessage_GroupCancelMutedTips)(nil),
		(*IMMessage_FriendApplicationApprovedTips)(nil),
		(*IMMessage_ConversationPrivateChatTips)(nil),
		(*IMMessage_BusinessTips)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shared_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_proto_goTypes,
		DependencyIndexes: file_shared_proto_depIdxs,
		EnumInfos:         file_shared_proto_enumTypes,
		MessageInfos:      file_shared_proto_msgTypes,
	}.Build()
	File_shared_proto = out.File
	file_shared_proto_rawDesc = nil
	file_shared_proto_goTypes = nil
	file_shared_proto_depIdxs = nil
}
