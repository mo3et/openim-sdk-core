// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: conversation.proto

package conversation

import (
	common "github.com/openimsdk/openim-sdk-core/v3/proto/go/common"
	shared "github.com/openimsdk/openim-sdk-core/v3/proto/go/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -----------------------------------------------------------------------------------------------------------------
type GetAllConversationListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllConversationListReq) Reset() {
	*x = GetAllConversationListReq{}
	mi := &file_conversation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllConversationListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConversationListReq) ProtoMessage() {}

func (x *GetAllConversationListReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConversationListReq.ProtoReflect.Descriptor instead.
func (*GetAllConversationListReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

type GetAllConversationListResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @shared_imconversations
	ConversationList []*shared.IMConversation `protobuf:"bytes,1,rep,name=conversationList,proto3" json:"conversationList"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetAllConversationListResp) Reset() {
	*x = GetAllConversationListResp{}
	mi := &file_conversation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllConversationListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConversationListResp) ProtoMessage() {}

func (x *GetAllConversationListResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConversationListResp.ProtoReflect.Descriptor instead.
func (*GetAllConversationListResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllConversationListResp) GetConversationList() []*shared.IMConversation {
	if x != nil {
		return x.ConversationList
	}
	return nil
}

type GetConversationListSplitReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @common_request_pagination
	Pagination    *common.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationListSplitReq) Reset() {
	*x = GetConversationListSplitReq{}
	mi := &file_conversation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationListSplitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationListSplitReq) ProtoMessage() {}

func (x *GetConversationListSplitReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationListSplitReq.ProtoReflect.Descriptor instead.
func (*GetConversationListSplitReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{2}
}

func (x *GetConversationListSplitReq) GetPagination() *common.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetConversationListSplitResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @shared_imconversations
	ConversationList []*shared.IMConversation `protobuf:"bytes,1,rep,name=conversationList,proto3" json:"conversationList"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetConversationListSplitResp) Reset() {
	*x = GetConversationListSplitResp{}
	mi := &file_conversation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationListSplitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationListSplitResp) ProtoMessage() {}

func (x *GetConversationListSplitResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationListSplitResp.ProtoReflect.Descriptor instead.
func (*GetConversationListSplitResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *GetConversationListSplitResp) GetConversationList() []*shared.IMConversation {
	if x != nil {
		return x.ConversationList
	}
	return nil
}

type HideConversationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HideConversationReq) Reset() {
	*x = HideConversationReq{}
	mi := &file_conversation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HideConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideConversationReq) ProtoMessage() {}

func (x *HideConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideConversationReq.ProtoReflect.Descriptor instead.
func (*HideConversationReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *HideConversationReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type HideConversationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HideConversationResp) Reset() {
	*x = HideConversationResp{}
	mi := &file_conversation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HideConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideConversationResp) ProtoMessage() {}

func (x *HideConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideConversationResp.ProtoReflect.Descriptor instead.
func (*HideConversationResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{5}
}

type GetAtAllTagReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAtAllTagReq) Reset() {
	*x = GetAtAllTagReq{}
	mi := &file_conversation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAtAllTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAtAllTagReq) ProtoMessage() {}

func (x *GetAtAllTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAtAllTagReq.ProtoReflect.Descriptor instead.
func (*GetAtAllTagReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{6}
}

type GetAtAllTagResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// at tag
	Tag           string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAtAllTagResp) Reset() {
	*x = GetAtAllTagResp{}
	mi := &file_conversation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAtAllTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAtAllTagResp) ProtoMessage() {}

func (x *GetAtAllTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAtAllTagResp.ProtoReflect.Descriptor instead.
func (*GetAtAllTagResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *GetAtAllTagResp) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type GetOneConversationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @message_session_type
	SessionType   common.SessionType `protobuf:"varint,1,opt,name=sessionType,proto3,enum=openim.sdk.common.SessionType" json:"sessionType"`
	SourceID      string             `protobuf:"bytes,2,opt,name=sourceID,proto3" json:"sourceID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOneConversationReq) Reset() {
	*x = GetOneConversationReq{}
	mi := &file_conversation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOneConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneConversationReq) ProtoMessage() {}

func (x *GetOneConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneConversationReq.ProtoReflect.Descriptor instead.
func (*GetOneConversationReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *GetOneConversationReq) GetSessionType() common.SessionType {
	if x != nil {
		return x.SessionType
	}
	return common.SessionType(0)
}

func (x *GetOneConversationReq) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

type GetOneConversationResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @shared_imconversation
	Conversation  *shared.IMConversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOneConversationResp) Reset() {
	*x = GetOneConversationResp{}
	mi := &file_conversation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOneConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneConversationResp) ProtoMessage() {}

func (x *GetOneConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneConversationResp.ProtoReflect.Descriptor instead.
func (*GetOneConversationResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *GetOneConversationResp) GetConversation() *shared.IMConversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

type GetMultipleConversationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @shared_imconversations
	ConversationIDList []string `protobuf:"bytes,1,rep,name=conversationIDList,proto3" json:"conversationIDList"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetMultipleConversationReq) Reset() {
	*x = GetMultipleConversationReq{}
	mi := &file_conversation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMultipleConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultipleConversationReq) ProtoMessage() {}

func (x *GetMultipleConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultipleConversationReq.ProtoReflect.Descriptor instead.
func (*GetMultipleConversationReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *GetMultipleConversationReq) GetConversationIDList() []string {
	if x != nil {
		return x.ConversationIDList
	}
	return nil
}

type GetMultipleConversationResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @shared_imconversations
	ConversationList []*shared.IMConversation `protobuf:"bytes,1,rep,name=conversationList,proto3" json:"conversationList"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMultipleConversationResp) Reset() {
	*x = GetMultipleConversationResp{}
	mi := &file_conversation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMultipleConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultipleConversationResp) ProtoMessage() {}

func (x *GetMultipleConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultipleConversationResp.ProtoReflect.Descriptor instead.
func (*GetMultipleConversationResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{11}
}

func (x *GetMultipleConversationResp) GetConversationList() []*shared.IMConversation {
	if x != nil {
		return x.ConversationList
	}
	return nil
}

type HideAllConversationsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HideAllConversationsReq) Reset() {
	*x = HideAllConversationsReq{}
	mi := &file_conversation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HideAllConversationsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAllConversationsReq) ProtoMessage() {}

func (x *HideAllConversationsReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAllConversationsReq.ProtoReflect.Descriptor instead.
func (*HideAllConversationsReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{12}
}

type HideAllConversationsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HideAllConversationsResp) Reset() {
	*x = HideAllConversationsResp{}
	mi := &file_conversation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HideAllConversationsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideAllConversationsResp) ProtoMessage() {}

func (x *HideAllConversationsResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideAllConversationsResp.ProtoReflect.Descriptor instead.
func (*HideAllConversationsResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{13}
}

type SetConversationDraftReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	// @conversation_draft_text
	DraftText     string `protobuf:"bytes,2,opt,name=draftText,proto3" json:"draftText"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConversationDraftReq) Reset() {
	*x = SetConversationDraftReq{}
	mi := &file_conversation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConversationDraftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationDraftReq) ProtoMessage() {}

func (x *SetConversationDraftReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationDraftReq.ProtoReflect.Descriptor instead.
func (*SetConversationDraftReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *SetConversationDraftReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *SetConversationDraftReq) GetDraftText() string {
	if x != nil {
		return x.DraftText
	}
	return ""
}

type SetConversationDraftResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConversationDraftResp) Reset() {
	*x = SetConversationDraftResp{}
	mi := &file_conversation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConversationDraftResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationDraftResp) ProtoMessage() {}

func (x *SetConversationDraftResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationDraftResp.ProtoReflect.Descriptor instead.
func (*SetConversationDraftResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{15}
}

type SetConversationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	// @opt @conversation_recv_msg_opt
	RecvMsgOpt *common.ConvRecvMsgOpt `protobuf:"varint,2,opt,name=recvMsgOpt,proto3,enum=openim.sdk.common.ConvRecvMsgOpt,oneof" json:"recvMsgOpt"`
	// @opt @conversation_group_at_type
	GroupAtType *common.ConvGroupAtType `protobuf:"varint,3,opt,name=groupAtType,proto3,enum=openim.sdk.common.ConvGroupAtType,oneof" json:"groupAtType"`
	// @opt @conversation_is_pinned
	IsPinned *bool `protobuf:"varint,4,opt,name=isPinned,proto3,oneof" json:"isPinned"`
	// @opt @conversation_is_private
	IsPrivateChat *bool `protobuf:"varint,5,opt,name=isPrivateChat,proto3,oneof" json:"isPrivateChat"`
	// @opt @conversation_burn_duration
	BurnDuration *int32 `protobuf:"varint,6,opt,name=burnDuration,proto3,oneof" json:"burnDuration"`
	// @opt @conversation_ex
	Ex            *string `protobuf:"bytes,7,opt,name=ex,proto3,oneof" json:"ex"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConversationReq) Reset() {
	*x = SetConversationReq{}
	mi := &file_conversation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationReq) ProtoMessage() {}

func (x *SetConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationReq.ProtoReflect.Descriptor instead.
func (*SetConversationReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{16}
}

func (x *SetConversationReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *SetConversationReq) GetRecvMsgOpt() common.ConvRecvMsgOpt {
	if x != nil && x.RecvMsgOpt != nil {
		return *x.RecvMsgOpt
	}
	return common.ConvRecvMsgOpt(0)
}

func (x *SetConversationReq) GetGroupAtType() common.ConvGroupAtType {
	if x != nil && x.GroupAtType != nil {
		return *x.GroupAtType
	}
	return common.ConvGroupAtType(0)
}

func (x *SetConversationReq) GetIsPinned() bool {
	if x != nil && x.IsPinned != nil {
		return *x.IsPinned
	}
	return false
}

func (x *SetConversationReq) GetIsPrivateChat() bool {
	if x != nil && x.IsPrivateChat != nil {
		return *x.IsPrivateChat
	}
	return false
}

func (x *SetConversationReq) GetBurnDuration() int32 {
	if x != nil && x.BurnDuration != nil {
		return *x.BurnDuration
	}
	return 0
}

func (x *SetConversationReq) GetEx() string {
	if x != nil && x.Ex != nil {
		return *x.Ex
	}
	return ""
}

type SetConversationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConversationResp) Reset() {
	*x = SetConversationResp{}
	mi := &file_conversation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConversationResp) ProtoMessage() {}

func (x *SetConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConversationResp.ProtoReflect.Descriptor instead.
func (*SetConversationResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{17}
}

type GetTotalUnreadMsgCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTotalUnreadMsgCountReq) Reset() {
	*x = GetTotalUnreadMsgCountReq{}
	mi := &file_conversation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTotalUnreadMsgCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalUnreadMsgCountReq) ProtoMessage() {}

func (x *GetTotalUnreadMsgCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalUnreadMsgCountReq.ProtoReflect.Descriptor instead.
func (*GetTotalUnreadMsgCountReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{18}
}

type GetTotalUnreadMsgCountResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_total_unread_count
	TotalUnreadCount int32 `protobuf:"varint,1,opt,name=totalUnreadCount,proto3" json:"totalUnreadCount"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetTotalUnreadMsgCountResp) Reset() {
	*x = GetTotalUnreadMsgCountResp{}
	mi := &file_conversation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTotalUnreadMsgCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalUnreadMsgCountResp) ProtoMessage() {}

func (x *GetTotalUnreadMsgCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalUnreadMsgCountResp.ProtoReflect.Descriptor instead.
func (*GetTotalUnreadMsgCountResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{19}
}

func (x *GetTotalUnreadMsgCountResp) GetTotalUnreadCount() int32 {
	if x != nil {
		return x.TotalUnreadCount
	}
	return 0
}

type GetConversationIDBySessionTypeReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// session source id
	SourceID string `protobuf:"bytes,1,opt,name=sourceID,proto3" json:"sourceID"`
	// @conversation_session_type
	SessionType   common.SessionType `protobuf:"varint,2,opt,name=sessionType,proto3,enum=openim.sdk.common.SessionType" json:"sessionType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationIDBySessionTypeReq) Reset() {
	*x = GetConversationIDBySessionTypeReq{}
	mi := &file_conversation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationIDBySessionTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationIDBySessionTypeReq) ProtoMessage() {}

func (x *GetConversationIDBySessionTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationIDBySessionTypeReq.ProtoReflect.Descriptor instead.
func (*GetConversationIDBySessionTypeReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{20}
}

func (x *GetConversationIDBySessionTypeReq) GetSourceID() string {
	if x != nil {
		return x.SourceID
	}
	return ""
}

func (x *GetConversationIDBySessionTypeReq) GetSessionType() common.SessionType {
	if x != nil {
		return x.SessionType
	}
	return common.SessionType(0)
}

type GetConversationIDBySessionTypeResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetConversationIDBySessionTypeResp) Reset() {
	*x = GetConversationIDBySessionTypeResp{}
	mi := &file_conversation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationIDBySessionTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationIDBySessionTypeResp) ProtoMessage() {}

func (x *GetConversationIDBySessionTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationIDBySessionTypeResp.ProtoReflect.Descriptor instead.
func (*GetConversationIDBySessionTypeResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{21}
}

func (x *GetConversationIDBySessionTypeResp) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type MarkConversationMessageAsReadReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MarkConversationMessageAsReadReq) Reset() {
	*x = MarkConversationMessageAsReadReq{}
	mi := &file_conversation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkConversationMessageAsReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkConversationMessageAsReadReq) ProtoMessage() {}

func (x *MarkConversationMessageAsReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkConversationMessageAsReadReq.ProtoReflect.Descriptor instead.
func (*MarkConversationMessageAsReadReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{22}
}

func (x *MarkConversationMessageAsReadReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type MarkConversationMessageAsReadResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkConversationMessageAsReadResp) Reset() {
	*x = MarkConversationMessageAsReadResp{}
	mi := &file_conversation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkConversationMessageAsReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkConversationMessageAsReadResp) ProtoMessage() {}

func (x *MarkConversationMessageAsReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkConversationMessageAsReadResp.ProtoReflect.Descriptor instead.
func (*MarkConversationMessageAsReadResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{23}
}

type MarkAllConversationMessageAsReadReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkAllConversationMessageAsReadReq) Reset() {
	*x = MarkAllConversationMessageAsReadReq{}
	mi := &file_conversation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAllConversationMessageAsReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAllConversationMessageAsReadReq) ProtoMessage() {}

func (x *MarkAllConversationMessageAsReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAllConversationMessageAsReadReq.ProtoReflect.Descriptor instead.
func (*MarkAllConversationMessageAsReadReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{24}
}

type MarkAllConversationMessageAsReadResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkAllConversationMessageAsReadResp) Reset() {
	*x = MarkAllConversationMessageAsReadResp{}
	mi := &file_conversation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAllConversationMessageAsReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAllConversationMessageAsReadResp) ProtoMessage() {}

func (x *MarkAllConversationMessageAsReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAllConversationMessageAsReadResp.ProtoReflect.Descriptor instead.
func (*MarkAllConversationMessageAsReadResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{25}
}

type ClearConversationAndDeleteAllMsgReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClearConversationAndDeleteAllMsgReq) Reset() {
	*x = ClearConversationAndDeleteAllMsgReq{}
	mi := &file_conversation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearConversationAndDeleteAllMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearConversationAndDeleteAllMsgReq) ProtoMessage() {}

func (x *ClearConversationAndDeleteAllMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearConversationAndDeleteAllMsgReq.ProtoReflect.Descriptor instead.
func (*ClearConversationAndDeleteAllMsgReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{26}
}

func (x *ClearConversationAndDeleteAllMsgReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type ClearConversationAndDeleteAllMsgResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearConversationAndDeleteAllMsgResp) Reset() {
	*x = ClearConversationAndDeleteAllMsgResp{}
	mi := &file_conversation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearConversationAndDeleteAllMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearConversationAndDeleteAllMsgResp) ProtoMessage() {}

func (x *ClearConversationAndDeleteAllMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearConversationAndDeleteAllMsgResp.ProtoReflect.Descriptor instead.
func (*ClearConversationAndDeleteAllMsgResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{27}
}

type DeleteConversationAndDeleteAllMsgReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteConversationAndDeleteAllMsgReq) Reset() {
	*x = DeleteConversationAndDeleteAllMsgReq{}
	mi := &file_conversation_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConversationAndDeleteAllMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationAndDeleteAllMsgReq) ProtoMessage() {}

func (x *DeleteConversationAndDeleteAllMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationAndDeleteAllMsgReq.ProtoReflect.Descriptor instead.
func (*DeleteConversationAndDeleteAllMsgReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteConversationAndDeleteAllMsgReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

type DeleteConversationAndDeleteAllMsgResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConversationAndDeleteAllMsgResp) Reset() {
	*x = DeleteConversationAndDeleteAllMsgResp{}
	mi := &file_conversation_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConversationAndDeleteAllMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationAndDeleteAllMsgResp) ProtoMessage() {}

func (x *DeleteConversationAndDeleteAllMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationAndDeleteAllMsgResp.ProtoReflect.Descriptor instead.
func (*DeleteConversationAndDeleteAllMsgResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{29}
}

type SearchConversationReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// search param
	SearchParam   string `protobuf:"bytes,1,opt,name=searchParam,proto3" json:"searchParam"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchConversationReq) Reset() {
	*x = SearchConversationReq{}
	mi := &file_conversation_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationReq) ProtoMessage() {}

func (x *SearchConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationReq.ProtoReflect.Descriptor instead.
func (*SearchConversationReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{30}
}

func (x *SearchConversationReq) GetSearchParam() string {
	if x != nil {
		return x.SearchParam
	}
	return ""
}

type SearchConversationResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @shared_imconversations
	ConversationList []*shared.IMConversation `protobuf:"bytes,1,rep,name=conversationList,proto3" json:"conversationList"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SearchConversationResp) Reset() {
	*x = SearchConversationResp{}
	mi := &file_conversation_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchConversationResp) ProtoMessage() {}

func (x *SearchConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchConversationResp.ProtoReflect.Descriptor instead.
func (*SearchConversationResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{31}
}

func (x *SearchConversationResp) GetConversationList() []*shared.IMConversation {
	if x != nil {
		return x.ConversationList
	}
	return nil
}

type ChangeInputStatesReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	// is focus
	Focus         bool `protobuf:"varint,3,opt,name=focus,proto3" json:"focus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeInputStatesReq) Reset() {
	*x = ChangeInputStatesReq{}
	mi := &file_conversation_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeInputStatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeInputStatesReq) ProtoMessage() {}

func (x *ChangeInputStatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeInputStatesReq.ProtoReflect.Descriptor instead.
func (*ChangeInputStatesReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{32}
}

func (x *ChangeInputStatesReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *ChangeInputStatesReq) GetFocus() bool {
	if x != nil {
		return x.Focus
	}
	return false
}

type ChangeInputStatesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeInputStatesResp) Reset() {
	*x = ChangeInputStatesResp{}
	mi := &file_conversation_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeInputStatesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeInputStatesResp) ProtoMessage() {}

func (x *ChangeInputStatesResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeInputStatesResp.ProtoReflect.Descriptor instead.
func (*ChangeInputStatesResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{33}
}

type GetInputStatesReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @conversation_id
	ConversationID string `protobuf:"bytes,1,opt,name=conversationID,proto3" json:"conversationID"`
	// @user_id
	UserID        string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInputStatesReq) Reset() {
	*x = GetInputStatesReq{}
	mi := &file_conversation_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInputStatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputStatesReq) ProtoMessage() {}

func (x *GetInputStatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputStatesReq.ProtoReflect.Descriptor instead.
func (*GetInputStatesReq) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{34}
}

func (x *GetInputStatesReq) GetConversationID() string {
	if x != nil {
		return x.ConversationID
	}
	return ""
}

func (x *GetInputStatesReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetInputStatesResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @common_platforms
	Platforms     []common.Platform `protobuf:"varint,1,rep,packed,name=platforms,proto3,enum=openim.sdk.common.Platform" json:"platforms"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInputStatesResp) Reset() {
	*x = GetInputStatesResp{}
	mi := &file_conversation_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInputStatesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInputStatesResp) ProtoMessage() {}

func (x *GetInputStatesResp) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInputStatesResp.ProtoReflect.Descriptor instead.
func (*GetInputStatesResp) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{35}
}

func (x *GetInputStatesResp) GetPlatforms() []common.Platform {
	if x != nil {
		return x.Platforms
	}
	return nil
}

var File_conversation_proto protoreflect.FileDescriptor

var file_conversation_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x6b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x13, 0x48, 0x69, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x16, 0x0a, 0x14, 0x48, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x10,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x22, 0x23, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x40,
	0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x48, 0x69, 0x64,
	0x65, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x22, 0x1a, 0x0a, 0x18, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x5f, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xaf, 0x03,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67,
	0x4f, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x62,
	0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x02, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x72, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x78, 0x22,
	0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x48, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x40, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x4c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x4a, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x23, 0x0a, 0x21, 0x4d,
	0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x25, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x22, 0x26, 0x0a, 0x24, 0x4d, 0x61, 0x72, 0x6b, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x4d, 0x0a, 0x23, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x26,
	0x0a, 0x24, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4e, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x39, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x67, 0x0a, 0x16, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x32, 0xd4, 0x12, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f,
	0x0a, 0x10, 0x48, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x7b, 0x0a, 0x14, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7b, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x99, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x3b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x9f, 0x01, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x9f, 0x01, 0x0a, 0x20, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0xa2, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x12, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x72, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x51, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xaa, 0x02, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xba,
	0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conversation_proto_rawDescOnce sync.Once
	file_conversation_proto_rawDescData = file_conversation_proto_rawDesc
)

func file_conversation_proto_rawDescGZIP() []byte {
	file_conversation_proto_rawDescOnce.Do(func() {
		file_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(file_conversation_proto_rawDescData)
	})
	return file_conversation_proto_rawDescData
}

var file_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_conversation_proto_goTypes = []any{
	(*GetAllConversationListReq)(nil),             // 0: openim.sdk.conversation.GetAllConversationListReq
	(*GetAllConversationListResp)(nil),            // 1: openim.sdk.conversation.GetAllConversationListResp
	(*GetConversationListSplitReq)(nil),           // 2: openim.sdk.conversation.GetConversationListSplitReq
	(*GetConversationListSplitResp)(nil),          // 3: openim.sdk.conversation.GetConversationListSplitResp
	(*HideConversationReq)(nil),                   // 4: openim.sdk.conversation.HideConversationReq
	(*HideConversationResp)(nil),                  // 5: openim.sdk.conversation.HideConversationResp
	(*GetAtAllTagReq)(nil),                        // 6: openim.sdk.conversation.GetAtAllTagReq
	(*GetAtAllTagResp)(nil),                       // 7: openim.sdk.conversation.GetAtAllTagResp
	(*GetOneConversationReq)(nil),                 // 8: openim.sdk.conversation.GetOneConversationReq
	(*GetOneConversationResp)(nil),                // 9: openim.sdk.conversation.GetOneConversationResp
	(*GetMultipleConversationReq)(nil),            // 10: openim.sdk.conversation.GetMultipleConversationReq
	(*GetMultipleConversationResp)(nil),           // 11: openim.sdk.conversation.GetMultipleConversationResp
	(*HideAllConversationsReq)(nil),               // 12: openim.sdk.conversation.HideAllConversationsReq
	(*HideAllConversationsResp)(nil),              // 13: openim.sdk.conversation.HideAllConversationsResp
	(*SetConversationDraftReq)(nil),               // 14: openim.sdk.conversation.SetConversationDraftReq
	(*SetConversationDraftResp)(nil),              // 15: openim.sdk.conversation.SetConversationDraftResp
	(*SetConversationReq)(nil),                    // 16: openim.sdk.conversation.SetConversationReq
	(*SetConversationResp)(nil),                   // 17: openim.sdk.conversation.SetConversationResp
	(*GetTotalUnreadMsgCountReq)(nil),             // 18: openim.sdk.conversation.GetTotalUnreadMsgCountReq
	(*GetTotalUnreadMsgCountResp)(nil),            // 19: openim.sdk.conversation.GetTotalUnreadMsgCountResp
	(*GetConversationIDBySessionTypeReq)(nil),     // 20: openim.sdk.conversation.GetConversationIDBySessionTypeReq
	(*GetConversationIDBySessionTypeResp)(nil),    // 21: openim.sdk.conversation.GetConversationIDBySessionTypeResp
	(*MarkConversationMessageAsReadReq)(nil),      // 22: openim.sdk.conversation.MarkConversationMessageAsReadReq
	(*MarkConversationMessageAsReadResp)(nil),     // 23: openim.sdk.conversation.MarkConversationMessageAsReadResp
	(*MarkAllConversationMessageAsReadReq)(nil),   // 24: openim.sdk.conversation.MarkAllConversationMessageAsReadReq
	(*MarkAllConversationMessageAsReadResp)(nil),  // 25: openim.sdk.conversation.MarkAllConversationMessageAsReadResp
	(*ClearConversationAndDeleteAllMsgReq)(nil),   // 26: openim.sdk.conversation.ClearConversationAndDeleteAllMsgReq
	(*ClearConversationAndDeleteAllMsgResp)(nil),  // 27: openim.sdk.conversation.ClearConversationAndDeleteAllMsgResp
	(*DeleteConversationAndDeleteAllMsgReq)(nil),  // 28: openim.sdk.conversation.DeleteConversationAndDeleteAllMsgReq
	(*DeleteConversationAndDeleteAllMsgResp)(nil), // 29: openim.sdk.conversation.DeleteConversationAndDeleteAllMsgResp
	(*SearchConversationReq)(nil),                 // 30: openim.sdk.conversation.SearchConversationReq
	(*SearchConversationResp)(nil),                // 31: openim.sdk.conversation.SearchConversationResp
	(*ChangeInputStatesReq)(nil),                  // 32: openim.sdk.conversation.ChangeInputStatesReq
	(*ChangeInputStatesResp)(nil),                 // 33: openim.sdk.conversation.ChangeInputStatesResp
	(*GetInputStatesReq)(nil),                     // 34: openim.sdk.conversation.GetInputStatesReq
	(*GetInputStatesResp)(nil),                    // 35: openim.sdk.conversation.GetInputStatesResp
	(*shared.IMConversation)(nil),                 // 36: openim.sdk.shared.IMConversation
	(*common.RequestPagination)(nil),              // 37: openim.sdk.common.RequestPagination
	(common.SessionType)(0),                       // 38: openim.sdk.common.SessionType
	(common.ConvRecvMsgOpt)(0),                    // 39: openim.sdk.common.ConvRecvMsgOpt
	(common.ConvGroupAtType)(0),                   // 40: openim.sdk.common.ConvGroupAtType
	(common.Platform)(0),                          // 41: openim.sdk.common.Platform
}
var file_conversation_proto_depIdxs = []int32{
	36, // 0: openim.sdk.conversation.GetAllConversationListResp.conversationList:type_name -> openim.sdk.shared.IMConversation
	37, // 1: openim.sdk.conversation.GetConversationListSplitReq.pagination:type_name -> openim.sdk.common.RequestPagination
	36, // 2: openim.sdk.conversation.GetConversationListSplitResp.conversationList:type_name -> openim.sdk.shared.IMConversation
	38, // 3: openim.sdk.conversation.GetOneConversationReq.sessionType:type_name -> openim.sdk.common.SessionType
	36, // 4: openim.sdk.conversation.GetOneConversationResp.conversation:type_name -> openim.sdk.shared.IMConversation
	36, // 5: openim.sdk.conversation.GetMultipleConversationResp.conversationList:type_name -> openim.sdk.shared.IMConversation
	39, // 6: openim.sdk.conversation.SetConversationReq.recvMsgOpt:type_name -> openim.sdk.common.ConvRecvMsgOpt
	40, // 7: openim.sdk.conversation.SetConversationReq.groupAtType:type_name -> openim.sdk.common.ConvGroupAtType
	38, // 8: openim.sdk.conversation.GetConversationIDBySessionTypeReq.sessionType:type_name -> openim.sdk.common.SessionType
	36, // 9: openim.sdk.conversation.SearchConversationResp.conversationList:type_name -> openim.sdk.shared.IMConversation
	41, // 10: openim.sdk.conversation.GetInputStatesResp.platforms:type_name -> openim.sdk.common.Platform
	0,  // 11: openim.sdk.conversation.ConversationService.GetAllConversationList:input_type -> openim.sdk.conversation.GetAllConversationListReq
	2,  // 12: openim.sdk.conversation.ConversationService.GetConversationListSplit:input_type -> openim.sdk.conversation.GetConversationListSplitReq
	4,  // 13: openim.sdk.conversation.ConversationService.HideConversation:input_type -> openim.sdk.conversation.HideConversationReq
	6,  // 14: openim.sdk.conversation.ConversationService.GetAtAllTag:input_type -> openim.sdk.conversation.GetAtAllTagReq
	8,  // 15: openim.sdk.conversation.ConversationService.GetOneConversation:input_type -> openim.sdk.conversation.GetOneConversationReq
	10, // 16: openim.sdk.conversation.ConversationService.GetMultipleConversation:input_type -> openim.sdk.conversation.GetMultipleConversationReq
	12, // 17: openim.sdk.conversation.ConversationService.HideAllConversations:input_type -> openim.sdk.conversation.HideAllConversationsReq
	14, // 18: openim.sdk.conversation.ConversationService.SetConversationDraft:input_type -> openim.sdk.conversation.SetConversationDraftReq
	16, // 19: openim.sdk.conversation.ConversationService.SetConversation:input_type -> openim.sdk.conversation.SetConversationReq
	18, // 20: openim.sdk.conversation.ConversationService.GetTotalUnreadMsgCount:input_type -> openim.sdk.conversation.GetTotalUnreadMsgCountReq
	20, // 21: openim.sdk.conversation.ConversationService.GetConversationIDBySessionType:input_type -> openim.sdk.conversation.GetConversationIDBySessionTypeReq
	22, // 22: openim.sdk.conversation.ConversationService.MarkConversationMessageAsRead:input_type -> openim.sdk.conversation.MarkConversationMessageAsReadReq
	24, // 23: openim.sdk.conversation.ConversationService.MarkAllConversationMessageAsRead:input_type -> openim.sdk.conversation.MarkAllConversationMessageAsReadReq
	26, // 24: openim.sdk.conversation.ConversationService.ClearConversationAndDeleteAllMsg:input_type -> openim.sdk.conversation.ClearConversationAndDeleteAllMsgReq
	28, // 25: openim.sdk.conversation.ConversationService.DeleteConversationAndDeleteAllMsg:input_type -> openim.sdk.conversation.DeleteConversationAndDeleteAllMsgReq
	30, // 26: openim.sdk.conversation.ConversationService.SearchConversation:input_type -> openim.sdk.conversation.SearchConversationReq
	32, // 27: openim.sdk.conversation.ConversationService.ChangeInputStates:input_type -> openim.sdk.conversation.ChangeInputStatesReq
	34, // 28: openim.sdk.conversation.ConversationService.GetInputStates:input_type -> openim.sdk.conversation.GetInputStatesReq
	1,  // 29: openim.sdk.conversation.ConversationService.GetAllConversationList:output_type -> openim.sdk.conversation.GetAllConversationListResp
	3,  // 30: openim.sdk.conversation.ConversationService.GetConversationListSplit:output_type -> openim.sdk.conversation.GetConversationListSplitResp
	5,  // 31: openim.sdk.conversation.ConversationService.HideConversation:output_type -> openim.sdk.conversation.HideConversationResp
	7,  // 32: openim.sdk.conversation.ConversationService.GetAtAllTag:output_type -> openim.sdk.conversation.GetAtAllTagResp
	9,  // 33: openim.sdk.conversation.ConversationService.GetOneConversation:output_type -> openim.sdk.conversation.GetOneConversationResp
	11, // 34: openim.sdk.conversation.ConversationService.GetMultipleConversation:output_type -> openim.sdk.conversation.GetMultipleConversationResp
	13, // 35: openim.sdk.conversation.ConversationService.HideAllConversations:output_type -> openim.sdk.conversation.HideAllConversationsResp
	15, // 36: openim.sdk.conversation.ConversationService.SetConversationDraft:output_type -> openim.sdk.conversation.SetConversationDraftResp
	17, // 37: openim.sdk.conversation.ConversationService.SetConversation:output_type -> openim.sdk.conversation.SetConversationResp
	19, // 38: openim.sdk.conversation.ConversationService.GetTotalUnreadMsgCount:output_type -> openim.sdk.conversation.GetTotalUnreadMsgCountResp
	21, // 39: openim.sdk.conversation.ConversationService.GetConversationIDBySessionType:output_type -> openim.sdk.conversation.GetConversationIDBySessionTypeResp
	23, // 40: openim.sdk.conversation.ConversationService.MarkConversationMessageAsRead:output_type -> openim.sdk.conversation.MarkConversationMessageAsReadResp
	25, // 41: openim.sdk.conversation.ConversationService.MarkAllConversationMessageAsRead:output_type -> openim.sdk.conversation.MarkAllConversationMessageAsReadResp
	27, // 42: openim.sdk.conversation.ConversationService.ClearConversationAndDeleteAllMsg:output_type -> openim.sdk.conversation.ClearConversationAndDeleteAllMsgResp
	29, // 43: openim.sdk.conversation.ConversationService.DeleteConversationAndDeleteAllMsg:output_type -> openim.sdk.conversation.DeleteConversationAndDeleteAllMsgResp
	31, // 44: openim.sdk.conversation.ConversationService.SearchConversation:output_type -> openim.sdk.conversation.SearchConversationResp
	33, // 45: openim.sdk.conversation.ConversationService.ChangeInputStates:output_type -> openim.sdk.conversation.ChangeInputStatesResp
	35, // 46: openim.sdk.conversation.ConversationService.GetInputStates:output_type -> openim.sdk.conversation.GetInputStatesResp
	29, // [29:47] is the sub-list for method output_type
	11, // [11:29] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_conversation_proto_init() }
func file_conversation_proto_init() {
	if File_conversation_proto != nil {
		return
	}
	file_conversation_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conversation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_conversation_proto_goTypes,
		DependencyIndexes: file_conversation_proto_depIdxs,
		MessageInfos:      file_conversation_proto_msgTypes,
	}.Build()
	File_conversation_proto = out.File
	file_conversation_proto_rawDesc = nil
	file_conversation_proto_goTypes = nil
	file_conversation_proto_depIdxs = nil
}
