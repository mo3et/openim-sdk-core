// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.0
// source: group.proto

package group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Group_CreateGroup_FullMethodName                     = "/openim.sdk.group.group/CreateGroup"
	Group_JoinGroup_FullMethodName                       = "/openim.sdk.group.group/JoinGroup"
	Group_QuitGroup_FullMethodName                       = "/openim.sdk.group.group/QuitGroup"
	Group_DismissGroup_FullMethodName                    = "/openim.sdk.group.group/DismissGroup"
	Group_ChangeGroupMute_FullMethodName                 = "/openim.sdk.group.group/ChangeGroupMute"
	Group_ChangeGroupMemberMute_FullMethodName           = "/openim.sdk.group.group/ChangeGroupMemberMute"
	Group_TransferGroupOwner_FullMethodName              = "/openim.sdk.group.group/TransferGroupOwner"
	Group_KickGroupMember_FullMethodName                 = "/openim.sdk.group.group/KickGroupMember"
	Group_SetGroupInfo_FullMethodName                    = "/openim.sdk.group.group/SetGroupInfo"
	Group_SetGroupMemberInfo_FullMethodName              = "/openim.sdk.group.group/SetGroupMemberInfo"
	Group_GetJoinedGroups_FullMethodName                 = "/openim.sdk.group.group/GetJoinedGroups"
	Group_GetJoinedGroupsPage_FullMethodName             = "/openim.sdk.group.group/GetJoinedGroupsPage"
	Group_GetSpecifiedGroupsInfo_FullMethodName          = "/openim.sdk.group.group/GetSpecifiedGroupsInfo"
	Group_SearchGroups_FullMethodName                    = "/openim.sdk.group.group/SearchGroups"
	Group_GetGroupMemberOwnerAndAdmin_FullMethodName     = "/openim.sdk.group.group/GetGroupMemberOwnerAndAdmin"
	Group_GetGroupMembersByJoinTimeFilter_FullMethodName = "/openim.sdk.group.group/GetGroupMembersByJoinTimeFilter"
	Group_GetSpecifiedGroupMembersInfo_FullMethodName    = "/openim.sdk.group.group/GetSpecifiedGroupMembersInfo"
	Group_GetGroupMembers_FullMethodName                 = "/openim.sdk.group.group/GetGroupMembers"
	Group_GetGroupRequest_FullMethodName                 = "/openim.sdk.group.group/GetGroupRequest"
	Group_SearchGroupMembers_FullMethodName              = "/openim.sdk.group.group/SearchGroupMembers"
	Group_IsJoinGroup_FullMethodName                     = "/openim.sdk.group.group/IsJoinGroup"
	Group_GetUsersInGroup_FullMethodName                 = "/openim.sdk.group.group/GetUsersInGroup"
	Group_InviteUserToGroup_FullMethodName               = "/openim.sdk.group.group/InviteUserToGroup"
	Group_HandlerGroupRequest_FullMethodName             = "/openim.sdk.group.group/HandlerGroupRequest"
)

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClient interface {
	// create a group
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
	// join a group
	JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error)
	// quit a group
	QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error)
	// dismiss a group
	DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*DismissGroupResp, error)
	// mute or cancel mute a group
	ChangeGroupMute(ctx context.Context, in *ChangeGroupMuteReq, opts ...grpc.CallOption) (*ChangeGroupMuteResp, error)
	// mute or cancel mute a group member
	ChangeGroupMemberMute(ctx context.Context, in *ChangeGroupMemberMuteReq, opts ...grpc.CallOption) (*ChangeGroupMemberMuteResp, error)
	// transfer group owner
	TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error)
	// kick a group member
	KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error)
	// set group information
	SetGroupInfo(ctx context.Context, in *SetGroupInfoReq, opts ...grpc.CallOption) (*SetGroupInfoResp, error)
	// set group member information
	SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*SetGroupMemberInfoResp, error)
	// get joined groups
	GetJoinedGroups(ctx context.Context, in *GetJoinedGroupsReq, opts ...grpc.CallOption) (*GetJoinedGroupsResp, error)
	// get joined groups by page
	GetJoinedGroupsPage(ctx context.Context, in *GetJoinedGroupsPageReq, opts ...grpc.CallOption) (*GetJoinedGroupsPageResp, error)
	// get specified groups information
	GetSpecifiedGroupsInfo(ctx context.Context, in *GetSpecifiedGroupsInfoReq, opts ...grpc.CallOption) (*GetSpecifiedGroupsInfoResp, error)
	// search groups
	SearchGroups(ctx context.Context, in *SearchGroupsReq, opts ...grpc.CallOption) (*SearchGroupsResp, error)
	// get group member owner and admin
	GetGroupMemberOwnerAndAdmin(ctx context.Context, in *GetGroupMemberOwnerAndAdminReq, opts ...grpc.CallOption) (*GetGroupMemberOwnerAndAdminResp, error)
	// get group members by join time filter
	GetGroupMembersByJoinTimeFilter(ctx context.Context, in *GetGroupMembersByJoinTimeFilterReq, opts ...grpc.CallOption) (*GetGroupMembersByJoinTimeFilterResp, error)
	// get specified group members information
	GetSpecifiedGroupMembersInfo(ctx context.Context, in *GetSpecifiedGroupMembersInfoReq, opts ...grpc.CallOption) (*GetSpecifiedGroupMembersInfoResp, error)
	// get group members
	GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error)
	// get group request
	GetGroupRequest(ctx context.Context, in *GetGroupRequestReq, opts ...grpc.CallOption) (*GetGroupRequestResp, error)
	// get group request
	SearchGroupMembers(ctx context.Context, in *SearchGroupMembersReq, opts ...grpc.CallOption) (*SearchGroupMembersResp, error)
	// is join group
	IsJoinGroup(ctx context.Context, in *IsJoinGroupReq, opts ...grpc.CallOption) (*IsJoinGroupResp, error)
	// get users in group
	GetUsersInGroup(ctx context.Context, in *GetUsersInGroupReq, opts ...grpc.CallOption) (*GetUsersInGroupResp, error)
	// invite user to group
	InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*InviteUserToGroupResp, error)
	// handler group request
	HandlerGroupRequest(ctx context.Context, in *HandlerGroupRequestReq, opts ...grpc.CallOption) (*HandlerGroupRequestResp, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, Group_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) JoinGroup(ctx context.Context, in *JoinGroupReq, opts ...grpc.CallOption) (*JoinGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGroupResp)
	err := c.cc.Invoke(ctx, Group_JoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) QuitGroup(ctx context.Context, in *QuitGroupReq, opts ...grpc.CallOption) (*QuitGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuitGroupResp)
	err := c.cc.Invoke(ctx, Group_QuitGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DismissGroup(ctx context.Context, in *DismissGroupReq, opts ...grpc.CallOption) (*DismissGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DismissGroupResp)
	err := c.cc.Invoke(ctx, Group_DismissGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ChangeGroupMute(ctx context.Context, in *ChangeGroupMuteReq, opts ...grpc.CallOption) (*ChangeGroupMuteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeGroupMuteResp)
	err := c.cc.Invoke(ctx, Group_ChangeGroupMute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ChangeGroupMemberMute(ctx context.Context, in *ChangeGroupMemberMuteReq, opts ...grpc.CallOption) (*ChangeGroupMemberMuteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeGroupMemberMuteResp)
	err := c.cc.Invoke(ctx, Group_ChangeGroupMemberMute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) TransferGroupOwner(ctx context.Context, in *TransferGroupOwnerReq, opts ...grpc.CallOption) (*TransferGroupOwnerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferGroupOwnerResp)
	err := c.cc.Invoke(ctx, Group_TransferGroupOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) KickGroupMember(ctx context.Context, in *KickGroupMemberReq, opts ...grpc.CallOption) (*KickGroupMemberResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickGroupMemberResp)
	err := c.cc.Invoke(ctx, Group_KickGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupInfo(ctx context.Context, in *SetGroupInfoReq, opts ...grpc.CallOption) (*SetGroupInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGroupInfoResp)
	err := c.cc.Invoke(ctx, Group_SetGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SetGroupMemberInfo(ctx context.Context, in *SetGroupMemberInfoReq, opts ...grpc.CallOption) (*SetGroupMemberInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGroupMemberInfoResp)
	err := c.cc.Invoke(ctx, Group_SetGroupMemberInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetJoinedGroups(ctx context.Context, in *GetJoinedGroupsReq, opts ...grpc.CallOption) (*GetJoinedGroupsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJoinedGroupsResp)
	err := c.cc.Invoke(ctx, Group_GetJoinedGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetJoinedGroupsPage(ctx context.Context, in *GetJoinedGroupsPageReq, opts ...grpc.CallOption) (*GetJoinedGroupsPageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJoinedGroupsPageResp)
	err := c.cc.Invoke(ctx, Group_GetJoinedGroupsPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetSpecifiedGroupsInfo(ctx context.Context, in *GetSpecifiedGroupsInfoReq, opts ...grpc.CallOption) (*GetSpecifiedGroupsInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpecifiedGroupsInfoResp)
	err := c.cc.Invoke(ctx, Group_GetSpecifiedGroupsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SearchGroups(ctx context.Context, in *SearchGroupsReq, opts ...grpc.CallOption) (*SearchGroupsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchGroupsResp)
	err := c.cc.Invoke(ctx, Group_SearchGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMemberOwnerAndAdmin(ctx context.Context, in *GetGroupMemberOwnerAndAdminReq, opts ...grpc.CallOption) (*GetGroupMemberOwnerAndAdminResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupMemberOwnerAndAdminResp)
	err := c.cc.Invoke(ctx, Group_GetGroupMemberOwnerAndAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembersByJoinTimeFilter(ctx context.Context, in *GetGroupMembersByJoinTimeFilterReq, opts ...grpc.CallOption) (*GetGroupMembersByJoinTimeFilterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupMembersByJoinTimeFilterResp)
	err := c.cc.Invoke(ctx, Group_GetGroupMembersByJoinTimeFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetSpecifiedGroupMembersInfo(ctx context.Context, in *GetSpecifiedGroupMembersInfoReq, opts ...grpc.CallOption) (*GetSpecifiedGroupMembersInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpecifiedGroupMembersInfoResp)
	err := c.cc.Invoke(ctx, Group_GetSpecifiedGroupMembersInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupMembersResp)
	err := c.cc.Invoke(ctx, Group_GetGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetGroupRequest(ctx context.Context, in *GetGroupRequestReq, opts ...grpc.CallOption) (*GetGroupRequestResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupRequestResp)
	err := c.cc.Invoke(ctx, Group_GetGroupRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) SearchGroupMembers(ctx context.Context, in *SearchGroupMembersReq, opts ...grpc.CallOption) (*SearchGroupMembersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchGroupMembersResp)
	err := c.cc.Invoke(ctx, Group_SearchGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) IsJoinGroup(ctx context.Context, in *IsJoinGroupReq, opts ...grpc.CallOption) (*IsJoinGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsJoinGroupResp)
	err := c.cc.Invoke(ctx, Group_IsJoinGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) GetUsersInGroup(ctx context.Context, in *GetUsersInGroupReq, opts ...grpc.CallOption) (*GetUsersInGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersInGroupResp)
	err := c.cc.Invoke(ctx, Group_GetUsersInGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) InviteUserToGroup(ctx context.Context, in *InviteUserToGroupReq, opts ...grpc.CallOption) (*InviteUserToGroupResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUserToGroupResp)
	err := c.cc.Invoke(ctx, Group_InviteUserToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) HandlerGroupRequest(ctx context.Context, in *HandlerGroupRequestReq, opts ...grpc.CallOption) (*HandlerGroupRequestResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandlerGroupRequestResp)
	err := c.cc.Invoke(ctx, Group_HandlerGroupRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility.
type GroupServer interface {
	// create a group
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
	// join a group
	JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error)
	// quit a group
	QuitGroup(context.Context, *QuitGroupReq) (*QuitGroupResp, error)
	// dismiss a group
	DismissGroup(context.Context, *DismissGroupReq) (*DismissGroupResp, error)
	// mute or cancel mute a group
	ChangeGroupMute(context.Context, *ChangeGroupMuteReq) (*ChangeGroupMuteResp, error)
	// mute or cancel mute a group member
	ChangeGroupMemberMute(context.Context, *ChangeGroupMemberMuteReq) (*ChangeGroupMemberMuteResp, error)
	// transfer group owner
	TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error)
	// kick a group member
	KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error)
	// set group information
	SetGroupInfo(context.Context, *SetGroupInfoReq) (*SetGroupInfoResp, error)
	// set group member information
	SetGroupMemberInfo(context.Context, *SetGroupMemberInfoReq) (*SetGroupMemberInfoResp, error)
	// get joined groups
	GetJoinedGroups(context.Context, *GetJoinedGroupsReq) (*GetJoinedGroupsResp, error)
	// get joined groups by page
	GetJoinedGroupsPage(context.Context, *GetJoinedGroupsPageReq) (*GetJoinedGroupsPageResp, error)
	// get specified groups information
	GetSpecifiedGroupsInfo(context.Context, *GetSpecifiedGroupsInfoReq) (*GetSpecifiedGroupsInfoResp, error)
	// search groups
	SearchGroups(context.Context, *SearchGroupsReq) (*SearchGroupsResp, error)
	// get group member owner and admin
	GetGroupMemberOwnerAndAdmin(context.Context, *GetGroupMemberOwnerAndAdminReq) (*GetGroupMemberOwnerAndAdminResp, error)
	// get group members by join time filter
	GetGroupMembersByJoinTimeFilter(context.Context, *GetGroupMembersByJoinTimeFilterReq) (*GetGroupMembersByJoinTimeFilterResp, error)
	// get specified group members information
	GetSpecifiedGroupMembersInfo(context.Context, *GetSpecifiedGroupMembersInfoReq) (*GetSpecifiedGroupMembersInfoResp, error)
	// get group members
	GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error)
	// get group request
	GetGroupRequest(context.Context, *GetGroupRequestReq) (*GetGroupRequestResp, error)
	// get group request
	SearchGroupMembers(context.Context, *SearchGroupMembersReq) (*SearchGroupMembersResp, error)
	// is join group
	IsJoinGroup(context.Context, *IsJoinGroupReq) (*IsJoinGroupResp, error)
	// get users in group
	GetUsersInGroup(context.Context, *GetUsersInGroupReq) (*GetUsersInGroupResp, error)
	// invite user to group
	InviteUserToGroup(context.Context, *InviteUserToGroupReq) (*InviteUserToGroupResp, error)
	// handler group request
	HandlerGroupRequest(context.Context, *HandlerGroupRequestReq) (*HandlerGroupRequestResp, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupServer struct{}

func (UnimplementedGroupServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupServer) JoinGroup(context.Context, *JoinGroupReq) (*JoinGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedGroupServer) QuitGroup(context.Context, *QuitGroupReq) (*QuitGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroup not implemented")
}
func (UnimplementedGroupServer) DismissGroup(context.Context, *DismissGroupReq) (*DismissGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissGroup not implemented")
}
func (UnimplementedGroupServer) ChangeGroupMute(context.Context, *ChangeGroupMuteReq) (*ChangeGroupMuteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupMute not implemented")
}
func (UnimplementedGroupServer) ChangeGroupMemberMute(context.Context, *ChangeGroupMemberMuteReq) (*ChangeGroupMemberMuteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupMemberMute not implemented")
}
func (UnimplementedGroupServer) TransferGroupOwner(context.Context, *TransferGroupOwnerReq) (*TransferGroupOwnerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferGroupOwner not implemented")
}
func (UnimplementedGroupServer) KickGroupMember(context.Context, *KickGroupMemberReq) (*KickGroupMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickGroupMember not implemented")
}
func (UnimplementedGroupServer) SetGroupInfo(context.Context, *SetGroupInfoReq) (*SetGroupInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupInfo not implemented")
}
func (UnimplementedGroupServer) SetGroupMemberInfo(context.Context, *SetGroupMemberInfoReq) (*SetGroupMemberInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupMemberInfo not implemented")
}
func (UnimplementedGroupServer) GetJoinedGroups(context.Context, *GetJoinedGroupsReq) (*GetJoinedGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedGroups not implemented")
}
func (UnimplementedGroupServer) GetJoinedGroupsPage(context.Context, *GetJoinedGroupsPageReq) (*GetJoinedGroupsPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinedGroupsPage not implemented")
}
func (UnimplementedGroupServer) GetSpecifiedGroupsInfo(context.Context, *GetSpecifiedGroupsInfoReq) (*GetSpecifiedGroupsInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedGroupsInfo not implemented")
}
func (UnimplementedGroupServer) SearchGroups(context.Context, *SearchGroupsReq) (*SearchGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroups not implemented")
}
func (UnimplementedGroupServer) GetGroupMemberOwnerAndAdmin(context.Context, *GetGroupMemberOwnerAndAdminReq) (*GetGroupMemberOwnerAndAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberOwnerAndAdmin not implemented")
}
func (UnimplementedGroupServer) GetGroupMembersByJoinTimeFilter(context.Context, *GetGroupMembersByJoinTimeFilterReq) (*GetGroupMembersByJoinTimeFilterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembersByJoinTimeFilter not implemented")
}
func (UnimplementedGroupServer) GetSpecifiedGroupMembersInfo(context.Context, *GetSpecifiedGroupMembersInfoReq) (*GetSpecifiedGroupMembersInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedGroupMembersInfo not implemented")
}
func (UnimplementedGroupServer) GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembers not implemented")
}
func (UnimplementedGroupServer) GetGroupRequest(context.Context, *GetGroupRequestReq) (*GetGroupRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupRequest not implemented")
}
func (UnimplementedGroupServer) SearchGroupMembers(context.Context, *SearchGroupMembersReq) (*SearchGroupMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroupMembers not implemented")
}
func (UnimplementedGroupServer) IsJoinGroup(context.Context, *IsJoinGroupReq) (*IsJoinGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsJoinGroup not implemented")
}
func (UnimplementedGroupServer) GetUsersInGroup(context.Context, *GetUsersInGroupReq) (*GetUsersInGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersInGroup not implemented")
}
func (UnimplementedGroupServer) InviteUserToGroup(context.Context, *InviteUserToGroupReq) (*InviteUserToGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUserToGroup not implemented")
}
func (UnimplementedGroupServer) HandlerGroupRequest(context.Context, *HandlerGroupRequestReq) (*HandlerGroupRequestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerGroupRequest not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}
func (UnimplementedGroupServer) testEmbeddedByValue()               {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	// If the following call pancis, it indicates UnimplementedGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_JoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).JoinGroup(ctx, req.(*JoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_QuitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).QuitGroup(ctx, req.(*QuitGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DismissGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DismissGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DismissGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_DismissGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DismissGroup(ctx, req.(*DismissGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ChangeGroupMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupMuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ChangeGroupMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_ChangeGroupMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ChangeGroupMute(ctx, req.(*ChangeGroupMuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ChangeGroupMemberMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeGroupMemberMuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ChangeGroupMemberMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_ChangeGroupMemberMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ChangeGroupMemberMute(ctx, req.(*ChangeGroupMemberMuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_TransferGroupOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferGroupOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).TransferGroupOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_TransferGroupOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).TransferGroupOwner(ctx, req.(*TransferGroupOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_KickGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).KickGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_KickGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).KickGroupMember(ctx, req.(*KickGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupInfo(ctx, req.(*SetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SetGroupMemberInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupMemberInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SetGroupMemberInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SetGroupMemberInfo(ctx, req.(*SetGroupMemberInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetJoinedGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetJoinedGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetJoinedGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetJoinedGroups(ctx, req.(*GetJoinedGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetJoinedGroupsPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinedGroupsPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetJoinedGroupsPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetJoinedGroupsPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetJoinedGroupsPage(ctx, req.(*GetJoinedGroupsPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetSpecifiedGroupsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedGroupsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetSpecifiedGroupsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetSpecifiedGroupsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetSpecifiedGroupsInfo(ctx, req.(*GetSpecifiedGroupsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SearchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SearchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SearchGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SearchGroups(ctx, req.(*SearchGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMemberOwnerAndAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberOwnerAndAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMemberOwnerAndAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupMemberOwnerAndAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMemberOwnerAndAdmin(ctx, req.(*GetGroupMemberOwnerAndAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembersByJoinTimeFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersByJoinTimeFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembersByJoinTimeFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupMembersByJoinTimeFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembersByJoinTimeFilter(ctx, req.(*GetGroupMembersByJoinTimeFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetSpecifiedGroupMembersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedGroupMembersInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetSpecifiedGroupMembersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetSpecifiedGroupMembersInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetSpecifiedGroupMembersInfo(ctx, req.(*GetSpecifiedGroupMembersInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupMembers(ctx, req.(*GetGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetGroupRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetGroupRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetGroupRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetGroupRequest(ctx, req.(*GetGroupRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_SearchGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).SearchGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_SearchGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).SearchGroupMembers(ctx, req.(*SearchGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_IsJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsJoinGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).IsJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_IsJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).IsJoinGroup(ctx, req.(*IsJoinGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_GetUsersInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersInGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).GetUsersInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_GetUsersInGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).GetUsersInGroup(ctx, req.(*GetUsersInGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_InviteUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).InviteUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_InviteUserToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).InviteUserToGroup(ctx, req.(*InviteUserToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_HandlerGroupRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerGroupRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).HandlerGroupRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_HandlerGroupRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).HandlerGroupRequest(ctx, req.(*HandlerGroupRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openim.sdk.group.group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Group_CreateGroup_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Group_JoinGroup_Handler,
		},
		{
			MethodName: "QuitGroup",
			Handler:    _Group_QuitGroup_Handler,
		},
		{
			MethodName: "DismissGroup",
			Handler:    _Group_DismissGroup_Handler,
		},
		{
			MethodName: "ChangeGroupMute",
			Handler:    _Group_ChangeGroupMute_Handler,
		},
		{
			MethodName: "ChangeGroupMemberMute",
			Handler:    _Group_ChangeGroupMemberMute_Handler,
		},
		{
			MethodName: "TransferGroupOwner",
			Handler:    _Group_TransferGroupOwner_Handler,
		},
		{
			MethodName: "KickGroupMember",
			Handler:    _Group_KickGroupMember_Handler,
		},
		{
			MethodName: "SetGroupInfo",
			Handler:    _Group_SetGroupInfo_Handler,
		},
		{
			MethodName: "SetGroupMemberInfo",
			Handler:    _Group_SetGroupMemberInfo_Handler,
		},
		{
			MethodName: "GetJoinedGroups",
			Handler:    _Group_GetJoinedGroups_Handler,
		},
		{
			MethodName: "GetJoinedGroupsPage",
			Handler:    _Group_GetJoinedGroupsPage_Handler,
		},
		{
			MethodName: "GetSpecifiedGroupsInfo",
			Handler:    _Group_GetSpecifiedGroupsInfo_Handler,
		},
		{
			MethodName: "SearchGroups",
			Handler:    _Group_SearchGroups_Handler,
		},
		{
			MethodName: "GetGroupMemberOwnerAndAdmin",
			Handler:    _Group_GetGroupMemberOwnerAndAdmin_Handler,
		},
		{
			MethodName: "GetGroupMembersByJoinTimeFilter",
			Handler:    _Group_GetGroupMembersByJoinTimeFilter_Handler,
		},
		{
			MethodName: "GetSpecifiedGroupMembersInfo",
			Handler:    _Group_GetSpecifiedGroupMembersInfo_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _Group_GetGroupMembers_Handler,
		},
		{
			MethodName: "GetGroupRequest",
			Handler:    _Group_GetGroupRequest_Handler,
		},
		{
			MethodName: "SearchGroupMembers",
			Handler:    _Group_SearchGroupMembers_Handler,
		},
		{
			MethodName: "IsJoinGroup",
			Handler:    _Group_IsJoinGroup_Handler,
		},
		{
			MethodName: "GetUsersInGroup",
			Handler:    _Group_GetUsersInGroup_Handler,
		},
		{
			MethodName: "InviteUserToGroup",
			Handler:    _Group_InviteUserToGroup_Handler,
		},
		{
			MethodName: "HandlerGroupRequest",
			Handler:    _Group_HandlerGroupRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
