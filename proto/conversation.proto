syntax = "proto3";
package openim.sdk.conversation;

import "common.proto";
import "shared.proto";

option csharp_namespace = "OpenIM.Proto";
option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/conversation";
option swift_prefix = "";

message ConversationArgs {
  // @conversation_id
  string conversationID = 1;
  // message client msg unique id list
  repeated string clientMsgIDList = 2;
}

message FindMessageListCallback {
  // total count
  int32 totalCount = 1;
  // @conversation_Search_by_conversation_results
  repeated SearchByConversationResult findResultItems = 2;
}

message SearchByConversationResult {
  // @conversation_id
  string conversationID = 1;
  // @conversation_type
  int32 conversationType = 2;
  //
  string showName = 3;
  string faceURL = 4;
  int64 latestMsgSendTime = 5;
  // message count
  int32 messageCount = 6;
  // @shared_immessages
  repeated shared.IMMessage messageList = 7;
}

// -----------------------------------------------------------------------------------------------------------------
message GetAllConversationListReq {}
message GetAllConversationListResp {
  // @shared_imconversations
  repeated shared.IMConversation conversationList = 1;
}

message GetConversationListSplitReq {
  // @common_request_pagination
  common.RequestPagination pagination = 1;
}
message GetConversationListSplitResp {
  // @shared_imconversations
  repeated shared.IMConversation conversationList = 1;
}

message HideConversationReq {
  // @conversation_id
  string conversationID = 1;
}
message HideConversationResp {}

message GetAtAllTagReq {}
message GetAtAllTagResp {
  // at tag
  string tag = 1;
}

message GetOneConversationReq {
  // @message_session_type
  common.SessionType sessionType = 1;
  string sourceID = 2;
}
message GetOneConversationResp {
  // @shared_imconversation
  shared.IMConversation conversation = 1;
}

message GetMultipleConversationReq {
  // @shared_imconversations
  repeated string conversationIDList = 1;
}
message GetMultipleConversationResp {
  // @shared_imconversations
  repeated shared.IMConversation conversationList = 1;
}

message HideAllConversationsReq {}
message HideAllConversationsResp {}

message SetConversationDraftReq {
  // @conversation_id
  string conversationID = 1;
  // @conversation_draft_text
  string draftText = 2;
}
message SetConversationDraftResp {}

message SetConversationReq {
  // @conversation_id
  string conversationID = 1;
  // @opt @conversation_recv_msg_opt
  optional common.ConvRecvMsgOpt recvMsgOpt = 2;
  // @opt @conversation_group_at_type
  optional common.ConvGroupAtType groupAtType = 3;
  // @opt @conversation_is_pinned
  optional bool isPinned = 4;
  // @opt @conversation_is_private
  optional bool isPrivateChat = 5;
  // @opt @conversation_burn_duration
  optional int32 burnDuration = 6;
  // @opt @conversation_ex
  optional string ex = 7;
}
message SetConversationResp {}

message GetTotalUnreadMsgCountReq {}
message GetTotalUnreadMsgCountResp {
  // @conversation_total_unread_count
  int32 totalUnreadCount = 1;
}

message GetConversationIDBySessionTypeReq {
  // session source id
  string sourceID = 1;
  // @conversation_session_type
  common.SessionType sessionType = 2;
}
message GetConversationIDBySessionTypeResp {
  // @conversation_id
  string conversationID = 1;
}

message FindMessageListReq {
  // conversation args
  repeated ConversationArgs conversationsArgs = 1;
}
message FindMessageListResp {
  // @conversation_Search_by_conversation_results
  repeated SearchByConversationResult findResultItems = 1;
  // total count
  int32 totalCount = 2;
}

message MarkConversationMessageAsReadReq {
  // @conversation_id
  string conversationID = 1;
}
message MarkConversationMessageAsReadResp {}

message MarkAllConversationMessageAsReadReq {}
message MarkAllConversationMessageAsReadResp {}

message ClearConversationAndDeleteAllMsgReq {
  // @conversation_id
  string conversationID = 1;
}
message ClearConversationAndDeleteAllMsgResp {}

message DeleteConversationAndDeleteAllMsgReq {
  // @conversation_id
  string conversationID = 1;
}
message DeleteConversationAndDeleteAllMsgResp {}

enum KeywordListMatchType {
  // Keyword match OR
  KeywordMatchOr = 0;
  // Keyword match AND
  KeywordMatchAnd = 1;
}

message SearchConversationReq {
  // search param
  string searchParam = 1;
}
message SearchConversationResp {
  // @shared_imconversations
  repeated shared.IMConversation conversationList = 1;
}

message ChangeInputStatesReq {
  // @conversation_id
  string conversationID = 1;
  // is focus
  bool focus = 3;
}
message ChangeInputStatesResp {}

message GetInputStatesReq {
  // @conversation_id
  string conversationID = 1;
  // @user_id
  string userID = 2;
}
message GetInputStatesResp {
  // @common_platforms
  repeated common.Platform platforms = 1;
}

service ConversationService {
  /**
   * Get all conversation list.
   * Notice:
   * If have lots of conversation, use `GetConversationListSplit` to get page.
   */
  rpc GetAllConversationList(GetAllConversationListReq) returns (GetAllConversationListResp);
  /**
   * Get conversation list by page.
   */
  rpc GetConversationListSplit(GetConversationListSplitReq) returns (GetConversationListSplitResp);
  /**
   * Hide a local conversation. It will not delete the message in conversation.
   * The conversation will redisplay when a new message is received.
   */
  rpc HideConversation(HideConversationReq) returns (HideConversationResp);
  /**
   * Get at all tag.
   */
  rpc GetAtAllTag(GetAtAllTagReq) returns (GetAtAllTagResp);
  /**
   * Get specified conversation info.
   * Usually get conversation by friend info or group info, and enter the chat interface will call it.
   */
  rpc GetOneConversation(GetOneConversationReq) returns (GetOneConversationResp);
  /**
   * Get specified conversation info list by specified conversation IDs.
   */
  rpc GetMultipleConversation(GetMultipleConversationReq) returns (GetMultipleConversationResp);
  /**
   * Hide all local conversations. It will not delete the message in conversation.
   * The conversation will redisplay when a new message is received.
   */
  rpc HideAllConversations(HideAllConversationsReq) returns (HideAllConversationsResp);
  /**
   * Set conversation draft.
   * Notice:
   * Set empty draft text will clear the draft.
   * Related callbacks:
   * `onConversationChanged`
   */
  rpc SetConversationDraft(SetConversationDraftReq) returns (SetConversationDraftResp);
  /**
   * Set conversation info, including isPinned, recvMsgOpt, ex fields.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   */
  rpc SetConversation(SetConversationReq) returns (SetConversationResp);
  /**
   * Get all conversation unread message count.
   */
  rpc GetTotalUnreadMsgCount(GetTotalUnreadMsgCountReq) returns (GetTotalUnreadMsgCountResp);
  /**
   * Get conversation ID by session type.
   */
  rpc GetConversationIDBySessionType(GetConversationIDBySessionTypeReq) returns (GetConversationIDBySessionTypeResp);
  /**
   * Find message list by conversation args.
   */
  rpc FindMessageList(FindMessageListReq) returns (FindMessageListResp);
  /**
   * Mark conversation message as read.
   * 1. conversation type is single, use to clear unread count and send isReaded receipt.
   * Other user send message isRead status will be updated when call it interface.
   * 2. conversation type is group or notification, the interface only use clear unread.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   * `onRecvC2CReadReceipt`
   */
  rpc MarkConversationMessageAsRead(MarkConversationMessageAsReadReq) returns (MarkConversationMessageAsReadResp);
  /**
   * Mark all conversation message as read.
   * 1. conversation type is single, use to clear unread count and send isReaded receipt.
   * Other user send message isRead status will be updated when call it interface.
   * 2. conversation type is group or notification, the interface only use clear unread.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   * `onRecvC2CReadReceipt`
   */
  rpc MarkAllConversationMessageAsRead(MarkAllConversationMessageAsReadReq) returns (MarkAllConversationMessageAsReadResp);
  /**
   * Delete specified conversation messages in local and server. The conversation will still be retained.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   */
  rpc ClearConversationAndDeleteAllMsg(ClearConversationAndDeleteAllMsgReq) returns (ClearConversationAndDeleteAllMsgResp);
  /**
   * Delete specified conversation messages in local and server.
   */
  rpc DeleteConversationAndDeleteAllMsg(DeleteConversationAndDeleteAllMsgReq) returns (DeleteConversationAndDeleteAllMsgResp);
  /**
   * Search conversation by search param.
   */
  rpc SearchConversation(SearchConversationReq) returns (SearchConversationResp);
  /**
   * Change input states.
   * Notice:
   * When input end, set focus to false.
   */
  rpc ChangeInputStates(ChangeInputStatesReq) returns (ChangeInputStatesResp);
  /**
   * Get user current input states.
   */
  rpc GetInputStates(GetInputStatesReq) returns (GetInputStatesResp);
}
