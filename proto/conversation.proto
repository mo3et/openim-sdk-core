syntax = "proto3";
package openim.sdk.conversation;

import "common.proto";
import "shared.proto";

option csharp_namespace = "OpenIM.Proto";
option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/conversation";
option swift_prefix = "";

message ConversationArgs {
  // @conversation_id
  string conversationID = 1;
  // message client msg unique id list
  repeated string clientMsgIDList = 2;
}

message FindMessageListCallback {
  // total count
  int32 totalCount = 1;
  repeated SearchByConversationResult findResultItems = 2;
}

message SearchByConversationResult {
  string conversationID = 1;
  int32 conversationType = 2;
  string showName = 3;
  string faceURL = 4;
  int64 latestMsgSendTime = 5;
  // message count
  int32 messageCount = 6;
  // @shared_immessages
  repeated shared.IMMessage messageList = 7;
}

// -----------------------------------------------------------------------------------------------------------------
message GetAllConversationListReq {}
message GetAllConversationListResp {
  // @shared_imconversations
  repeated shared.IMConversation conversationList = 1;
}

message GetConversationListSplitReq {
  // @common_request_pagination
  common.RequestPagination pagination = 1;
}
message GetConversationListSplitResp {
  // @shared_imconversations
  repeated shared.IMConversation conversationList = 1;
}

message HideConversationReq {
  // @conversation_id
  string conversationID = 1;
}
message HideConversationResp {}

message GetAtAllTagReq {}
message GetAtAllTagResp {
  // at tag
  string tag = 1;
}

message GetOneConversationReq {
  // @message_session_type
  common.SessionType sessionType = 1;
  string sourceID = 2;
}
message GetOneConversationResp {
  shared.IMConversation conversation = 1;
}

message GetMultipleConversationReq {
  repeated string conversationIDList = 1;
}
message GetMultipleConversationResp {
  repeated shared.IMConversation conversationList = 1;
}

message HideAllConversationsReq {}
message HideAllConversationsResp {}

message SetConversationDraftReq {
  string conversationID = 1;
  string draftText = 2;
}
message SetConversationDraftResp {}

message SetConversationReq {
  string conversationID = 1;
  optional common.ConvRecvMsgOpt recvMsgOpt = 2;
  optional common.ConvGroupAtType groupAtType = 3;
  optional bool isPinned = 4;
  optional bool isPrivateChat = 5;
  optional int32 burnDuration = 6;
  optional string ex = 7;
}
message SetConversationResp {}

message GetTotalUnreadMsgCountReq {}
message GetTotalUnreadMsgCountResp {
  int32 totalUnreadCount = 1;
}

message GetConversationIDBySessionTypeReq {
  string sourceID = 1;
  common.SessionType sessionType = 2;
}
message GetConversationIDBySessionTypeResp {
  string conversationID = 1;
}

message FindMessageListReq {
  repeated ConversationArgs conversationsArgs = 1;
}
message FindMessageListResp {
  repeated SearchByConversationResult findResultItems = 1;
  int32 totalCount = 2;
}

message MarkConversationMessageAsReadReq {
  string conversationID = 1;
}
message MarkConversationMessageAsReadResp {}

message MarkAllConversationMessageAsReadReq {}
message MarkAllConversationMessageAsReadResp {}

message DeleteMessageFromLocalReq {
  string conversationID = 1;
  string clientMsgID = 2;
}
message DeleteMessageFromLocalResp {}

message ClearConversationAndDeleteAllMsgReq {
  string conversationID = 1;
}
message ClearConversationAndDeleteAllMsgResp {}

message DeleteConversationAndDeleteAllMsgReq {
  string conversationID = 1;
}
message DeleteConversationAndDeleteAllMsgResp {}

enum KeywordListMatchType {
  KeywordMatchOr = 0;
  KeywordMatchAnd = 1;
}

message SearchLocalMessagesReq {
  string conversationID = 1;
  repeated string keywords = 2;
  KeywordListMatchType keywordMatchType = 3;
  repeated string senderUserIDs = 4;
  repeated common.ContentType messageTypes = 5;
  int64 searchTimePosition = 6;
  int64 searchTimePeriod = 7;
  common.RequestPagination pagination = 8;
}
message SearchLocalMessagesResp {
  int64 count = 1;
  repeated SearchByConversationResult searchResultItems = 2;
}

message SetMessageLocalExReq {
  string conversationID = 1;
  string clientMsgID = 2;
  string localEx = 3;
}
message SetMessageLocalExResp {
  bool success = 1;
}

message SearchConversationReq {
  string searchParam = 1;
}
message SearchConversationResp {
  repeated shared.IMConversation conversationList = 1;
}

message UserOnlinePlatform {
  // @user_id
  string userID = 1;
  repeated common.Platform platforms = 2;
}

message SubscribeUsersOnlineStatusReq {
  repeated string userIDs = 1;
}

message SubscribeUsersOnlineStatusResp {
  repeated UserOnlinePlatform status = 1;
}

message UnsubscribeUsersOnlineStatusReq {
  repeated string userIDs = 1;
}

message UnsubscribeUsersOnlineStatusResp {}

message ChangeInputStatesReq {
  string conversationID = 1;
  bool focus = 3;
}
message ChangeInputStatesResp {}

message GetInputStatesReq {
  string conversationID = 1;
  string userID = 2;
}
message GetInputStatesResp {
  repeated common.Platform platforms = 1;
}

/**
 *
 *
 */

service ConversationService {
  /**
   *
   *
   */
  rpc GetAllConversationList(GetAllConversationListReq) returns (GetAllConversationListResp);
  /**
   *
   *
   */
  rpc GetConversationListSplit(GetConversationListSplitReq) returns (GetConversationListSplitResp);
  /**
   *
   *
   */
  rpc HideConversation(HideConversationReq) returns (HideConversationResp);
  /**
   *
   *
   */
  rpc GetAtAllTag(GetAtAllTagReq) returns (GetAtAllTagResp);
  /**
   *
   *
   */
  rpc GetOneConversation(GetOneConversationReq) returns (GetOneConversationResp);
  /**
   *
   *
   */
  rpc GetMultipleConversation(GetMultipleConversationReq) returns (GetMultipleConversationResp);
  /**
   *
   *
   */
  rpc HideAllConversations(HideAllConversationsReq) returns (HideAllConversationsResp);
  /**
   *
   *
   */
  rpc SetConversationDraft(SetConversationDraftReq) returns (SetConversationDraftResp);
  /**
   *
   *
   */
  rpc SetConversation(SetConversationReq) returns (SetConversationResp);
  /**
   *
   *
   */
  rpc GetTotalUnreadMsgCount(GetTotalUnreadMsgCountReq) returns (GetTotalUnreadMsgCountResp);
  /**
   *
   *
   */
  rpc GetConversationIDBySessionType(GetConversationIDBySessionTypeReq) returns (GetConversationIDBySessionTypeResp);
  /**
   *
   *
   */
  rpc FindMessageList(FindMessageListReq) returns (FindMessageListResp);

  /**
   *
   *
   */
  rpc MarkConversationMessageAsRead(MarkConversationMessageAsReadReq) returns (MarkConversationMessageAsReadResp);

  /**
   *
   *
   */
  rpc MarkAllConversationMessageAsRead(MarkAllConversationMessageAsReadReq) returns (MarkAllConversationMessageAsReadResp);
  /**
   *
   *
   */
  //  TODO need move to message?
  rpc DeleteMessageFromLocal(DeleteMessageFromLocalReq) returns (DeleteMessageFromLocalResp);
  /**
   *
   *
   */

  rpc ClearConversationAndDeleteAllMsg(ClearConversationAndDeleteAllMsgReq) returns (ClearConversationAndDeleteAllMsgResp);
  /**
   *
   *
   */
  rpc DeleteConversationAndDeleteAllMsg(DeleteConversationAndDeleteAllMsgReq) returns (DeleteConversationAndDeleteAllMsgResp);
  /**
   *
   *
   */
  rpc SearchLocalMessages(SearchLocalMessagesReq) returns (SearchLocalMessagesResp);
  /**
   *
   *
   */
  rpc SetMessageLocalEx(SetMessageLocalExReq) returns (SetMessageLocalExResp);
  /**
   *
   *
   */
  rpc SearchConversation(SearchConversationReq) returns (SearchConversationResp);
  /**
   *
   *
   */
  rpc SubscribeUsersOnlineStatus(SubscribeUsersOnlineStatusReq) returns (SubscribeUsersOnlineStatusResp);
  /**
   *
   *
   */
  rpc UnsubscribeUsersOnlineStatus(UnsubscribeUsersOnlineStatusReq) returns (UnsubscribeUsersOnlineStatusResp);
  /**
   *
   *
   */
  rpc ChangeInputStates(ChangeInputStatesReq) returns (ChangeInputStatesResp);
  /**
   *
   *
   */
  rpc GetInputStates(GetInputStatesReq) returns (GetInputStatesResp);
}
