// source: shared.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.openim.sdk.shared.BlackInfo', null, global);
goog.exportSymbol('proto.openim.sdk.shared.Conversation', null, global);
goog.exportSymbol('proto.openim.sdk.shared.FriendInfo', null, global);
goog.exportSymbol('proto.openim.sdk.shared.FriendRequestInfo', null, global);
goog.exportSymbol('proto.openim.sdk.shared.GroupFilter', null, global);
goog.exportSymbol('proto.openim.sdk.shared.GroupInfo', null, global);
goog.exportSymbol('proto.openim.sdk.shared.GroupMemberInfo', null, global);
goog.exportSymbol('proto.openim.sdk.shared.GroupRequestInfo', null, global);
goog.exportSymbol('proto.openim.sdk.shared.GroupStatus', null, global);
goog.exportSymbol('proto.openim.sdk.shared.UserInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.UserInfo.displayName = 'proto.openim.sdk.shared.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.FriendInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.FriendInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.FriendInfo.displayName = 'proto.openim.sdk.shared.FriendInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.BlackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.BlackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.BlackInfo.displayName = 'proto.openim.sdk.shared.BlackInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.FriendRequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.FriendRequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.FriendRequestInfo.displayName = 'proto.openim.sdk.shared.FriendRequestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.GroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.GroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.GroupInfo.displayName = 'proto.openim.sdk.shared.GroupInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.GroupMemberInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.GroupMemberInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.GroupMemberInfo.displayName = 'proto.openim.sdk.shared.GroupMemberInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.GroupRequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.GroupRequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.GroupRequestInfo.displayName = 'proto.openim.sdk.shared.GroupRequestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.shared.Conversation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.shared.Conversation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.shared.Conversation.displayName = 'proto.openim.sdk.shared.Conversation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 2, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
ex: jspb.Message.getFieldWithDefault(msg, 4, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 5, 0),
appmangerlevel: jspb.Message.getFieldWithDefault(msg, 6, 0),
globalrecvmsgopt: jspb.Message.getFieldWithDefault(msg, 7, 0),
attached: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.UserInfo}
 */
proto.openim.sdk.shared.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.UserInfo;
  return proto.openim.sdk.shared.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.UserInfo}
 */
proto.openim.sdk.shared.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppmangerlevel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGlobalrecvmsgopt(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getAppmangerlevel();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getGlobalrecvmsgopt();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAttached();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.UserInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nickname = 2;
 * @return {string}
 */
proto.openim.sdk.shared.UserInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string faceURL = 3;
 * @return {string}
 */
proto.openim.sdk.shared.UserInfo.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ex = 4;
 * @return {string}
 */
proto.openim.sdk.shared.UserInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 createTime = 5;
 * @return {number}
 */
proto.openim.sdk.shared.UserInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 appMangerLevel = 6;
 * @return {number}
 */
proto.openim.sdk.shared.UserInfo.prototype.getAppmangerlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setAppmangerlevel = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 globalRecvMsgOpt = 7;
 * @return {number}
 */
proto.openim.sdk.shared.UserInfo.prototype.getGlobalrecvmsgopt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setGlobalrecvmsgopt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string attached = 8;
 * @return {string}
 */
proto.openim.sdk.shared.UserInfo.prototype.getAttached = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.UserInfo} returns this
 */
proto.openim.sdk.shared.UserInfo.prototype.setAttached = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.FriendInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.FriendInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.FriendInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.FriendInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
owneruserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
frienduserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
remark: jspb.Message.getFieldWithDefault(msg, 3, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
addsource: jspb.Message.getFieldWithDefault(msg, 5, 0),
operatoruserid: jspb.Message.getFieldWithDefault(msg, 6, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 7, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 8, ""),
ex: jspb.Message.getFieldWithDefault(msg, 9, ""),
attachedinfo: jspb.Message.getFieldWithDefault(msg, 10, ""),
ispinned: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.FriendInfo}
 */
proto.openim.sdk.shared.FriendInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.FriendInfo;
  return proto.openim.sdk.shared.FriendInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.FriendInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.FriendInfo}
 */
proto.openim.sdk.shared.FriendInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneruserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrienduserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemark(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddsource(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatoruserid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttachedinfo(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspinned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.FriendInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.FriendInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.FriendInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.FriendInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwneruserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrienduserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemark();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAddsource();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getOperatoruserid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAttachedinfo();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIspinned();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string ownerUserID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getOwneruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setOwneruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string friendUserID = 2;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getFrienduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setFrienduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string remark = 3;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getRemark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setRemark = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 createTime = 4;
 * @return {number}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 addSource = 5;
 * @return {number}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getAddsource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setAddsource = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string operatorUserID = 6;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getOperatoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setOperatoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string nickname = 7;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string faceURL = 8;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string ex = 9;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string attachedInfo = 10;
 * @return {string}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getAttachedinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setAttachedinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool isPinned = 11;
 * @return {boolean}
 */
proto.openim.sdk.shared.FriendInfo.prototype.getIspinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.shared.FriendInfo} returns this
 */
proto.openim.sdk.shared.FriendInfo.prototype.setIspinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.BlackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.BlackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.BlackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.BlackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
owneruserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
blockuserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 5, 0),
addsource: jspb.Message.getFieldWithDefault(msg, 6, 0),
operatoruserid: jspb.Message.getFieldWithDefault(msg, 7, ""),
ex: jspb.Message.getFieldWithDefault(msg, 8, ""),
attached: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.BlackInfo}
 */
proto.openim.sdk.shared.BlackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.BlackInfo;
  return proto.openim.sdk.shared.BlackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.BlackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.BlackInfo}
 */
proto.openim.sdk.shared.BlackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneruserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockuserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddsource(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatoruserid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.BlackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.BlackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.BlackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.BlackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwneruserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockuserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getAddsource();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOperatoruserid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAttached();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string ownerUserID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getOwneruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setOwneruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockUserID = 2;
 * @return {string}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getBlockuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setBlockuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string faceURL = 4;
 * @return {string}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 createTime = 5;
 * @return {number}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 addSource = 6;
 * @return {number}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getAddsource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setAddsource = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string operatorUserID = 7;
 * @return {string}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getOperatoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setOperatoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ex = 8;
 * @return {string}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string attached = 9;
 * @return {string}
 */
proto.openim.sdk.shared.BlackInfo.prototype.getAttached = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.BlackInfo} returns this
 */
proto.openim.sdk.shared.BlackInfo.prototype.setAttached = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.FriendRequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.FriendRequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.FriendRequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
fromuserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
fromnickname: jspb.Message.getFieldWithDefault(msg, 2, ""),
fromfaceurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
touserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
tonickname: jspb.Message.getFieldWithDefault(msg, 5, ""),
tofaceurl: jspb.Message.getFieldWithDefault(msg, 6, ""),
handleresult: jspb.Message.getFieldWithDefault(msg, 7, 0),
reqmsg: jspb.Message.getFieldWithDefault(msg, 8, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
handleruserid: jspb.Message.getFieldWithDefault(msg, 10, ""),
handlemsg: jspb.Message.getFieldWithDefault(msg, 11, ""),
handletime: jspb.Message.getFieldWithDefault(msg, 12, 0),
ex: jspb.Message.getFieldWithDefault(msg, 13, ""),
attached: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.FriendRequestInfo}
 */
proto.openim.sdk.shared.FriendRequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.FriendRequestInfo;
  return proto.openim.sdk.shared.FriendRequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.FriendRequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.FriendRequestInfo}
 */
proto.openim.sdk.shared.FriendRequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromuserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromnickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromfaceurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTouserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTonickname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTofaceurl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHandleresult(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqmsg(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandleruserid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandlemsg(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandletime(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.FriendRequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.FriendRequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.FriendRequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromuserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromnickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromfaceurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTouserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTonickname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTofaceurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHandleresult();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getReqmsg();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getHandleruserid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getHandlemsg();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getHandletime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAttached();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string fromUserID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getFromuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setFromuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fromNickname = 2;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getFromnickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setFromnickname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fromFaceURL = 3;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getFromfaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setFromfaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string toUserID = 4;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getTouserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setTouserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string toNickname = 5;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getTonickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setTonickname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string toFaceURL = 6;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getTofaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setTofaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 handleResult = 7;
 * @return {number}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getHandleresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setHandleresult = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string reqMsg = 8;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getReqmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setReqmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 createTime = 9;
 * @return {number}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string handlerUserID = 10;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getHandleruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setHandleruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string handleMsg = 11;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getHandlemsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setHandlemsg = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 handleTime = 12;
 * @return {number}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getHandletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setHandletime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string ex = 13;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string attached = 14;
 * @return {string}
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.getAttached = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.FriendRequestInfo} returns this
 */
proto.openim.sdk.shared.FriendRequestInfo.prototype.setAttached = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.GroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.GroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.GroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.GroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
groupname: jspb.Message.getFieldWithDefault(msg, 2, ""),
notification: jspb.Message.getFieldWithDefault(msg, 3, ""),
introduction: jspb.Message.getFieldWithDefault(msg, 4, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
owneruserid: jspb.Message.getFieldWithDefault(msg, 6, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 7, 0),
membercount: jspb.Message.getFieldWithDefault(msg, 8, 0),
ex: jspb.Message.getFieldWithDefault(msg, 9, ""),
status: jspb.Message.getFieldWithDefault(msg, 10, 0),
creatoruserid: jspb.Message.getFieldWithDefault(msg, 11, ""),
needverification: jspb.Message.getFieldWithDefault(msg, 12, 0),
lookmemberinfo: jspb.Message.getFieldWithDefault(msg, 13, 0),
applymemberfriend: jspb.Message.getFieldWithDefault(msg, 14, 0),
notificationupdatetime: jspb.Message.getFieldWithDefault(msg, 15, 0),
notificationuserid: jspb.Message.getFieldWithDefault(msg, 16, ""),
attachedinfo: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.GroupInfo}
 */
proto.openim.sdk.shared.GroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.GroupInfo;
  return proto.openim.sdk.shared.GroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.GroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.GroupInfo}
 */
proto.openim.sdk.shared.GroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotification(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroduction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneruserid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMembercount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 10:
      var value = /** @type {!proto.openim.sdk.shared.GroupStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatoruserid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNeedverification(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLookmemberinfo(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplymemberfriend(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNotificationupdatetime(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationuserid(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttachedinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.GroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.GroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.GroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.GroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNotification();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIntroduction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOwneruserid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMembercount();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getCreatoruserid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getNeedverification();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getLookmemberinfo();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getApplymemberfriend();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getNotificationupdatetime();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getNotificationuserid();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAttachedinfo();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string groupID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string groupName = 2;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string notification = 3;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getNotification = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setNotification = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string introduction = 4;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getIntroduction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setIntroduction = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string faceURL = 5;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ownerUserID = 6;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getOwneruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setOwneruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 createTime = 7;
 * @return {number}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 memberCount = 8;
 * @return {number}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getMembercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setMembercount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string ex = 9;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional GroupStatus status = 10;
 * @return {!proto.openim.sdk.shared.GroupStatus}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getStatus = function() {
  return /** @type {!proto.openim.sdk.shared.GroupStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.openim.sdk.shared.GroupStatus} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional string creatorUserID = 11;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getCreatoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setCreatoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 needVerification = 12;
 * @return {number}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getNeedverification = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setNeedverification = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 lookMemberInfo = 13;
 * @return {number}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getLookmemberinfo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setLookmemberinfo = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 applyMemberFriend = 14;
 * @return {number}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getApplymemberfriend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setApplymemberfriend = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 notificationUpdateTime = 15;
 * @return {number}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getNotificationupdatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setNotificationupdatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string notificationUserID = 16;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getNotificationuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setNotificationuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string attachedInfo = 17;
 * @return {string}
 */
proto.openim.sdk.shared.GroupInfo.prototype.getAttachedinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupInfo} returns this
 */
proto.openim.sdk.shared.GroupInfo.prototype.setAttachedinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.GroupMemberInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.GroupMemberInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.GroupMemberInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
rolelevel: jspb.Message.getFieldWithDefault(msg, 5, 0),
jointime: jspb.Message.getFieldWithDefault(msg, 6, 0),
joinsource: jspb.Message.getFieldWithDefault(msg, 7, 0),
inviteruserid: jspb.Message.getFieldWithDefault(msg, 8, ""),
muteendtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
operatoruserid: jspb.Message.getFieldWithDefault(msg, 10, ""),
ex: jspb.Message.getFieldWithDefault(msg, 11, ""),
attachedinfo: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.GroupMemberInfo}
 */
proto.openim.sdk.shared.GroupMemberInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.GroupMemberInfo;
  return proto.openim.sdk.shared.GroupMemberInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.GroupMemberInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.GroupMemberInfo}
 */
proto.openim.sdk.shared.GroupMemberInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRolelevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJointime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJoinsource(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteruserid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMuteendtime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatoruserid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttachedinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.GroupMemberInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.GroupMemberInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.GroupMemberInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRolelevel();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getJointime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getJoinsource();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInviteruserid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMuteendtime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getOperatoruserid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAttachedinfo();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string groupID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string faceURL = 4;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 roleLevel = 5;
 * @return {number}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getRolelevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setRolelevel = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 joinTime = 6;
 * @return {number}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getJointime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setJointime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 joinSource = 7;
 * @return {number}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getJoinsource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setJoinsource = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string inviterUserID = 8;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getInviteruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setInviteruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 muteEndTime = 9;
 * @return {number}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getMuteendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setMuteendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string operatorUserID = 10;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getOperatoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setOperatoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string ex = 11;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string attachedInfo = 12;
 * @return {string}
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.getAttachedinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupMemberInfo} returns this
 */
proto.openim.sdk.shared.GroupMemberInfo.prototype.setAttachedinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.GroupRequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.GroupRequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.GroupRequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
groupname: jspb.Message.getFieldWithDefault(msg, 2, ""),
notification: jspb.Message.getFieldWithDefault(msg, 3, ""),
introduction: jspb.Message.getFieldWithDefault(msg, 4, ""),
groupfaceurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 6, 0),
status: jspb.Message.getFieldWithDefault(msg, 7, 0),
creatoruserid: jspb.Message.getFieldWithDefault(msg, 8, ""),
grouptype: jspb.Message.getFieldWithDefault(msg, 9, 0),
owneruserid: jspb.Message.getFieldWithDefault(msg, 10, ""),
membercount: jspb.Message.getFieldWithDefault(msg, 11, 0),
userid: jspb.Message.getFieldWithDefault(msg, 12, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 13, ""),
userfaceurl: jspb.Message.getFieldWithDefault(msg, 14, ""),
handleresult: jspb.Message.getFieldWithDefault(msg, 15, 0),
reqmsg: jspb.Message.getFieldWithDefault(msg, 16, ""),
handledmsg: jspb.Message.getFieldWithDefault(msg, 17, ""),
reqtime: jspb.Message.getFieldWithDefault(msg, 18, 0),
handleuserid: jspb.Message.getFieldWithDefault(msg, 19, ""),
handledtime: jspb.Message.getFieldWithDefault(msg, 20, 0),
ex: jspb.Message.getFieldWithDefault(msg, 21, ""),
attachedinfo: jspb.Message.getFieldWithDefault(msg, 22, ""),
joinsource: jspb.Message.getFieldWithDefault(msg, 23, 0),
inviteruserid: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.GroupRequestInfo}
 */
proto.openim.sdk.shared.GroupRequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.GroupRequestInfo;
  return proto.openim.sdk.shared.GroupRequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.GroupRequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.GroupRequestInfo}
 */
proto.openim.sdk.shared.GroupRequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotification(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroduction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupfaceurl(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatoruserid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrouptype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneruserid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMembercount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserfaceurl(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHandleresult(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqmsg(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandledmsg(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReqtime(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandleuserid(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandledtime(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttachedinfo(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJoinsource(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteruserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.GroupRequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.GroupRequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.GroupRequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNotification();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIntroduction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroupfaceurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCreatoruserid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGrouptype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getOwneruserid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMembercount();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getUserfaceurl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getHandleresult();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getReqmsg();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getHandledmsg();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getReqtime();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getHandleuserid();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getHandledtime();
  if (f !== 0) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getAttachedinfo();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getJoinsource();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getInviteruserid();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional string groupID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string groupName = 2;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string notification = 3;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getNotification = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setNotification = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string introduction = 4;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getIntroduction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setIntroduction = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string groupFaceURL = 5;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getGroupfaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setGroupfaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 createTime = 6;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 status = 7;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string creatorUserID = 8;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getCreatoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setCreatoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 groupType = 9;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getGrouptype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string ownerUserID = 10;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getOwneruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setOwneruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 memberCount = 11;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getMembercount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setMembercount = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string userID = 12;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string nickname = 13;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string userFaceURL = 14;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getUserfaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setUserfaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 handleResult = 15;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getHandleresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setHandleresult = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional string reqMsg = 16;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getReqmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setReqmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string handledMsg = 17;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getHandledmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setHandledmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int64 reqTime = 18;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getReqtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setReqtime = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional string handleUserID = 19;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getHandleuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setHandleuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional int64 handledTime = 20;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getHandledtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setHandledtime = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional string ex = 21;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string attachedInfo = 22;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getAttachedinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setAttachedinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional int32 joinSource = 23;
 * @return {number}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getJoinsource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setJoinsource = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string inviterUserID = 24;
 * @return {string}
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.getInviteruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.GroupRequestInfo} returns this
 */
proto.openim.sdk.shared.GroupRequestInfo.prototype.setInviteruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.shared.Conversation.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.shared.Conversation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.shared.Conversation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.Conversation.toObject = function(includeInstance, msg) {
  var f, obj = {
conversationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
conversationtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
userid: jspb.Message.getFieldWithDefault(msg, 3, ""),
groupid: jspb.Message.getFieldWithDefault(msg, 4, ""),
showname: jspb.Message.getFieldWithDefault(msg, 5, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 6, ""),
recvmsgopt: jspb.Message.getFieldWithDefault(msg, 7, 0),
unreadcount: jspb.Message.getFieldWithDefault(msg, 8, 0),
groupattype: jspb.Message.getFieldWithDefault(msg, 9, 0),
latestmsg: jspb.Message.getFieldWithDefault(msg, 10, ""),
latestmsgsendtime: jspb.Message.getFieldWithDefault(msg, 11, 0),
drafttext: jspb.Message.getFieldWithDefault(msg, 12, ""),
drafttexttime: jspb.Message.getFieldWithDefault(msg, 13, 0),
ispinned: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
isprivatechat: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
burnduration: jspb.Message.getFieldWithDefault(msg, 16, 0),
ex: jspb.Message.getFieldWithDefault(msg, 17, ""),
msgdestructtime: jspb.Message.getFieldWithDefault(msg, 18, 0),
ismsgdestruct: jspb.Message.getBooleanFieldWithDefault(msg, 19, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.shared.Conversation}
 */
proto.openim.sdk.shared.Conversation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.shared.Conversation;
  return proto.openim.sdk.shared.Conversation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.shared.Conversation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.shared.Conversation}
 */
proto.openim.sdk.shared.Conversation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConversationid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConversationtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setShowname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecvmsgopt(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadcount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupattype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatestmsg(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatestmsgsendtime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDrafttext(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDrafttexttime(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspinned(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsprivatechat(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBurnduration(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgdestructtime(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsmsgdestruct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.shared.Conversation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.shared.Conversation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.shared.Conversation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.shared.Conversation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConversationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConversationtype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getShowname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRecvmsgopt();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUnreadcount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getGroupattype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getLatestmsg();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLatestmsgsendtime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getDrafttext();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDrafttexttime();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getIspinned();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getIsprivatechat();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getBurnduration();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getMsgdestructtime();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getIsmsgdestruct();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
};


/**
 * optional string conversationID = 1;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getConversationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setConversationid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 conversationType = 2;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getConversationtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setConversationtype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string userID = 3;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string groupID = 4;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string showName = 5;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getShowname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setShowname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string faceURL = 6;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 recvMsgOpt = 7;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getRecvmsgopt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setRecvmsgopt = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 unreadCount = 8;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getUnreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setUnreadcount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 groupAtType = 9;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getGroupattype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setGroupattype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string latestMsg = 10;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getLatestmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setLatestmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 latestMsgSendTime = 11;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getLatestmsgsendtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setLatestmsgsendtime = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string draftText = 12;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getDrafttext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setDrafttext = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int64 draftTextTime = 13;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getDrafttexttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setDrafttexttime = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bool isPinned = 14;
 * @return {boolean}
 */
proto.openim.sdk.shared.Conversation.prototype.getIspinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setIspinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool isPrivateChat = 15;
 * @return {boolean}
 */
proto.openim.sdk.shared.Conversation.prototype.getIsprivatechat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setIsprivatechat = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional int32 burnDuration = 16;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getBurnduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setBurnduration = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string ex = 17;
 * @return {string}
 */
proto.openim.sdk.shared.Conversation.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int64 msgDestructTime = 18;
 * @return {number}
 */
proto.openim.sdk.shared.Conversation.prototype.getMsgdestructtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setMsgdestructtime = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional bool isMsgDestruct = 19;
 * @return {boolean}
 */
proto.openim.sdk.shared.Conversation.prototype.getIsmsgdestruct = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.shared.Conversation} returns this
 */
proto.openim.sdk.shared.Conversation.prototype.setIsmsgdestruct = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * @enum {number}
 */
proto.openim.sdk.shared.GroupStatus = {
  DEFAULT: 0,
  DISMISSED: 2
};

/**
 * @enum {number}
 */
proto.openim.sdk.shared.GroupFilter = {
  ALL: 0,
  OWNER: 1,
  ADMIN: 2,
  ORDINARYUSERS: 3,
  ADMINANDORDINARYUSERS: 4,
  OWNERANDADMIN: 5
};

goog.object.extend(exports, proto.openim.sdk.shared);
