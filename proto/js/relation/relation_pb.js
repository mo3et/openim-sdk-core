// source: relation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var user_pb = require('./user_pb.js');
goog.object.extend(proto, user_pb);
goog.exportSymbol('proto.openim.sdk.relation.AddBlackReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.AddBlackResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.AddFriendReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.AddFriendResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.BlackAddedTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.BlackDeletedTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.BlackInfo', null, global);
goog.exportSymbol('proto.openim.sdk.relation.CheckFriendInfo', null, global);
goog.exportSymbol('proto.openim.sdk.relation.CheckFriendReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.CheckFriendResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.DeleteBlackReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.DeleteBlackResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.DeleteFriendReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.DeleteFriendResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendAddedTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendApplication', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendApplicationApprovedTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendApplicationRejectedTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendApplicationTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendDeletedTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendInfo', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendInfoChangedTips', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FriendRequestInfo', null, global);
goog.exportSymbol('proto.openim.sdk.relation.FromToUserID', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetBlacksReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetBlacksResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetFriendRequestsReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetFriendRequestsResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetFriendsPageReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetFriendsPageResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetFriendsReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetFriendsResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetSpecifiedFriendsReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.GetSpecifiedFriendsResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.HandlerFriendRequestReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.HandlerFriendRequestResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.Relationship', null, global);
goog.exportSymbol('proto.openim.sdk.relation.SearchFriendsInfo', null, global);
goog.exportSymbol('proto.openim.sdk.relation.SearchFriendsReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.SearchFriendsResp', null, global);
goog.exportSymbol('proto.openim.sdk.relation.UpdatesFriendsReq', null, global);
goog.exportSymbol('proto.openim.sdk.relation.UpdatesFriendsResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendInfo.displayName = 'proto.openim.sdk.relation.FriendInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.BlackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.BlackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.BlackInfo.displayName = 'proto.openim.sdk.relation.BlackInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendRequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendRequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendRequestInfo.displayName = 'proto.openim.sdk.relation.FriendRequestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.GetSpecifiedFriendsReq.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.GetSpecifiedFriendsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetSpecifiedFriendsReq.displayName = 'proto.openim.sdk.relation.GetSpecifiedFriendsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.GetSpecifiedFriendsResp.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.GetSpecifiedFriendsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetSpecifiedFriendsResp.displayName = 'proto.openim.sdk.relation.GetSpecifiedFriendsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.AddFriendReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.AddFriendReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.AddFriendReq.displayName = 'proto.openim.sdk.relation.AddFriendReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.AddFriendResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.AddFriendResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.AddFriendResp.displayName = 'proto.openim.sdk.relation.AddFriendResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetFriendRequestsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.GetFriendRequestsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetFriendRequestsReq.displayName = 'proto.openim.sdk.relation.GetFriendRequestsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetFriendRequestsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.GetFriendRequestsResp.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.GetFriendRequestsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetFriendRequestsResp.displayName = 'proto.openim.sdk.relation.GetFriendRequestsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.HandlerFriendRequestReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.HandlerFriendRequestReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.HandlerFriendRequestReq.displayName = 'proto.openim.sdk.relation.HandlerFriendRequestReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.HandlerFriendRequestResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.HandlerFriendRequestResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.HandlerFriendRequestResp.displayName = 'proto.openim.sdk.relation.HandlerFriendRequestResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.CheckFriendReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.CheckFriendReq.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.CheckFriendReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.CheckFriendReq.displayName = 'proto.openim.sdk.relation.CheckFriendReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.CheckFriendInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.CheckFriendInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.CheckFriendInfo.displayName = 'proto.openim.sdk.relation.CheckFriendInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.CheckFriendResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.CheckFriendResp.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.CheckFriendResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.CheckFriendResp.displayName = 'proto.openim.sdk.relation.CheckFriendResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.DeleteFriendReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.DeleteFriendReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.DeleteFriendReq.displayName = 'proto.openim.sdk.relation.DeleteFriendReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.DeleteFriendResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.DeleteFriendResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.DeleteFriendResp.displayName = 'proto.openim.sdk.relation.DeleteFriendResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetFriendsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.GetFriendsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetFriendsReq.displayName = 'proto.openim.sdk.relation.GetFriendsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetFriendsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.GetFriendsResp.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.GetFriendsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetFriendsResp.displayName = 'proto.openim.sdk.relation.GetFriendsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetFriendsPageReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.GetFriendsPageReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetFriendsPageReq.displayName = 'proto.openim.sdk.relation.GetFriendsPageReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetFriendsPageResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.GetFriendsPageResp.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.GetFriendsPageResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetFriendsPageResp.displayName = 'proto.openim.sdk.relation.GetFriendsPageResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.SearchFriendsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.SearchFriendsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.SearchFriendsReq.displayName = 'proto.openim.sdk.relation.SearchFriendsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.SearchFriendsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.SearchFriendsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.SearchFriendsInfo.displayName = 'proto.openim.sdk.relation.SearchFriendsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.SearchFriendsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.SearchFriendsResp.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.SearchFriendsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.SearchFriendsResp.displayName = 'proto.openim.sdk.relation.SearchFriendsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.AddBlackReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.AddBlackReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.AddBlackReq.displayName = 'proto.openim.sdk.relation.AddBlackReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.AddBlackResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.AddBlackResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.AddBlackResp.displayName = 'proto.openim.sdk.relation.AddBlackResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.DeleteBlackReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.DeleteBlackReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.DeleteBlackReq.displayName = 'proto.openim.sdk.relation.DeleteBlackReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.DeleteBlackResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.DeleteBlackResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.DeleteBlackResp.displayName = 'proto.openim.sdk.relation.DeleteBlackResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetBlacksReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.GetBlacksReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetBlacksReq.displayName = 'proto.openim.sdk.relation.GetBlacksReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.GetBlacksResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.GetBlacksResp.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.GetBlacksResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.GetBlacksResp.displayName = 'proto.openim.sdk.relation.GetBlacksResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.UpdatesFriendsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.openim.sdk.relation.UpdatesFriendsReq.repeatedFields_, null);
};
goog.inherits(proto.openim.sdk.relation.UpdatesFriendsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.UpdatesFriendsReq.displayName = 'proto.openim.sdk.relation.UpdatesFriendsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.UpdatesFriendsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.UpdatesFriendsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.UpdatesFriendsResp.displayName = 'proto.openim.sdk.relation.UpdatesFriendsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendApplication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendApplication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendApplication.displayName = 'proto.openim.sdk.relation.FriendApplication';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FromToUserID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FromToUserID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FromToUserID.displayName = 'proto.openim.sdk.relation.FromToUserID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendApplicationTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendApplicationTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendApplicationTips.displayName = 'proto.openim.sdk.relation.FriendApplicationTips';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendApplicationApprovedTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendApplicationApprovedTips.displayName = 'proto.openim.sdk.relation.FriendApplicationApprovedTips';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendApplicationRejectedTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendApplicationRejectedTips.displayName = 'proto.openim.sdk.relation.FriendApplicationRejectedTips';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendAddedTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendAddedTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendAddedTips.displayName = 'proto.openim.sdk.relation.FriendAddedTips';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendDeletedTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendDeletedTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendDeletedTips.displayName = 'proto.openim.sdk.relation.FriendDeletedTips';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.BlackAddedTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.BlackAddedTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.BlackAddedTips.displayName = 'proto.openim.sdk.relation.BlackAddedTips';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.BlackDeletedTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.BlackDeletedTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.BlackDeletedTips.displayName = 'proto.openim.sdk.relation.BlackDeletedTips';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openim.sdk.relation.FriendInfoChangedTips = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openim.sdk.relation.FriendInfoChangedTips, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openim.sdk.relation.FriendInfoChangedTips.displayName = 'proto.openim.sdk.relation.FriendInfoChangedTips';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
owneruserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
frienduserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
remark: jspb.Message.getFieldWithDefault(msg, 3, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
addsource: jspb.Message.getFieldWithDefault(msg, 5, 0),
operatoruserid: jspb.Message.getFieldWithDefault(msg, 6, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 7, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 8, ""),
ex: jspb.Message.getFieldWithDefault(msg, 9, ""),
attachedinfo: jspb.Message.getFieldWithDefault(msg, 10, ""),
ispinned: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendInfo}
 */
proto.openim.sdk.relation.FriendInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendInfo;
  return proto.openim.sdk.relation.FriendInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendInfo}
 */
proto.openim.sdk.relation.FriendInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneruserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrienduserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemark(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddsource(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatoruserid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttachedinfo(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspinned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwneruserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrienduserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemark();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAddsource();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getOperatoruserid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAttachedinfo();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIspinned();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string ownerUserID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getOwneruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setOwneruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string friendUserID = 2;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getFrienduserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setFrienduserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string remark = 3;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getRemark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setRemark = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 createTime = 4;
 * @return {number}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 addSource = 5;
 * @return {number}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getAddsource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setAddsource = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string operatorUserID = 6;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getOperatoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setOperatoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string nickname = 7;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string faceURL = 8;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string ex = 9;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string attachedInfo = 10;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getAttachedinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setAttachedinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool isPinned = 11;
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendInfo.prototype.getIspinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.FriendInfo} returns this
 */
proto.openim.sdk.relation.FriendInfo.prototype.setIspinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.BlackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.BlackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.BlackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.BlackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
owneruserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
blockuserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
faceurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 5, 0),
addsource: jspb.Message.getFieldWithDefault(msg, 6, 0),
operatoruserid: jspb.Message.getFieldWithDefault(msg, 7, ""),
ex: jspb.Message.getFieldWithDefault(msg, 8, ""),
attached: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.BlackInfo}
 */
proto.openim.sdk.relation.BlackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.BlackInfo;
  return proto.openim.sdk.relation.BlackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.BlackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.BlackInfo}
 */
proto.openim.sdk.relation.BlackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwneruserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockuserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFaceurl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddsource(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatoruserid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.BlackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.BlackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.BlackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.BlackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwneruserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockuserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFaceurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getAddsource();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getOperatoruserid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAttached();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string ownerUserID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getOwneruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setOwneruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockUserID = 2;
 * @return {string}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getBlockuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setBlockuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string faceURL = 4;
 * @return {string}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getFaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setFaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 createTime = 5;
 * @return {number}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 addSource = 6;
 * @return {number}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getAddsource = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setAddsource = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string operatorUserID = 7;
 * @return {string}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getOperatoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setOperatoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ex = 8;
 * @return {string}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string attached = 9;
 * @return {string}
 */
proto.openim.sdk.relation.BlackInfo.prototype.getAttached = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.BlackInfo} returns this
 */
proto.openim.sdk.relation.BlackInfo.prototype.setAttached = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendRequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendRequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendRequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
fromuserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
fromnickname: jspb.Message.getFieldWithDefault(msg, 2, ""),
fromfaceurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
touserid: jspb.Message.getFieldWithDefault(msg, 4, ""),
tonickname: jspb.Message.getFieldWithDefault(msg, 5, ""),
tofaceurl: jspb.Message.getFieldWithDefault(msg, 6, ""),
handleresult: jspb.Message.getFieldWithDefault(msg, 7, 0),
reqmsg: jspb.Message.getFieldWithDefault(msg, 8, ""),
createtime: jspb.Message.getFieldWithDefault(msg, 9, 0),
handleruserid: jspb.Message.getFieldWithDefault(msg, 10, ""),
handlemsg: jspb.Message.getFieldWithDefault(msg, 11, ""),
handletime: jspb.Message.getFieldWithDefault(msg, 12, 0),
ex: jspb.Message.getFieldWithDefault(msg, 13, ""),
attached: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendRequestInfo}
 */
proto.openim.sdk.relation.FriendRequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendRequestInfo;
  return proto.openim.sdk.relation.FriendRequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendRequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendRequestInfo}
 */
proto.openim.sdk.relation.FriendRequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromuserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromnickname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromfaceurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTouserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTonickname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTofaceurl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHandleresult(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqmsg(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandleruserid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandlemsg(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHandletime(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendRequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendRequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendRequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromuserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromnickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFromfaceurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTouserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTonickname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTofaceurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHandleresult();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getReqmsg();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getHandleruserid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getHandlemsg();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getHandletime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAttached();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string fromUserID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getFromuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setFromuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fromNickname = 2;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getFromnickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setFromnickname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fromFaceURL = 3;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getFromfaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setFromfaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string toUserID = 4;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getTouserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setTouserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string toNickname = 5;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getTonickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setTonickname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string toFaceURL = 6;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getTofaceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setTofaceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 handleResult = 7;
 * @return {number}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getHandleresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setHandleresult = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string reqMsg = 8;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getReqmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setReqmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 createTime = 9;
 * @return {number}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string handlerUserID = 10;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getHandleruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setHandleruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string handleMsg = 11;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getHandlemsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setHandlemsg = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 handleTime = 12;
 * @return {number}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getHandletime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setHandletime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string ex = 13;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string attached = 14;
 * @return {string}
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.getAttached = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendRequestInfo} returns this
 */
proto.openim.sdk.relation.FriendRequestInfo.prototype.setAttached = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetSpecifiedFriendsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetSpecifiedFriendsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
frienduseridsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
filterblack: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsReq}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetSpecifiedFriendsReq;
  return proto.openim.sdk.relation.GetSpecifiedFriendsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetSpecifiedFriendsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsReq}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFrienduserids(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterblack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetSpecifiedFriendsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetSpecifiedFriendsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrienduseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getFilterblack();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string friendUserIDs = 1;
 * @return {!Array<string>}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.getFrienduseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsReq} returns this
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.setFrienduseridsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsReq} returns this
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.addFrienduserids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsReq} returns this
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.clearFrienduseridsList = function() {
  return this.setFrienduseridsList([]);
};


/**
 * optional bool filterBlack = 2;
 * @return {boolean}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.getFilterblack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsReq} returns this
 */
proto.openim.sdk.relation.GetSpecifiedFriendsReq.prototype.setFilterblack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetSpecifiedFriendsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetSpecifiedFriendsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
friendsList: jspb.Message.toObjectList(msg.getFriendsList(),
    proto.openim.sdk.relation.FriendInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsResp}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetSpecifiedFriendsResp;
  return proto.openim.sdk.relation.GetSpecifiedFriendsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetSpecifiedFriendsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsResp}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FriendInfo;
      reader.readMessage(value,proto.openim.sdk.relation.FriendInfo.deserializeBinaryFromReader);
      msg.addFriends(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetSpecifiedFriendsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetSpecifiedFriendsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.openim.sdk.relation.FriendInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendInfo friends = 1;
 * @return {!Array<!proto.openim.sdk.relation.FriendInfo>}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.prototype.getFriendsList = function() {
  return /** @type{!Array<!proto.openim.sdk.relation.FriendInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.openim.sdk.relation.FriendInfo, 1));
};


/**
 * @param {!Array<!proto.openim.sdk.relation.FriendInfo>} value
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsResp} returns this
*/
proto.openim.sdk.relation.GetSpecifiedFriendsResp.prototype.setFriendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.openim.sdk.relation.FriendInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.FriendInfo}
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.prototype.addFriends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.openim.sdk.relation.FriendInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.GetSpecifiedFriendsResp} returns this
 */
proto.openim.sdk.relation.GetSpecifiedFriendsResp.prototype.clearFriendsList = function() {
  return this.setFriendsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.AddFriendReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.AddFriendReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.AddFriendReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddFriendReq.toObject = function(includeInstance, msg) {
  var f, obj = {
userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
reqmsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
ex: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.AddFriendReq}
 */
proto.openim.sdk.relation.AddFriendReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.AddFriendReq;
  return proto.openim.sdk.relation.AddFriendReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.AddFriendReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.AddFriendReq}
 */
proto.openim.sdk.relation.AddFriendReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqmsg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.AddFriendReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.AddFriendReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.AddFriendReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddFriendReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReqmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.AddFriendReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.AddFriendReq} returns this
 */
proto.openim.sdk.relation.AddFriendReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reqMsg = 2;
 * @return {string}
 */
proto.openim.sdk.relation.AddFriendReq.prototype.getReqmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.AddFriendReq} returns this
 */
proto.openim.sdk.relation.AddFriendReq.prototype.setReqmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ex = 3;
 * @return {string}
 */
proto.openim.sdk.relation.AddFriendReq.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.AddFriendReq} returns this
 */
proto.openim.sdk.relation.AddFriendReq.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.AddFriendResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.AddFriendResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.AddFriendResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddFriendResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.AddFriendResp}
 */
proto.openim.sdk.relation.AddFriendResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.AddFriendResp;
  return proto.openim.sdk.relation.AddFriendResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.AddFriendResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.AddFriendResp}
 */
proto.openim.sdk.relation.AddFriendResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.AddFriendResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.AddFriendResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.AddFriendResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddFriendResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetFriendRequestsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetFriendRequestsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetFriendRequestsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendRequestsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
send: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetFriendRequestsReq}
 */
proto.openim.sdk.relation.GetFriendRequestsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetFriendRequestsReq;
  return proto.openim.sdk.relation.GetFriendRequestsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetFriendRequestsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetFriendRequestsReq}
 */
proto.openim.sdk.relation.GetFriendRequestsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetFriendRequestsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetFriendRequestsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetFriendRequestsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendRequestsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSend();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool send = 1;
 * @return {boolean}
 */
proto.openim.sdk.relation.GetFriendRequestsReq.prototype.getSend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.GetFriendRequestsReq} returns this
 */
proto.openim.sdk.relation.GetFriendRequestsReq.prototype.setSend = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.GetFriendRequestsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetFriendRequestsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetFriendRequestsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetFriendRequestsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendRequestsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
requestsList: jspb.Message.toObjectList(msg.getRequestsList(),
    proto.openim.sdk.relation.FriendRequestInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetFriendRequestsResp}
 */
proto.openim.sdk.relation.GetFriendRequestsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetFriendRequestsResp;
  return proto.openim.sdk.relation.GetFriendRequestsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetFriendRequestsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetFriendRequestsResp}
 */
proto.openim.sdk.relation.GetFriendRequestsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FriendRequestInfo;
      reader.readMessage(value,proto.openim.sdk.relation.FriendRequestInfo.deserializeBinaryFromReader);
      msg.addRequests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetFriendRequestsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetFriendRequestsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetFriendRequestsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendRequestsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.openim.sdk.relation.FriendRequestInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendRequestInfo requests = 1;
 * @return {!Array<!proto.openim.sdk.relation.FriendRequestInfo>}
 */
proto.openim.sdk.relation.GetFriendRequestsResp.prototype.getRequestsList = function() {
  return /** @type{!Array<!proto.openim.sdk.relation.FriendRequestInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.openim.sdk.relation.FriendRequestInfo, 1));
};


/**
 * @param {!Array<!proto.openim.sdk.relation.FriendRequestInfo>} value
 * @return {!proto.openim.sdk.relation.GetFriendRequestsResp} returns this
*/
proto.openim.sdk.relation.GetFriendRequestsResp.prototype.setRequestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.openim.sdk.relation.FriendRequestInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.FriendRequestInfo}
 */
proto.openim.sdk.relation.GetFriendRequestsResp.prototype.addRequests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.openim.sdk.relation.FriendRequestInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.GetFriendRequestsResp} returns this
 */
proto.openim.sdk.relation.GetFriendRequestsResp.prototype.clearRequestsList = function() {
  return this.setRequestsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.HandlerFriendRequestReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.HandlerFriendRequestReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.toObject = function(includeInstance, msg) {
  var f, obj = {
userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
handlemsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.HandlerFriendRequestReq}
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.HandlerFriendRequestReq;
  return proto.openim.sdk.relation.HandlerFriendRequestReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.HandlerFriendRequestReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.HandlerFriendRequestReq}
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandlemsg(value);
      break;
    case 3:
      var value = /** @type {!proto.openim.sdk.common.ApprovalStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.HandlerFriendRequestReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.HandlerFriendRequestReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHandlemsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.HandlerFriendRequestReq} returns this
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string handleMsg = 2;
 * @return {string}
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.getHandlemsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.HandlerFriendRequestReq} returns this
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.setHandlemsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional openim.sdk.common.ApprovalStatus status = 3;
 * @return {!proto.openim.sdk.common.ApprovalStatus}
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.getStatus = function() {
  return /** @type {!proto.openim.sdk.common.ApprovalStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.openim.sdk.common.ApprovalStatus} value
 * @return {!proto.openim.sdk.relation.HandlerFriendRequestReq} returns this
 */
proto.openim.sdk.relation.HandlerFriendRequestReq.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.HandlerFriendRequestResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.HandlerFriendRequestResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.HandlerFriendRequestResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.HandlerFriendRequestResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.HandlerFriendRequestResp}
 */
proto.openim.sdk.relation.HandlerFriendRequestResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.HandlerFriendRequestResp;
  return proto.openim.sdk.relation.HandlerFriendRequestResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.HandlerFriendRequestResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.HandlerFriendRequestResp}
 */
proto.openim.sdk.relation.HandlerFriendRequestResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.HandlerFriendRequestResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.HandlerFriendRequestResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.HandlerFriendRequestResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.HandlerFriendRequestResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.CheckFriendReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.CheckFriendReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.CheckFriendReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.CheckFriendReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.CheckFriendReq.toObject = function(includeInstance, msg) {
  var f, obj = {
frienduseridsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.CheckFriendReq}
 */
proto.openim.sdk.relation.CheckFriendReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.CheckFriendReq;
  return proto.openim.sdk.relation.CheckFriendReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.CheckFriendReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.CheckFriendReq}
 */
proto.openim.sdk.relation.CheckFriendReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFrienduserids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.CheckFriendReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.CheckFriendReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.CheckFriendReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.CheckFriendReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrienduseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string friendUserIDs = 1;
 * @return {!Array<string>}
 */
proto.openim.sdk.relation.CheckFriendReq.prototype.getFrienduseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.openim.sdk.relation.CheckFriendReq} returns this
 */
proto.openim.sdk.relation.CheckFriendReq.prototype.setFrienduseridsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.CheckFriendReq} returns this
 */
proto.openim.sdk.relation.CheckFriendReq.prototype.addFrienduserids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.CheckFriendReq} returns this
 */
proto.openim.sdk.relation.CheckFriendReq.prototype.clearFrienduseridsList = function() {
  return this.setFrienduseridsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.CheckFriendInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.CheckFriendInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.CheckFriendInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.CheckFriendInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.CheckFriendInfo}
 */
proto.openim.sdk.relation.CheckFriendInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.CheckFriendInfo;
  return proto.openim.sdk.relation.CheckFriendInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.CheckFriendInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.CheckFriendInfo}
 */
proto.openim.sdk.relation.CheckFriendInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.CheckFriendInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.CheckFriendInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.CheckFriendInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.CheckFriendInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResult();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.CheckFriendInfo.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.CheckFriendInfo} returns this
 */
proto.openim.sdk.relation.CheckFriendInfo.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 result = 2;
 * @return {number}
 */
proto.openim.sdk.relation.CheckFriendInfo.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.CheckFriendInfo} returns this
 */
proto.openim.sdk.relation.CheckFriendInfo.prototype.setResult = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.CheckFriendResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.CheckFriendResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.CheckFriendResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.CheckFriendResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.CheckFriendResp.toObject = function(includeInstance, msg) {
  var f, obj = {
resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.openim.sdk.relation.CheckFriendInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.CheckFriendResp}
 */
proto.openim.sdk.relation.CheckFriendResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.CheckFriendResp;
  return proto.openim.sdk.relation.CheckFriendResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.CheckFriendResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.CheckFriendResp}
 */
proto.openim.sdk.relation.CheckFriendResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.CheckFriendInfo;
      reader.readMessage(value,proto.openim.sdk.relation.CheckFriendInfo.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.CheckFriendResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.CheckFriendResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.CheckFriendResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.CheckFriendResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.openim.sdk.relation.CheckFriendInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CheckFriendInfo result = 1;
 * @return {!Array<!proto.openim.sdk.relation.CheckFriendInfo>}
 */
proto.openim.sdk.relation.CheckFriendResp.prototype.getResultList = function() {
  return /** @type{!Array<!proto.openim.sdk.relation.CheckFriendInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.openim.sdk.relation.CheckFriendInfo, 1));
};


/**
 * @param {!Array<!proto.openim.sdk.relation.CheckFriendInfo>} value
 * @return {!proto.openim.sdk.relation.CheckFriendResp} returns this
*/
proto.openim.sdk.relation.CheckFriendResp.prototype.setResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.openim.sdk.relation.CheckFriendInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.CheckFriendInfo}
 */
proto.openim.sdk.relation.CheckFriendResp.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.openim.sdk.relation.CheckFriendInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.CheckFriendResp} returns this
 */
proto.openim.sdk.relation.CheckFriendResp.prototype.clearResultList = function() {
  return this.setResultList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.DeleteFriendReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.DeleteFriendReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.DeleteFriendReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteFriendReq.toObject = function(includeInstance, msg) {
  var f, obj = {
userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.DeleteFriendReq}
 */
proto.openim.sdk.relation.DeleteFriendReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.DeleteFriendReq;
  return proto.openim.sdk.relation.DeleteFriendReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.DeleteFriendReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.DeleteFriendReq}
 */
proto.openim.sdk.relation.DeleteFriendReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.DeleteFriendReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.DeleteFriendReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.DeleteFriendReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteFriendReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.DeleteFriendReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.DeleteFriendReq} returns this
 */
proto.openim.sdk.relation.DeleteFriendReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.DeleteFriendResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.DeleteFriendResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.DeleteFriendResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteFriendResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.DeleteFriendResp}
 */
proto.openim.sdk.relation.DeleteFriendResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.DeleteFriendResp;
  return proto.openim.sdk.relation.DeleteFriendResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.DeleteFriendResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.DeleteFriendResp}
 */
proto.openim.sdk.relation.DeleteFriendResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.DeleteFriendResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.DeleteFriendResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.DeleteFriendResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteFriendResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetFriendsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetFriendsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetFriendsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
filterblack: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetFriendsReq}
 */
proto.openim.sdk.relation.GetFriendsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetFriendsReq;
  return proto.openim.sdk.relation.GetFriendsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetFriendsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetFriendsReq}
 */
proto.openim.sdk.relation.GetFriendsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterblack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetFriendsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetFriendsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetFriendsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterblack();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool filterBlack = 1;
 * @return {boolean}
 */
proto.openim.sdk.relation.GetFriendsReq.prototype.getFilterblack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.GetFriendsReq} returns this
 */
proto.openim.sdk.relation.GetFriendsReq.prototype.setFilterblack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.GetFriendsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetFriendsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetFriendsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetFriendsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
friendsList: jspb.Message.toObjectList(msg.getFriendsList(),
    proto.openim.sdk.relation.FriendInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetFriendsResp}
 */
proto.openim.sdk.relation.GetFriendsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetFriendsResp;
  return proto.openim.sdk.relation.GetFriendsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetFriendsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetFriendsResp}
 */
proto.openim.sdk.relation.GetFriendsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FriendInfo;
      reader.readMessage(value,proto.openim.sdk.relation.FriendInfo.deserializeBinaryFromReader);
      msg.addFriends(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetFriendsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetFriendsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetFriendsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.openim.sdk.relation.FriendInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendInfo friends = 1;
 * @return {!Array<!proto.openim.sdk.relation.FriendInfo>}
 */
proto.openim.sdk.relation.GetFriendsResp.prototype.getFriendsList = function() {
  return /** @type{!Array<!proto.openim.sdk.relation.FriendInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.openim.sdk.relation.FriendInfo, 1));
};


/**
 * @param {!Array<!proto.openim.sdk.relation.FriendInfo>} value
 * @return {!proto.openim.sdk.relation.GetFriendsResp} returns this
*/
proto.openim.sdk.relation.GetFriendsResp.prototype.setFriendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.openim.sdk.relation.FriendInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.FriendInfo}
 */
proto.openim.sdk.relation.GetFriendsResp.prototype.addFriends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.openim.sdk.relation.FriendInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.GetFriendsResp} returns this
 */
proto.openim.sdk.relation.GetFriendsResp.prototype.clearFriendsList = function() {
  return this.setFriendsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetFriendsPageReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetFriendsPageReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetFriendsPageReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsPageReq.toObject = function(includeInstance, msg) {
  var f, obj = {
filterblack: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
pagination: (f = msg.getPagination()) && common_pb.RequestPagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetFriendsPageReq}
 */
proto.openim.sdk.relation.GetFriendsPageReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetFriendsPageReq;
  return proto.openim.sdk.relation.GetFriendsPageReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetFriendsPageReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetFriendsPageReq}
 */
proto.openim.sdk.relation.GetFriendsPageReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterblack(value);
      break;
    case 2:
      var value = new common_pb.RequestPagination;
      reader.readMessage(value,common_pb.RequestPagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetFriendsPageReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetFriendsPageReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetFriendsPageReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsPageReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterblack();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.RequestPagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool filterBlack = 1;
 * @return {boolean}
 */
proto.openim.sdk.relation.GetFriendsPageReq.prototype.getFilterblack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.GetFriendsPageReq} returns this
 */
proto.openim.sdk.relation.GetFriendsPageReq.prototype.setFilterblack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional openim.sdk.common.RequestPagination pagination = 2;
 * @return {?proto.openim.sdk.common.RequestPagination}
 */
proto.openim.sdk.relation.GetFriendsPageReq.prototype.getPagination = function() {
  return /** @type{?proto.openim.sdk.common.RequestPagination} */ (
    jspb.Message.getWrapperField(this, common_pb.RequestPagination, 2));
};


/**
 * @param {?proto.openim.sdk.common.RequestPagination|undefined} value
 * @return {!proto.openim.sdk.relation.GetFriendsPageReq} returns this
*/
proto.openim.sdk.relation.GetFriendsPageReq.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.GetFriendsPageReq} returns this
 */
proto.openim.sdk.relation.GetFriendsPageReq.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.GetFriendsPageReq.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.GetFriendsPageResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetFriendsPageResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetFriendsPageResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetFriendsPageResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsPageResp.toObject = function(includeInstance, msg) {
  var f, obj = {
friendsList: jspb.Message.toObjectList(msg.getFriendsList(),
    proto.openim.sdk.relation.FriendInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetFriendsPageResp}
 */
proto.openim.sdk.relation.GetFriendsPageResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetFriendsPageResp;
  return proto.openim.sdk.relation.GetFriendsPageResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetFriendsPageResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetFriendsPageResp}
 */
proto.openim.sdk.relation.GetFriendsPageResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FriendInfo;
      reader.readMessage(value,proto.openim.sdk.relation.FriendInfo.deserializeBinaryFromReader);
      msg.addFriends(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetFriendsPageResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetFriendsPageResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetFriendsPageResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetFriendsPageResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.openim.sdk.relation.FriendInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FriendInfo friends = 1;
 * @return {!Array<!proto.openim.sdk.relation.FriendInfo>}
 */
proto.openim.sdk.relation.GetFriendsPageResp.prototype.getFriendsList = function() {
  return /** @type{!Array<!proto.openim.sdk.relation.FriendInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.openim.sdk.relation.FriendInfo, 1));
};


/**
 * @param {!Array<!proto.openim.sdk.relation.FriendInfo>} value
 * @return {!proto.openim.sdk.relation.GetFriendsPageResp} returns this
*/
proto.openim.sdk.relation.GetFriendsPageResp.prototype.setFriendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.openim.sdk.relation.FriendInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.FriendInfo}
 */
proto.openim.sdk.relation.GetFriendsPageResp.prototype.addFriends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.openim.sdk.relation.FriendInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.GetFriendsPageResp} returns this
 */
proto.openim.sdk.relation.GetFriendsPageResp.prototype.clearFriendsList = function() {
  return this.setFriendsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.SearchFriendsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.SearchFriendsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.SearchFriendsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
keyword: jspb.Message.getFieldWithDefault(msg, 1, ""),
searchuserid: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
searchnickname: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
searchremark: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.SearchFriendsReq}
 */
proto.openim.sdk.relation.SearchFriendsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.SearchFriendsReq;
  return proto.openim.sdk.relation.SearchFriendsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.SearchFriendsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.SearchFriendsReq}
 */
proto.openim.sdk.relation.SearchFriendsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyword(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSearchuserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSearchnickname(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSearchremark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.SearchFriendsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.SearchFriendsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.SearchFriendsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSearchuserid();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSearchnickname();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSearchremark();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string keyword = 1;
 * @return {string}
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.getKeyword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.SearchFriendsReq} returns this
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.setKeyword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool searchUserID = 2;
 * @return {boolean}
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.getSearchuserid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.SearchFriendsReq} returns this
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.setSearchuserid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool searchNickname = 3;
 * @return {boolean}
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.getSearchnickname = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.SearchFriendsReq} returns this
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.setSearchnickname = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool searchRemark = 4;
 * @return {boolean}
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.getSearchremark = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.SearchFriendsReq} returns this
 */
proto.openim.sdk.relation.SearchFriendsReq.prototype.setSearchremark = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.SearchFriendsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.SearchFriendsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.SearchFriendsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.SearchFriendsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
friend: (f = msg.getFriend()) && proto.openim.sdk.relation.FriendInfo.toObject(includeInstance, f),
relationship: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.SearchFriendsInfo}
 */
proto.openim.sdk.relation.SearchFriendsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.SearchFriendsInfo;
  return proto.openim.sdk.relation.SearchFriendsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.SearchFriendsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.SearchFriendsInfo}
 */
proto.openim.sdk.relation.SearchFriendsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FriendInfo;
      reader.readMessage(value,proto.openim.sdk.relation.FriendInfo.deserializeBinaryFromReader);
      msg.setFriend(value);
      break;
    case 2:
      var value = /** @type {!proto.openim.sdk.relation.Relationship} */ (reader.readEnum());
      msg.setRelationship(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.SearchFriendsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.SearchFriendsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.SearchFriendsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.SearchFriendsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FriendInfo.serializeBinaryToWriter
    );
  }
  f = message.getRelationship();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional FriendInfo friend = 1;
 * @return {?proto.openim.sdk.relation.FriendInfo}
 */
proto.openim.sdk.relation.SearchFriendsInfo.prototype.getFriend = function() {
  return /** @type{?proto.openim.sdk.relation.FriendInfo} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FriendInfo, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FriendInfo|undefined} value
 * @return {!proto.openim.sdk.relation.SearchFriendsInfo} returns this
*/
proto.openim.sdk.relation.SearchFriendsInfo.prototype.setFriend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.SearchFriendsInfo} returns this
 */
proto.openim.sdk.relation.SearchFriendsInfo.prototype.clearFriend = function() {
  return this.setFriend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.SearchFriendsInfo.prototype.hasFriend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Relationship relationship = 2;
 * @return {!proto.openim.sdk.relation.Relationship}
 */
proto.openim.sdk.relation.SearchFriendsInfo.prototype.getRelationship = function() {
  return /** @type {!proto.openim.sdk.relation.Relationship} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.openim.sdk.relation.Relationship} value
 * @return {!proto.openim.sdk.relation.SearchFriendsInfo} returns this
 */
proto.openim.sdk.relation.SearchFriendsInfo.prototype.setRelationship = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.SearchFriendsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.SearchFriendsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.SearchFriendsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.SearchFriendsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.SearchFriendsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
friendsList: jspb.Message.toObjectList(msg.getFriendsList(),
    proto.openim.sdk.relation.SearchFriendsInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.SearchFriendsResp}
 */
proto.openim.sdk.relation.SearchFriendsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.SearchFriendsResp;
  return proto.openim.sdk.relation.SearchFriendsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.SearchFriendsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.SearchFriendsResp}
 */
proto.openim.sdk.relation.SearchFriendsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.SearchFriendsInfo;
      reader.readMessage(value,proto.openim.sdk.relation.SearchFriendsInfo.deserializeBinaryFromReader);
      msg.addFriends(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.SearchFriendsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.SearchFriendsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.SearchFriendsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.SearchFriendsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.openim.sdk.relation.SearchFriendsInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SearchFriendsInfo friends = 1;
 * @return {!Array<!proto.openim.sdk.relation.SearchFriendsInfo>}
 */
proto.openim.sdk.relation.SearchFriendsResp.prototype.getFriendsList = function() {
  return /** @type{!Array<!proto.openim.sdk.relation.SearchFriendsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.openim.sdk.relation.SearchFriendsInfo, 1));
};


/**
 * @param {!Array<!proto.openim.sdk.relation.SearchFriendsInfo>} value
 * @return {!proto.openim.sdk.relation.SearchFriendsResp} returns this
*/
proto.openim.sdk.relation.SearchFriendsResp.prototype.setFriendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.openim.sdk.relation.SearchFriendsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.SearchFriendsInfo}
 */
proto.openim.sdk.relation.SearchFriendsResp.prototype.addFriends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.openim.sdk.relation.SearchFriendsInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.SearchFriendsResp} returns this
 */
proto.openim.sdk.relation.SearchFriendsResp.prototype.clearFriendsList = function() {
  return this.setFriendsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.AddBlackReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.AddBlackReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.AddBlackReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddBlackReq.toObject = function(includeInstance, msg) {
  var f, obj = {
userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
ex: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.AddBlackReq}
 */
proto.openim.sdk.relation.AddBlackReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.AddBlackReq;
  return proto.openim.sdk.relation.AddBlackReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.AddBlackReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.AddBlackReq}
 */
proto.openim.sdk.relation.AddBlackReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.AddBlackReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.AddBlackReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.AddBlackReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddBlackReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEx();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.AddBlackReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.AddBlackReq} returns this
 */
proto.openim.sdk.relation.AddBlackReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ex = 2;
 * @return {string}
 */
proto.openim.sdk.relation.AddBlackReq.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.AddBlackReq} returns this
 */
proto.openim.sdk.relation.AddBlackReq.prototype.setEx = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.AddBlackResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.AddBlackResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.AddBlackResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddBlackResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.AddBlackResp}
 */
proto.openim.sdk.relation.AddBlackResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.AddBlackResp;
  return proto.openim.sdk.relation.AddBlackResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.AddBlackResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.AddBlackResp}
 */
proto.openim.sdk.relation.AddBlackResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.AddBlackResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.AddBlackResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.AddBlackResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.AddBlackResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.DeleteBlackReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.DeleteBlackReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.DeleteBlackReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteBlackReq.toObject = function(includeInstance, msg) {
  var f, obj = {
userid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.DeleteBlackReq}
 */
proto.openim.sdk.relation.DeleteBlackReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.DeleteBlackReq;
  return proto.openim.sdk.relation.DeleteBlackReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.DeleteBlackReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.DeleteBlackReq}
 */
proto.openim.sdk.relation.DeleteBlackReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.DeleteBlackReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.DeleteBlackReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.DeleteBlackReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteBlackReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.DeleteBlackReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.DeleteBlackReq} returns this
 */
proto.openim.sdk.relation.DeleteBlackReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.DeleteBlackResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.DeleteBlackResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.DeleteBlackResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteBlackResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.DeleteBlackResp}
 */
proto.openim.sdk.relation.DeleteBlackResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.DeleteBlackResp;
  return proto.openim.sdk.relation.DeleteBlackResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.DeleteBlackResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.DeleteBlackResp}
 */
proto.openim.sdk.relation.DeleteBlackResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.DeleteBlackResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.DeleteBlackResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.DeleteBlackResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.DeleteBlackResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetBlacksReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetBlacksReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetBlacksReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetBlacksReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetBlacksReq}
 */
proto.openim.sdk.relation.GetBlacksReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetBlacksReq;
  return proto.openim.sdk.relation.GetBlacksReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetBlacksReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetBlacksReq}
 */
proto.openim.sdk.relation.GetBlacksReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetBlacksReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetBlacksReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetBlacksReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetBlacksReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.GetBlacksResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.GetBlacksResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.GetBlacksResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.GetBlacksResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetBlacksResp.toObject = function(includeInstance, msg) {
  var f, obj = {
blacksList: jspb.Message.toObjectList(msg.getBlacksList(),
    proto.openim.sdk.relation.BlackInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.GetBlacksResp}
 */
proto.openim.sdk.relation.GetBlacksResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.GetBlacksResp;
  return proto.openim.sdk.relation.GetBlacksResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.GetBlacksResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.GetBlacksResp}
 */
proto.openim.sdk.relation.GetBlacksResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.BlackInfo;
      reader.readMessage(value,proto.openim.sdk.relation.BlackInfo.deserializeBinaryFromReader);
      msg.addBlacks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.GetBlacksResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.GetBlacksResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.GetBlacksResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.GetBlacksResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlacksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.openim.sdk.relation.BlackInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlackInfo blacks = 1;
 * @return {!Array<!proto.openim.sdk.relation.BlackInfo>}
 */
proto.openim.sdk.relation.GetBlacksResp.prototype.getBlacksList = function() {
  return /** @type{!Array<!proto.openim.sdk.relation.BlackInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.openim.sdk.relation.BlackInfo, 1));
};


/**
 * @param {!Array<!proto.openim.sdk.relation.BlackInfo>} value
 * @return {!proto.openim.sdk.relation.GetBlacksResp} returns this
*/
proto.openim.sdk.relation.GetBlacksResp.prototype.setBlacksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.openim.sdk.relation.BlackInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.BlackInfo}
 */
proto.openim.sdk.relation.GetBlacksResp.prototype.addBlacks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.openim.sdk.relation.BlackInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.GetBlacksResp} returns this
 */
proto.openim.sdk.relation.GetBlacksResp.prototype.clearBlacksList = function() {
  return this.setBlacksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.openim.sdk.relation.UpdatesFriendsReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.UpdatesFriendsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.UpdatesFriendsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.UpdatesFriendsReq.toObject = function(includeInstance, msg) {
  var f, obj = {
useridsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
pinned: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
remark: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
ex: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.UpdatesFriendsReq;
  return proto.openim.sdk.relation.UpdatesFriendsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.UpdatesFriendsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserids(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemark(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.UpdatesFriendsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.UpdatesFriendsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.UpdatesFriendsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated string userIDs = 1;
 * @return {!Array<string>}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.getUseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.setUseridsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.addUserids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.clearUseridsList = function() {
  return this.setUseridsList([]);
};


/**
 * optional bool pinned = 2;
 * @return {boolean}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.setPinned = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.clearPinned = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.hasPinned = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Remark = 3;
 * @return {string}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.getRemark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.setRemark = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.clearRemark = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.hasRemark = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string ex = 4;
 * @return {string}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.getEx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.setEx = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsReq} returns this
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.clearEx = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.UpdatesFriendsReq.prototype.hasEx = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.UpdatesFriendsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.UpdatesFriendsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.UpdatesFriendsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.UpdatesFriendsResp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsResp}
 */
proto.openim.sdk.relation.UpdatesFriendsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.UpdatesFriendsResp;
  return proto.openim.sdk.relation.UpdatesFriendsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.UpdatesFriendsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.UpdatesFriendsResp}
 */
proto.openim.sdk.relation.UpdatesFriendsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.UpdatesFriendsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.UpdatesFriendsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.UpdatesFriendsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.UpdatesFriendsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendApplication.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendApplication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendApplication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplication.toObject = function(includeInstance, msg) {
  var f, obj = {
addtime: jspb.Message.getFieldWithDefault(msg, 1, 0),
addsource: jspb.Message.getFieldWithDefault(msg, 2, ""),
addwording: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendApplication}
 */
proto.openim.sdk.relation.FriendApplication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendApplication;
  return proto.openim.sdk.relation.FriendApplication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendApplication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendApplication}
 */
proto.openim.sdk.relation.FriendApplication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddtime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddsource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddwording(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendApplication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendApplication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendApplication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddtime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAddsource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddwording();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 addTime = 1;
 * @return {number}
 */
proto.openim.sdk.relation.FriendApplication.prototype.getAddtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendApplication} returns this
 */
proto.openim.sdk.relation.FriendApplication.prototype.setAddtime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string addSource = 2;
 * @return {string}
 */
proto.openim.sdk.relation.FriendApplication.prototype.getAddsource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendApplication} returns this
 */
proto.openim.sdk.relation.FriendApplication.prototype.setAddsource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string addWording = 3;
 * @return {string}
 */
proto.openim.sdk.relation.FriendApplication.prototype.getAddwording = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendApplication} returns this
 */
proto.openim.sdk.relation.FriendApplication.prototype.setAddwording = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FromToUserID.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FromToUserID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FromToUserID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FromToUserID.toObject = function(includeInstance, msg) {
  var f, obj = {
fromuserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
touserid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.FromToUserID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FromToUserID;
  return proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FromToUserID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromuserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTouserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FromToUserID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FromToUserID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromuserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTouserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string fromUserID = 1;
 * @return {string}
 */
proto.openim.sdk.relation.FromToUserID.prototype.getFromuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FromToUserID} returns this
 */
proto.openim.sdk.relation.FromToUserID.prototype.setFromuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string toUserID = 2;
 * @return {string}
 */
proto.openim.sdk.relation.FromToUserID.prototype.getTouserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FromToUserID} returns this
 */
proto.openim.sdk.relation.FromToUserID.prototype.setTouserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendApplicationTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendApplicationTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendApplicationTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplicationTips.toObject = function(includeInstance, msg) {
  var f, obj = {
fromtouserid: (f = msg.getFromtouserid()) && proto.openim.sdk.relation.FromToUserID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendApplicationTips}
 */
proto.openim.sdk.relation.FriendApplicationTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendApplicationTips;
  return proto.openim.sdk.relation.FriendApplicationTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendApplicationTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendApplicationTips}
 */
proto.openim.sdk.relation.FriendApplicationTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FromToUserID;
      reader.readMessage(value,proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader);
      msg.setFromtouserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendApplicationTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendApplicationTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendApplicationTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplicationTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtouserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter
    );
  }
};


/**
 * optional FromToUserID fromToUserID = 1;
 * @return {?proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.FriendApplicationTips.prototype.getFromtouserid = function() {
  return /** @type{?proto.openim.sdk.relation.FromToUserID} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FromToUserID, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FromToUserID|undefined} value
 * @return {!proto.openim.sdk.relation.FriendApplicationTips} returns this
*/
proto.openim.sdk.relation.FriendApplicationTips.prototype.setFromtouserid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.FriendApplicationTips} returns this
 */
proto.openim.sdk.relation.FriendApplicationTips.prototype.clearFromtouserid = function() {
  return this.setFromtouserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendApplicationTips.prototype.hasFromtouserid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendApplicationApprovedTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendApplicationApprovedTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.toObject = function(includeInstance, msg) {
  var f, obj = {
fromtouserid: (f = msg.getFromtouserid()) && proto.openim.sdk.relation.FromToUserID.toObject(includeInstance, f),
handlemsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
friendversion: jspb.Message.getFieldWithDefault(msg, 3, 0),
friendversionid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendApplicationApprovedTips}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendApplicationApprovedTips;
  return proto.openim.sdk.relation.FriendApplicationApprovedTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendApplicationApprovedTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendApplicationApprovedTips}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FromToUserID;
      reader.readMessage(value,proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader);
      msg.setFromtouserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandlemsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFriendversion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendversionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendApplicationApprovedTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendApplicationApprovedTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtouserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter
    );
  }
  f = message.getHandlemsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFriendversion();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getFriendversionid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional FromToUserID fromToUserID = 1;
 * @return {?proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.getFromtouserid = function() {
  return /** @type{?proto.openim.sdk.relation.FromToUserID} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FromToUserID, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FromToUserID|undefined} value
 * @return {!proto.openim.sdk.relation.FriendApplicationApprovedTips} returns this
*/
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.setFromtouserid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.FriendApplicationApprovedTips} returns this
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.clearFromtouserid = function() {
  return this.setFromtouserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.hasFromtouserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string handleMsg = 2;
 * @return {string}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.getHandlemsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendApplicationApprovedTips} returns this
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.setHandlemsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 friendVersion = 3;
 * @return {number}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.getFriendversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendApplicationApprovedTips} returns this
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.setFriendversion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string friendVersionID = 4;
 * @return {string}
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.getFriendversionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendApplicationApprovedTips} returns this
 */
proto.openim.sdk.relation.FriendApplicationApprovedTips.prototype.setFriendversionid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendApplicationRejectedTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendApplicationRejectedTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.toObject = function(includeInstance, msg) {
  var f, obj = {
fromtouserid: (f = msg.getFromtouserid()) && proto.openim.sdk.relation.FromToUserID.toObject(includeInstance, f),
handlemsg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendApplicationRejectedTips}
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendApplicationRejectedTips;
  return proto.openim.sdk.relation.FriendApplicationRejectedTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendApplicationRejectedTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendApplicationRejectedTips}
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FromToUserID;
      reader.readMessage(value,proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader);
      msg.setFromtouserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandlemsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendApplicationRejectedTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendApplicationRejectedTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtouserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter
    );
  }
  f = message.getHandlemsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional FromToUserID fromToUserID = 1;
 * @return {?proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.getFromtouserid = function() {
  return /** @type{?proto.openim.sdk.relation.FromToUserID} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FromToUserID, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FromToUserID|undefined} value
 * @return {!proto.openim.sdk.relation.FriendApplicationRejectedTips} returns this
*/
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.setFromtouserid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.FriendApplicationRejectedTips} returns this
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.clearFromtouserid = function() {
  return this.setFromtouserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.hasFromtouserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string handleMsg = 2;
 * @return {string}
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.getHandlemsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendApplicationRejectedTips} returns this
 */
proto.openim.sdk.relation.FriendApplicationRejectedTips.prototype.setHandlemsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendAddedTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendAddedTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendAddedTips.toObject = function(includeInstance, msg) {
  var f, obj = {
friend: (f = msg.getFriend()) && proto.openim.sdk.relation.FriendInfo.toObject(includeInstance, f),
operationtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
opuser: (f = msg.getOpuser()) && user_pb.UserInfo.toObject(includeInstance, f),
friendversion: jspb.Message.getFieldWithDefault(msg, 4, 0),
friendversionid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendAddedTips}
 */
proto.openim.sdk.relation.FriendAddedTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendAddedTips;
  return proto.openim.sdk.relation.FriendAddedTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendAddedTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendAddedTips}
 */
proto.openim.sdk.relation.FriendAddedTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FriendInfo;
      reader.readMessage(value,proto.openim.sdk.relation.FriendInfo.deserializeBinaryFromReader);
      msg.setFriend(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOperationtime(value);
      break;
    case 3:
      var value = new user_pb.UserInfo;
      reader.readMessage(value,user_pb.UserInfo.deserializeBinaryFromReader);
      msg.setOpuser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFriendversion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendversionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendAddedTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendAddedTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendAddedTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FriendInfo.serializeBinaryToWriter
    );
  }
  f = message.getOperationtime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getOpuser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      user_pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getFriendversion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFriendversionid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional FriendInfo friend = 1;
 * @return {?proto.openim.sdk.relation.FriendInfo}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.getFriend = function() {
  return /** @type{?proto.openim.sdk.relation.FriendInfo} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FriendInfo, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FriendInfo|undefined} value
 * @return {!proto.openim.sdk.relation.FriendAddedTips} returns this
*/
proto.openim.sdk.relation.FriendAddedTips.prototype.setFriend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.FriendAddedTips} returns this
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.clearFriend = function() {
  return this.setFriend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.hasFriend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 operationTime = 2;
 * @return {number}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.getOperationtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendAddedTips} returns this
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.setOperationtime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional openim.sdk.user.UserInfo opUser = 3;
 * @return {?proto.openim.sdk.user.UserInfo}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.getOpuser = function() {
  return /** @type{?proto.openim.sdk.user.UserInfo} */ (
    jspb.Message.getWrapperField(this, user_pb.UserInfo, 3));
};


/**
 * @param {?proto.openim.sdk.user.UserInfo|undefined} value
 * @return {!proto.openim.sdk.relation.FriendAddedTips} returns this
*/
proto.openim.sdk.relation.FriendAddedTips.prototype.setOpuser = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.FriendAddedTips} returns this
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.clearOpuser = function() {
  return this.setOpuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.hasOpuser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 friendVersion = 4;
 * @return {number}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.getFriendversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendAddedTips} returns this
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.setFriendversion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string friendVersionID = 5;
 * @return {string}
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.getFriendversionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendAddedTips} returns this
 */
proto.openim.sdk.relation.FriendAddedTips.prototype.setFriendversionid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendDeletedTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendDeletedTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendDeletedTips.toObject = function(includeInstance, msg) {
  var f, obj = {
fromtouserid: (f = msg.getFromtouserid()) && proto.openim.sdk.relation.FromToUserID.toObject(includeInstance, f),
friendversion: jspb.Message.getFieldWithDefault(msg, 2, 0),
friendversionid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendDeletedTips}
 */
proto.openim.sdk.relation.FriendDeletedTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendDeletedTips;
  return proto.openim.sdk.relation.FriendDeletedTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendDeletedTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendDeletedTips}
 */
proto.openim.sdk.relation.FriendDeletedTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FromToUserID;
      reader.readMessage(value,proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader);
      msg.setFromtouserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFriendversion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendversionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendDeletedTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendDeletedTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendDeletedTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtouserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter
    );
  }
  f = message.getFriendversion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFriendversionid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional FromToUserID fromToUserID = 1;
 * @return {?proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.getFromtouserid = function() {
  return /** @type{?proto.openim.sdk.relation.FromToUserID} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FromToUserID, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FromToUserID|undefined} value
 * @return {!proto.openim.sdk.relation.FriendDeletedTips} returns this
*/
proto.openim.sdk.relation.FriendDeletedTips.prototype.setFromtouserid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.FriendDeletedTips} returns this
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.clearFromtouserid = function() {
  return this.setFromtouserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.hasFromtouserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 friendVersion = 2;
 * @return {number}
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.getFriendversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendDeletedTips} returns this
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.setFriendversion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string friendVersionID = 3;
 * @return {string}
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.getFriendversionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendDeletedTips} returns this
 */
proto.openim.sdk.relation.FriendDeletedTips.prototype.setFriendversionid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.BlackAddedTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.BlackAddedTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.BlackAddedTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.BlackAddedTips.toObject = function(includeInstance, msg) {
  var f, obj = {
fromtouserid: (f = msg.getFromtouserid()) && proto.openim.sdk.relation.FromToUserID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.BlackAddedTips}
 */
proto.openim.sdk.relation.BlackAddedTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.BlackAddedTips;
  return proto.openim.sdk.relation.BlackAddedTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.BlackAddedTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.BlackAddedTips}
 */
proto.openim.sdk.relation.BlackAddedTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FromToUserID;
      reader.readMessage(value,proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader);
      msg.setFromtouserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.BlackAddedTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.BlackAddedTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.BlackAddedTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.BlackAddedTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtouserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter
    );
  }
};


/**
 * optional FromToUserID fromToUserID = 1;
 * @return {?proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.BlackAddedTips.prototype.getFromtouserid = function() {
  return /** @type{?proto.openim.sdk.relation.FromToUserID} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FromToUserID, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FromToUserID|undefined} value
 * @return {!proto.openim.sdk.relation.BlackAddedTips} returns this
*/
proto.openim.sdk.relation.BlackAddedTips.prototype.setFromtouserid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.BlackAddedTips} returns this
 */
proto.openim.sdk.relation.BlackAddedTips.prototype.clearFromtouserid = function() {
  return this.setFromtouserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.BlackAddedTips.prototype.hasFromtouserid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.BlackDeletedTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.BlackDeletedTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.BlackDeletedTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.BlackDeletedTips.toObject = function(includeInstance, msg) {
  var f, obj = {
fromtouserid: (f = msg.getFromtouserid()) && proto.openim.sdk.relation.FromToUserID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.BlackDeletedTips}
 */
proto.openim.sdk.relation.BlackDeletedTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.BlackDeletedTips;
  return proto.openim.sdk.relation.BlackDeletedTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.BlackDeletedTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.BlackDeletedTips}
 */
proto.openim.sdk.relation.BlackDeletedTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FromToUserID;
      reader.readMessage(value,proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader);
      msg.setFromtouserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.BlackDeletedTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.BlackDeletedTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.BlackDeletedTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.BlackDeletedTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtouserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter
    );
  }
};


/**
 * optional FromToUserID fromToUserID = 1;
 * @return {?proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.BlackDeletedTips.prototype.getFromtouserid = function() {
  return /** @type{?proto.openim.sdk.relation.FromToUserID} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FromToUserID, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FromToUserID|undefined} value
 * @return {!proto.openim.sdk.relation.BlackDeletedTips} returns this
*/
proto.openim.sdk.relation.BlackDeletedTips.prototype.setFromtouserid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.BlackDeletedTips} returns this
 */
proto.openim.sdk.relation.BlackDeletedTips.prototype.clearFromtouserid = function() {
  return this.setFromtouserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.BlackDeletedTips.prototype.hasFromtouserid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.toObject = function(opt_includeInstance) {
  return proto.openim.sdk.relation.FriendInfoChangedTips.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openim.sdk.relation.FriendInfoChangedTips} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendInfoChangedTips.toObject = function(includeInstance, msg) {
  var f, obj = {
fromtouserid: (f = msg.getFromtouserid()) && proto.openim.sdk.relation.FromToUserID.toObject(includeInstance, f),
friendversion: jspb.Message.getFieldWithDefault(msg, 2, 0),
friendversionid: jspb.Message.getFieldWithDefault(msg, 3, ""),
friendsortversion: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openim.sdk.relation.FriendInfoChangedTips}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openim.sdk.relation.FriendInfoChangedTips;
  return proto.openim.sdk.relation.FriendInfoChangedTips.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openim.sdk.relation.FriendInfoChangedTips} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openim.sdk.relation.FriendInfoChangedTips}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openim.sdk.relation.FromToUserID;
      reader.readMessage(value,proto.openim.sdk.relation.FromToUserID.deserializeBinaryFromReader);
      msg.setFromtouserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFriendversion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFriendversionid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFriendsortversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openim.sdk.relation.FriendInfoChangedTips.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openim.sdk.relation.FriendInfoChangedTips} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openim.sdk.relation.FriendInfoChangedTips.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromtouserid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openim.sdk.relation.FromToUserID.serializeBinaryToWriter
    );
  }
  f = message.getFriendversion();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFriendversionid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFriendsortversion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional FromToUserID fromToUserID = 1;
 * @return {?proto.openim.sdk.relation.FromToUserID}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.getFromtouserid = function() {
  return /** @type{?proto.openim.sdk.relation.FromToUserID} */ (
    jspb.Message.getWrapperField(this, proto.openim.sdk.relation.FromToUserID, 1));
};


/**
 * @param {?proto.openim.sdk.relation.FromToUserID|undefined} value
 * @return {!proto.openim.sdk.relation.FriendInfoChangedTips} returns this
*/
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.setFromtouserid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openim.sdk.relation.FriendInfoChangedTips} returns this
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.clearFromtouserid = function() {
  return this.setFromtouserid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.hasFromtouserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 friendVersion = 2;
 * @return {number}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.getFriendversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendInfoChangedTips} returns this
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.setFriendversion = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string friendVersionID = 3;
 * @return {string}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.getFriendversionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openim.sdk.relation.FriendInfoChangedTips} returns this
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.setFriendversionid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 friendSortVersion = 4;
 * @return {number}
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.getFriendsortversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.openim.sdk.relation.FriendInfoChangedTips} returns this
 */
proto.openim.sdk.relation.FriendInfoChangedTips.prototype.setFriendsortversion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.openim.sdk.relation.Relationship = {
  BLACK: 0,
  FRIEND: 1
};

goog.object.extend(exports, proto.openim.sdk.relation);
