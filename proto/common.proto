syntax = "proto3";
package openim.sdk.common;

option csharp_namespace = "OpenIM.Proto";
option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/common";
option swift_prefix = "";

enum SessionType {
  SessionType_ = 0;

  // Single represents a single chat session type.
  Single = 1;
  // WriteGroup represents a write-diffusion group chat session type (not currently enabled, can be ignored).
  WriteGroup = 2;
  // ReadGroup represents a read-diffusion group chat session type, used for all current group chats in OpenIM.
  ReadGroup = 3;
  // Notification represents a notification session type, generated by the client when the server sends a notification.
  Notification = 4;
}

enum MsgFrom {
  MsgFrom_ = 0;
  // User represents a message type originating from a user.
  User = 100;
  // System represents a system message type, typically generated by the system.
  System = 200;
}

enum Platform {
  Platform_ = 0;
  // iOS represents the Apple iOS platform.
  iOS = 1;
  // Android represents the Android platform.
  Android = 2;
  // Windows represents the Microsoft Windows platform.
  Windows = 3;
  // macOS represents the Apple macOS platform.
  macOS = 4;
  // Web represents the web browser platform.
  Web = 5;
  // MiniWeb represents the mini-program or mini-web platform.
  MiniWeb = 6;
  // Linux represents the Linux platform.
  Linux = 7;
  // AndroidPad represents the Android tablet platform.
  AndroidPad = 8;
  // iPad represents the Apple iPad platform.
  iPad = 9;
  // Admin represents the admin panel or management platform, typically used for backend administrators.
  // This platform is specifically for administrative filling and can generally be ignored.
  Admin = 10;
  // HarmonyOS represents the Huawei HarmonyOS platform.
  HarmonyOS = 11;
}

enum AppFramework {
  AppFramework_ = 0;
  // Native.
  Native = 1;
  // Flutter.
  Flutter = 2;
  // ReactNative.
  ReactNative = 3;
  // Electron.
  Electron = 4;
  // Unity.
  Unity = 5;
  // UnrealEngine.
  UnrealEngine = 6;
  // QT.
  Qt = 7;
  // .NET
  DotNet = 8;
  // .NET MAUI
  DotNetMAUI = 9;
  // Avalonia
  Avalonia = 10;
  // Cordova
  Cordova = 11;
  // UniApp
  UniApp = 12;
}
enum MsgStatus {
  MsgStatus_ = 0;
  // Message Sending.
  Sending = 1;
  // Message sent successfully.
  SendSuccess = 2;
  // Message send failed.
  SendFailed = 3;
  // Message has been deleted.
  HasDeleted = 4;
  // Message has been filtered.
  Filtered = 5;
}
enum ContentType {
  ContentType_ = 0;
  // Text message
  Text = 101;
  // Picture message
  Picture = 102;
  // Sound message
  Sound = 103;
  // Video message
  Video = 104;
  // File message
  File = 105;
  // At message
  AtText = 106;
  // Merge message
  Merge = 107;
  // Business card message
  Card = 108;
  // Location message
  Location = 109;
  // Custom message
  Custom = 110;
  // input status
  Typing = 113;
  // Quote message
  Quote = 114;
  // Face message
  Face = 115;
  // Stream message
  Stream = 116;
  // Advanced text message
  AdvancedText = 117;
  CustomMsgNotTriggerConversation = 119;
  CustomMsgOnlineOnly = 120;

  // Friend request approved notification
  FriendApplicationApprovedNotification = 1201;
  // OA system notification
  OANotification = 1400;
  // Group created notification
  GroupCreatedNotification = 1501;
  // Group member quit notification
  MemberQuitNotification = 1504;
  // Group owner transfer notification
  GroupOwnerTransferredNotification = 1507;
  // Group member kicked notification
  MemberKickedNotification = 1508;
  // Group member invited notification
  MemberInvitedNotification = 1509;
  // Group member joined notification
  MemberEnterNotification = 1510;
  // Group dismissed notification
  GroupDismissedNotification = 1511;
  // Group member muted notification
  GroupMemberMutedNotification = 1512;
  // Group member unmuted notification
  GroupMemberCancelMutedNotification = 1513;
  // Group muted notification
  GroupMutedNotification = 1514;
  // Group unmuted notification
  GroupCancelMutedNotification = 1515;
  // Group announcement update notification
  GroupInfoSetAnnouncementNotification = 1519;
  // Group name update notification
  GroupInfoSetNameNotification = 1520;
  // Conversation private chat status change notification message
  ConversationPrivateChatNotification = 1701;
  // Custom notification
  BusinessNotification = 2001;
  // Revoked message notification.
  RevokedNotification = 2101;
}

message OfflinePushInfo {
  // Offline push title
  string title = 1;
  // Offline push description
  string desc = 2;
  // Offline push extension field
  string ex = 3;
  // iOS offline push sound
  string iOSPushSound = 4;
  // iOS offline push badge count
  bool iOSBadgeCount = 5;
  // signal info
  string signalInfo = 6;
}

enum ApprovalStatus {
  // Reserved field
  Default = 0;
  // Approved request
  Approved = 1;
  // Rejected request
  Rejected = -1;
}

message RequestPagination {
  // Page number
  int32 pageNumber = 1;
  // request number sum
  int32 showNumber = 2;
}

/**
 * In the recvMsgOpt of a ConversationInfo, in addition to controlling whether to receive offline push notifications for that session,
 * it also controls whether the unread count of that session is included in the total unread count.
 */
enum ConvRecvMsgOpt {
  // Normally receive messages
  ReceiveMessage = 0;
  // Reserved field
  NotReceiveMessage = 1;
  // Receive messages, but no offline push. When in conversation, this conversation's unread count is not included in the total unread count
  ReceiveNotNotifyMessage = 2;
}

enum ConvGroupAtType {
  // Normal at.
  AtNormal = 0;
  // At me.
  AtMe = 1;
  // At all.
  AtAll = 2;
  // At all and at me.
  AtAllAtMe = 3;
  // Group announcement.
  GroupNotification = 4;
}

/**
 * GlobalRecvMsgOpt represents the global message receive option.
 * In the globalRecvMsgOpt of UserInfo, globally control whether to receive offline push notifications.
 */
enum GlobalRecvMsgOpt {
  // Normally receive messages
  Normal = 0;
  // Reserved field
  NotReceive = 1;
  // Receive messages, but no offline push.
  NotNotify = 2;
}

/**
 * LogLevel represents the log level. debug -> info -> warn -> error -> fatal.
 * Default log level is LevelWarn or LevelDebug.
 */
enum LogLevel {
  // only print fatal log
  LevelFatal = 0;
  // print panic and fatal log
  LevelPanic = 1;
  // print error, panic and fatal log
  LevelError = 2;
  // print warn, error, panic and fatal log
  LevelWarn = 3;
  // print info, warn, error, panic and fatal log
  LevelInfo = 4;
  // print all level log
  LevelDebug = 5;
  // print all level log and sql log
  LevelDebugWithSQL = 6;
}

/**
 * UploadSDKDataMode represents the mode of upload sdk data.
 * If multiple modes are needed, their values should be ModeA | ModeB
 * e.g. UploadLogsAndDB = UploadLogs | UploadDB
 */
enum UploadSDKDataMode {
  // invalid mode. Because the first enum value must be 0 in proto3, this field is required.
  UploadSDKDataMode_ = 0;
  // only upload logs
  UploadLogs = 1;
  // only upload db
  UploadDB = 2;
  // upload db and logs
  UploadLogsAndDB = 3;
  // if other modes are added, their enum values should be 4, followed by 8, and so on.
  // ModeC = 4;
}

enum RevokerRole {
  RevokerRole_ = 0;
  // Owner revokes the message.
  RevokerRoleOwner = 100;
  // Admin revokes the message.
  RevokerRoleAdmin = 60;
  // Member self revokes the message.
  RevokerRoleMember = 20;
}

enum FriendSource {
  FriendSource_ = 0;
  // Join friend by search.
  Search = 3;
  // Join friend by scan QR code.
  QRCode = 4;
}

enum HandleResult {
  // wait request handle.
  ResultDefault = 0;
  // decline the request.
  ResultDecline = -1;
  // accept the request.
  ResultAccept = 1;
}

enum GroupMemberRoleLevel {
  // Reserved field
  GroupRoleLevel_ = 0;
  // Group owner
  GroupOwner = 100;
  // Group admin
  GroupAdmin = 60;
  // Group ordinary user
  GroupOrdinaryUsers = 20;
}
