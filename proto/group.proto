syntax = "proto3";
package openim.sdk.group;

option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/group";
option csharp_namespace = "OpenIM.Proto";
option swift_prefix="";

import "common.proto";
import "shared.proto";

message CreateGroupReq {
  // @opt @group_id
  string groupID = 1;
  // @group_name
  string groupName = 2;
  // @opt @group_notification
  string notification = 3;
  // @opt @group_introduction
  string introduction = 4;
  // @opt @group_face_url
  string faceURL = 5;
  // @opt @group_ex
  string ex = 6;
  // @opt @group_need_verification
  shared.GroupNeedVerification needVerification = 7;
  // @opt @group_look_member_info
  shared.GroupLookMemberInfo lookMemberInfo = 8;
  // @opt @group_apply_member_friend
  shared.GroupApplyMemberFriend applyMemberFriend = 9;
  // @opt @group_notification_update_time
  int64 notificationUpdateTime = 10;
  // @opt @group_notification_user_id
  string notificationUserID = 11;
  // @opt @group_attached_info
  string attachedInfo = 12;
  // @opt list of users invited as administrators
  repeated string adminUserIDs = 13;
  // @opt list of invited group members
  repeated string memberUserIDs = 14;
}
message CreateGroupResp {
  // Basic group chat information
  shared.IMGroup groupInfo = 1;
}

message JoinGroupReq {
  // group id you joined
  string groupID = 1;
  // request message
  string reqMessage = 2;
  // join source
  shared.GroupJoinSource joinSource = 3;
  // extension field
  string ex = 4;
}
message JoinGroupResp {}

message QuitGroupReq {
  string groupID = 1;// group id you quit
}
message QuitGroupResp {}

message DismissGroupReq {
  string groupID = 1;// group id you dismissed
}
message DismissGroupResp {}

message ChangeGroupMuteReq {
  string groupID = 1;// group id you want to mute
  bool mute = 2;// mute or cancel mute
}
message ChangeGroupMuteResp {}

message ChangeGroupMemberMuteReq {
  string groupID = 1;// group id you want to mute
  string userID = 2;// user id you want to mute
  uint32 mutedSeconds = 3;// mute time (unit: seconds), 0 cancels the mute
}
message ChangeGroupMemberMuteResp {}

message TransferGroupOwnerReq {
  string groupID = 1;// group id you want to transfer
  string ownerUserID = 2;// new owner user id
}
message TransferGroupOwnerResp {}

message KickGroupMemberReq {
  string groupID = 1;// group id you want to kick
  repeated string kickedUserIDs = 2;// user id you want to kick
  string reason = 3;// kick reason
}
message KickGroupMemberResp {}

message SetGroupInfoReq {
  // @group_id
  string groupID = 1;
  // @opt @group_name
  optional string groupName = 2;
  // @opt @group_notification
  optional string notification = 3;
  // @opt @group_introduction
  optional string introduction = 4;
  // @opt @group_face_url
  optional string faceURL = 5;
  // @opt @group_ex
  optional string ex = 6;
  // @opt @group_need_verification
  optional shared.GroupNeedVerification needVerification = 7;
  // @opt @group_look_member_info
  optional shared.GroupLookMemberInfo lookMemberInfo = 8;
  // @opt @group_apply_member_friend
  optional shared.GroupApplyMemberFriend applyMemberFriend = 9;
}
message SetGroupInfoResp {}

message SetGroupMemberInfoReq {
  string groupID = 1;// group id you want to set
  // @opt @group_user_id
  string userID = 2;
  optional string nickname = 3;// user nickname
  optional string faceURL = 4;// user face url
  optional common.GroupMemberRoleLevel roleLevel = 5;// user role level
  optional string ex = 6;// extension field
}
message SetGroupMemberInfoResp {}

message GetJoinedGroupsReq {}
message GetJoinedGroupsResp {
  repeated shared.IMGroup groups = 1;// group information
}

message GetJoinedGroupsPageReq {
  openim.sdk.common.RequestPagination pagination = 2;// pagination
}
message GetJoinedGroupsPageResp {
  repeated shared.IMGroup groups = 1;// group information
}

message GetSpecifiedGroupsInfoReq {
  repeated string groupIDs = 1;// group id you want to get
}
message GetSpecifiedGroupsInfoResp {
  repeated shared.IMGroup groups = 1;// group information
}

message SearchGroupsReq {
  string keyword = 1;// search keyword
  bool searchGroupID = 2;// search group id
  bool searchGroupName = 3;// search group name
}
message SearchGroupsResp {
  repeated shared.IMGroup groups = 1;// group information
}

message GetGroupMemberOwnerAndAdminReq {
  string groupID = 1;// group id you want to get
}
message GetGroupMemberOwnerAndAdminResp {
  repeated shared.IMGroupMember members = 1;// group member information
}

message GetGroupMembersByJoinTimeFilterReq {
  string groupID = 1;// group id you want to get
  int64 joinTimeBegin = 2;// join time start
  int64 joinTimeEnd = 3;// join time end
  openim.sdk.common.RequestPagination pagination = 4;// pagination
}
message GetGroupMembersByJoinTimeFilterResp {
  repeated shared.IMGroupMember members = 1;// group member information
}

message GetSpecifiedGroupMembersInfoReq {
  string groupID = 1;// group id you want to get
  repeated string userIDs = 2;// user id you want to get
}
message GetSpecifiedGroupMembersInfoResp {
  repeated shared.IMGroupMember members = 1;// group member information
}

enum GroupMemberFilter {
  All = 0;// all users
  Owner = 1;// owner users
  Admin = 2;// admin users
  OrdinaryUsers = 3;// ordinary users
  AdminAndOrdinaryUsers = 4;// admin and ordinary users
  OwnerAndAdmin = 5;// owner and admin users
}
message GetGroupMembersReq {
  string groupID = 1;// group id you want to get
  GroupMemberFilter filter = 2;// filter
  openim.sdk.common.RequestPagination pagination = 4;// pagination
}
message GetGroupMembersResp {
  repeated shared.IMGroupMember members = 1;// group member information
}

message GetGroupApplicationReq {
  bool send = 1;// is it the request i sent
}
message GetGroupApplicationResp {
  repeated shared.IMGroupApplication applications = 1;// group request information
}

message SearchGroupMembersReq {
  string groupID = 1;// group id you want to search
  string keyword = 2;// search keyword
  bool searchUserID = 3;// search user id
  bool searchMemberNickname = 4;// search user nickname
  openim.sdk.common.RequestPagination pagination = 5;// pagination
}
message SearchGroupMembersResp {
  repeated shared.IMGroupMember members = 1;// group member information
}

message IsJoinGroupReq {
  string groupID = 1;// group id you want to check
  string userID = 2;// user id you want to check
}
message IsJoinGroupResp {
  bool joined = 1;// whether to join the group
}

message GetUsersInGroupReq {
  string groupID = 1;// group id you want to get
  repeated string userIDs = 2;// user id you want to get
}
message GetUsersInGroupResp {
  repeated string userIDs = 1;// user id in the group
}

message InviteUserToGroupReq {
  string groupID = 1;// group id you want to invite
  repeated string userIDs = 2;// user id you want to invite
  string reason = 3;// invite reason
}
message InviteUserToGroupResp {}

message HandleGroupApplicationReq {
  /**
   * group id you want to handle1<br>
   * group id you want to handle2<br>
   * group id you want to handle3<br>
   * group id you want to handle4<br>
   */
  string groupID = 1;
  // user id you want to handle
  string fromUserID = 2;
  // request message
  string handledMsg = 3;
  // approval status
  openim.sdk.common.ApprovalStatus status = 4;
}
message HandleGroupApplicationResp {}

service group {
  /**
  * The group creator assigns roles and adds members
  * 1. The creator establishes a group as the group owner, specifying group administrators and ordinary group members. Once successful, all roles immediately join the group.
  * 2. It's recommended that the number of group members does not exceed 1000 at a time, as larger numbers may result in data packets being rejected by the backend due to their size.
  * If a groupID is specified, it cannot be duplicated.
  * If no groupID is specified, the server will generate a unique groupID.
  */
  rpc CreateGroup(CreateGroupReq) returns (CreateGroupResp);
  /**
   * Apply to join a group
   * Apply to join the group. If you are allowed to join directly, you can directly enter the group chat. Otherwise, send a request to join the group, which requires the approval of the group administrator or group owner.
   */
  rpc JoinGroup(JoinGroupReq) returns (JoinGroupResp);
  /**
   * Leave the group
   * Administrators and ordinary members can log out directly, but group owners cannot log out.
   */
  rpc QuitGroup(QuitGroupReq) returns (QuitGroupResp);
  /**
   * Disband the group
   * The group status field will be set to "disbanded" in the background. When group members fetch the list of groups they've joined, this group will no longer be returned.
   */
  rpc DismissGroup(DismissGroupReq) returns (DismissGroupResp);
  /**
   * The group owner or group admin changes the mute status of the group.
   * After being muted, regular members cannot send messages, but the group owner and admins can continue to send messages.
   */
  rpc ChangeGroupMute(ChangeGroupMuteReq) returns (ChangeGroupMuteResp);
  /**
   * The group owner or group administrators can change the mute status of group members.
   * A group owner can mute both administrators and regular members, while an administrator can only mute regular members.
   */
  rpc ChangeGroupMemberMute(ChangeGroupMemberMuteReq) returns (ChangeGroupMemberMuteResp);
  /**
   * Transfer the group owner status.
   * Transfer group owner, can only be called by group owner.
   */
  rpc TransferGroupOwner(TransferGroupOwnerReq) returns (TransferGroupOwnerResp);
  /**
   * Remove a member from a group.
   * The group owner and group administrators can remove group members.
   */
  rpc KickGroupMember(KickGroupMemberReq) returns (KickGroupMemberResp);
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc SetGroupInfo(SetGroupInfoReq) returns (SetGroupInfoResp);
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc SetGroupMemberInfo(SetGroupMemberInfoReq) returns (SetGroupMemberInfoResp);
  /**
   * Fetch the list of groups you've joined.
   * Get joined group chat information.
   */
  rpc GetJoinedGroups(GetJoinedGroupsReq) returns (GetJoinedGroupsResp);
  /**
   * Split fetch the list of groups you've joined.
   * Get joined group chat information.
   */
  rpc GetJoinedGroupsPage(GetJoinedGroupsPageReq) returns (GetJoinedGroupsPageResp);
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc GetSpecifiedGroupsInfo(GetSpecifiedGroupsInfoReq) returns (GetSpecifiedGroupsInfoResp);
  // todo
  /**
   * Search for joined groups using keyword
   * The list of groups is recommended to have a maximum of 100 at a time.
   */
  rpc SearchGroups(SearchGroupsReq) returns (SearchGroupsResp);
  // todo
  /**
   * Search for joined groups using keyword
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc GetGroupMemberOwnerAndAdmin(GetGroupMemberOwnerAndAdminReq) returns (GetGroupMemberOwnerAndAdminResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc GetGroupMembersByJoinTimeFilter(GetGroupMembersByJoinTimeFilterReq) returns (GetGroupMembersByJoinTimeFilterResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc GetSpecifiedGroupMembersInfo(GetSpecifiedGroupMembersInfoReq) returns (GetSpecifiedGroupMembersInfoResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc GetGroupMembers(GetGroupMembersReq) returns (GetGroupMembersResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc GetGroupRequest(GetGroupApplicationReq) returns (GetGroupApplicationResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc SearchGroupMembers(SearchGroupMembersReq) returns (SearchGroupMembersResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc IsJoinGroup(IsJoinGroupReq) returns (IsJoinGroupResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc GetUsersInGroup(GetUsersInGroupReq) returns (GetUsersInGroupResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc InviteUserToGroup(InviteUserToGroupReq) returns (InviteUserToGroupResp);
  // todo
  /**
   * Set group information
   * Set group information, including group avatar, name, announcement, introduction, extended fields, etc. Only administrators and group owners have permission to set.
   */
  rpc HandleGroupRequest(HandleGroupApplicationReq) returns (HandleGroupApplicationResp);
}
