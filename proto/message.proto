syntax = "proto3";
package openim.sdk.message;

import "common.proto";
import "shared.proto";

option csharp_namespace = "OpenIM.Proto";
option go_package = "github.com/openimsdk/openim-sdk-core/v3/proto/go/message";
option swift_prefix = "";

enum KeywordListMatchType {
  // Keyword match OR
  KeywordMatchOr = 0;
  // Keyword match AND
  KeywordMatchAnd = 1;
}
message SendMessageReq {
  // @shared_immessage
  shared.IMMessage message = 1;
  // @message_recv_id
  string recvID = 2;
  // @group_id
  string groupID = 3;
  // is online only
  bool isOnlineOnly = 5;
}
message SendMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message GetHistoryMessageListReq {
  // @conversation_id
  string conversationID = 1;
  // start client message id
  string startClientMsgID = 2;
  // history message count
  int32 count = 3;
  // is reverse order
  bool isReverse = 4;
}
message GetHistoryMessageListResp {
  // @shared_immessages
  repeated shared.IMMessage messageList = 1;
  // is end
  bool isEnd = 2;
  // error code
  int32 errCode = 3;
  // error message
  string errMsg = 4;
}

message RevokeMessageReq {
  // @conversation_id
  string conversationID = 1;
  // @message_client_msg_id
  string clientMsgID = 2;
}
message RevokeMessageResp {}

message TypingStatusUpdateReq {
  // @message_recv_id
  string recvID = 1;
  // input status
  string msgTip = 2;
}
message TypingStatusUpdateResp {}

message DeleteMessageReq {
  // @conversation_id
  string conversationID = 1;
  // @message_client_msg_id
  string clientMsgID = 2;
}
message DeleteMessageResp {}

message DeleteMessageFromLocalReq {
  // @conversation_id
  string conversationID = 1;
  // @message_client_msg_id
  string clientMsgID = 2;
}
message DeleteMessageFromLocalResp {}

message DeleteAllMsgFromLocalAndServerReq {}
message DeleteAllMsgFromLocalAndServerResp {}

message DeleteAllMessageFromLocalReq {}
message DeleteAllMessageFromLocalResp {}

message InsertSingleMessageToLocalReq {
  // @shared_immessage
  shared.IMMessage msg = 1;
  // @message_recv_id
  string recvID = 2;
  // @message_send_id
  string sendID = 3;
}
message InsertSingleMessageToLocalResp {
  // @shared_immessage
  shared.IMMessage msg = 1;
}

message InsertGroupMessageToLocalReq {
  // @shared_immessage
  shared.IMMessage msg = 1;
  // @group_id
  string groupID = 2;
  // @message_send_id
  string sendID = 3;
}
message InsertGroupMessageToLocalResp {
  // @shared_immessage
  shared.IMMessage msg = 1;
}

message CreateTextMessageReq {
  // text content
  string text = 1;
}
message CreateTextMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateAdvancedTextMessageReq {
  // advanced text content
  string text = 1;
  // message entity list
  repeated shared.MessageEntity messageEntities = 2;
}
message CreateAdvancedTextMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateTextAtMessageReq {
  // at text content
  string text = 1;
  // at user id list
  repeated string userIDList = 2;
  // at user info list
  repeated shared.AtInfo usersInfo = 3;
  // quote message
  shared.IMMessage quoteMessage = 4;
}
message CreateTextAtMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateLocationMessageReq {
  // location description
  string description = 1;
  // longitude
  double longitude = 2;
  // latitude
  double latitude = 3;
}
message CreateLocationMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateCustomMessageReq {
  // custom message data
  string data = 1;
  // custom message extension field
  string extension = 2;
  // custom message description
  string description = 3;
}
message CreateCustomMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateQuoteMessageReq {
  // quote text content
  string text = 1;
  // @shared_quote_message
  shared.IMMessage quoteMessage = 2;
}
message CreateQuoteMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateAdvancedQuoteMessageReq {
  // advanced quote text content
  string text = 1;
  // @shared_quote_message
  shared.IMMessage quoteMessage = 2;
  // message entity list
  repeated shared.MessageEntity messageEntities = 3;
}
message CreateAdvancedQuoteMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateCardMessageReq {
  // @user_id
  string userID = 1;
  // @user_nickname
  string nickname = 2;
  // @user_face_url
  string faceURL = 3;
  // @user_ex
  string ex = 4;
}
message CreateCardMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateImageMessageReq {
  // image source local path
  string sourcePath = 1;
  // @opt image big local path
  optional string bigPath = 2;
  // @opt image snapshot local path
  optional string snapshotPath = 3;
  // source picture info
  shared.PictureBaseInfo sourcePicture = 4;
  // big picture info
  shared.PictureBaseInfo bigPicture = 5;
  // snapshot picture info
  shared.PictureBaseInfo snapshotPicture = 6;
}
message CreateImageMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateSoundMessageReq {
  // sound source local path
  string soundPath = 1;
  // sound duration
  int64 duration = 2;
  // sound info
  shared.SoundBaseInfo soundElem = 3;
}
message CreateSoundMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateVideoMessageReq {
  // video source local path
  string videoSourcePath = 1;
  // video type
  string videoType = 2;
  // video duration
  int64 duration = 3;
  // snapshot source local path
  string snapshotSourcePath = 4;
  // video info
  shared.VideoBaseInfo videoElem = 5;
}
message CreateVideoMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateFileMessageReq {
  // file source local path
  string fileSourcePath = 1;
  // file name
  string fileName = 2;
  // file info
  shared.FileBaseInfo fileElem = 3;
}
message CreateFileMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateMergerMessageReq {
  // @shared_immessages
  repeated shared.IMMessage messages = 1;
  // merger title
  string title = 2;
  // merger summaries list
  repeated string summaries = 3;
}
message CreateMergerMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateFaceMessageReq {
  // face index
  int32 index = 1;
  // face data
  string data = 2;
}
message CreateFaceMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}

message CreateForwardMessageReq {
  // @shared_immessage
  shared.IMMessage message = 1;
}
message CreateForwardMessageResp {
  // @shared_immessage
  shared.IMMessage message = 1;
}
message ConversationArgs {
  // @conversation_id
  string conversationID = 1;
  // message client msg unique id list
  repeated string clientMsgIDList = 2;
}
message SearchByConversationResult {
  // @conversation_id
  string conversationID = 1;
  // @conversation_type
  int32 conversationType = 2;
  //
  string showName = 3;
  string faceURL = 4;
  int64 latestMsgSendTime = 5;
  // message count
  int32 messageCount = 6;
  // @shared_immessages
  repeated shared.IMMessage messageList = 7;
}

message FindMessageListReq {
  // conversation args
  repeated ConversationArgs conversationsArgs = 1;
}
message FindMessageListResp {
  // @conversation_Search_by_conversation_results
  repeated SearchByConversationResult findResultItems = 1;
  // total count
  int32 totalCount = 2;
}

message SearchLocalMessagesReq {
  // @conversation_id
  string conversationID = 1;
  repeated string keywords = 2;
  // keyword match type
  KeywordListMatchType keywordMatchType = 3;
  // sender user id list
  repeated string senderUserIDs = 4;
  // @common_content_types
  repeated common.ContentType messageTypes = 5;
  // search time position
  int64 searchTimePosition = 6;
  // search time period
  int64 searchTimePeriod = 7;
  // @common_request_pagination
  common.RequestPagination pagination = 8;
}
message SearchLocalMessagesResp {
  // total count
  int64 count = 1;
  // @conversation_Search_by_conversation_results
  repeated SearchByConversationResult searchResultItems = 2;
}
message SetMessageLocalExReq {
  // @conversation_id
  string conversationID = 1;
  // @conversation_client_msg_id
  string clientMsgID = 2;
  // local extension field
  string localEx = 3;
}
message SetMessageLocalExResp {
  // is success
  bool success = 1;
}

service MessageService {
  /**
   * Get history message in conversation. Such as sroll up to load history message.
   * Use `isReverse` to control the order of the message list.
   */
  rpc GetHistoryMessageList(GetHistoryMessageListReq) returns (GetHistoryMessageListResp);
  /**
   * Revoke a message. Support revoke self message, and group owner and group admin can revoke group member message.
   * Notice:
   * Original message will be transfer ContentType to 2101 when revoke message.
   * Related callbacks:
   * `onNewRecvMessageRevoked`
   * `onConversationChanged`
   * If revoke message is a latest message, the conversation last message will be update.
   */
  rpc RevokeMessage(RevokeMessageReq) returns (RevokeMessageResp);
  /**
   * Send typing status, the recipient will receive it only if they are online on IM.
   * Notice:
   * Related callbacks:
   * `onRecvNewMessage`
   * `onRecvNewMessages`
   */
  rpc TypingStatusUpdate(TypingStatusUpdateReq) returns (TypingStatusUpdateResp);
  /**
   * Delete a message from local and server.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   * If delete message is a latest message, the conversation last message will be update.
   */
  rpc DeleteMessage(DeleteMessageReq) returns (DeleteMessageResp);
  /**
   * Delete a message from local. The message will be retained when reinstall app.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   * If delete message is a latest message, the conversation last message will be update.
   */
  rpc DeleteMessageFromLocal(DeleteMessageFromLocalReq) returns (DeleteMessageFromLocalResp);
  /**
   * Delete all message from local and server. The conversation will still be retained.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   */
  rpc DeleteAllMsgFromLocalAndServer(DeleteAllMsgFromLocalAndServerReq) returns (DeleteAllMsgFromLocalAndServerResp);
  /**
   * Delete all message from all local conversation. The conversation will still be retained.
   * You still can get the message when reinstall the app.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   */
  rpc DeleteAllMessageFromLocal(DeleteAllMessageFromLocalReq) returns (DeleteAllMessageFromLocalResp);
  /**
   * Insert a single message to local. Only current device can see it.
   * Can't sync to other platforms.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   * Only current device can see it.
   */
  rpc InsertSingleMessageToLocal(InsertSingleMessageToLocalReq) returns (InsertSingleMessageToLocalResp);
  /**
   * Insert a group message to local. Only current device can see it.
   * Can't sync to other platforms.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   * Only current device can see it.
   */
  rpc InsertGroupMessageToLocal(InsertGroupMessageToLocalReq) returns (InsertGroupMessageToLocalResp);

  /**
   * create a text message.
   */
  rpc CreateTextMessage(CreateTextMessageReq) returns (CreateTextMessageResp);
  /**
   * create a text message with advanced features.
   */
  rpc CreateAdvancedTextMessage(CreateAdvancedTextMessageReq) returns (CreateAdvancedTextMessageResp);
  /**
   * create a At message.
   * Now only support 10 users in one message.
   * If you want to at all users, you need use a `AtAllTag` tag in userID field.
   * Meanwhile, if you need to at user and quote a message, you need to pass the referenced message as a parameter.
   */
  rpc CreateTextAtMessage(CreateTextAtMessageReq) returns (CreateTextAtMessageResp);
  /**
   * create a location message. Including longitude and latitude.
   * Notice:
   * The longitude and latitude need you get it.
   */
  rpc CreateLocationMessage(CreateLocationMessageReq) returns (CreateLocationMessageResp);
  /**
   * create a custom message.
   * All fields are you defination. SDK only send it.
   */
  rpc CreateCustomMessage(CreateCustomMessageReq) returns (CreateCustomMessageResp);
  /**
   * create a quote message.
   */
  rpc CreateQuoteMessage(CreateQuoteMessageReq) returns (CreateQuoteMessageResp);
  /**
   * create a advanced quote message.
   */
  rpc CreateAdvancedQuoteMessage(CreateAdvancedQuoteMessageReq) returns (CreateAdvancedQuoteMessageResp);
  /**
   * create a card message.
   */
  rpc CreateCardMessage(CreateCardMessageReq) returns (CreateCardMessageResp);
  /**
   * create a picture message.
   * in the js environment, filepath is a file object.
   */
  rpc CreateImageMessage(CreateImageMessageReq) returns (CreateImageMessageResp);
  /**
   * create a sound message.
   * in the js environment, filepath is a file object.
   */
  rpc CreateSoundMessage(CreateSoundMessageReq) returns (CreateSoundMessageResp);
  /**
   * create a video message.
   * in the js environment, filepath is a file object.
   */
  rpc CreateVideoMessage(CreateVideoMessageReq) returns (CreateVideoMessageResp);
  /**
   * create a file message.
   * in the js environment, filepath is a file object.
   */
  rpc CreateFileMessage(CreateFileMessageReq) returns (CreateFileMessageResp);
  /**
   * create a merger message.
   * The merger message is a message that contains multiple messages.
   * The parameter include title, summaries and multiple messages.
   * Notice:
   * It is recommended that the number of merged messages does not exceed 100.
   */
  rpc CreateMergerMessage(CreateMergerMessageReq) returns (CreateMergerMessageResp);
  /**
   * create a face message.
   * Notice:
   * The face message is include a mod face and gif face.
   * If you want to all platform is same, use `index` arg.
   * If you want to not same, use `data` arg. And recommend to set `index` to -1.
   */
  rpc CreateFaceMessage(CreateFaceMessageReq) returns (CreateFaceMessageResp);
  /**
   * create a forward message.
   */
  rpc CreateForwardMessage(CreateForwardMessageReq) returns (CreateForwardMessageResp);
  /**
   * Find message list by conversation args.
   */
  rpc FindMessageList(FindMessageListReq) returns (FindMessageListResp);
  /**
   * Search local messages.
   */
  rpc SearchLocalMessages(SearchLocalMessagesReq) returns (SearchLocalMessagesResp);
  /**
   * Set local extension field for a message. Such as save file path after download file.
   * Notice:
   * Related callbacks:
   * `onConversationChanged`
   * If update message is a latest message, the conversation last message will be update.
   */
  rpc SetMessageLocalEx(SetMessageLocalExReq) returns (SetMessageLocalExResp);
}
